Directory structure:
└── frontend/
    ├── Dockerfile
    ├── backend_overview.txt
    ├── index.html
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── test-connection.js
    ├── vite.config.js
    ├── .eslintrc.cjs
    ├── public/
    ├── src/
    │   ├── App.css
    │   ├── App.jsx
    │   ├── index.css
    │   ├── main.jsx
    │   ├── components/
    │   │   ├── AnalyticsChart.jsx
    │   │   ├── Badge.jsx
    │   │   ├── Button.jsx
    │   │   ├── Card.jsx
    │   │   ├── DataPersistenceIndicator.jsx
    │   │   ├── ErrorBoundary.jsx
    │   │   ├── Input.jsx
    │   │   ├── LoadingSpinner.jsx
    │   │   ├── LogsErrorBoundary.jsx
    │   │   ├── Modal.jsx
    │   │   ├── ProgressBar.css
    │   │   ├── ProgressBar.jsx
    │   │   ├── ProtectedRoute.jsx
    │   │   ├── RealTimeIndicator.jsx
    │   │   ├── RecentActivity.jsx
    │   │   ├── Select.jsx
    │   │   ├── Sidebar.jsx
    │   │   ├── StatCard.jsx
    │   │   ├── Switch.jsx
    │   │   ├── SystemStatusCard.jsx
    │   │   ├── Table.jsx
    │   │   └── index.js
    │   ├── contexts/
    │   │   └── AuthContext.jsx
    │   ├── pages/
    │   │   ├── Dashboard.jsx
    │   │   ├── DnsManagement.css
    │   │   ├── DnsManagement.jsx
    │   │   ├── InterfaceSettings.css
    │   │   ├── InterfaceSettings.jsx
    │   │   ├── Login.jsx
    │   │   ├── Logs.css
    │   │   ├── Logs.jsx
    │   │   ├── NatSettings.css
    │   │   ├── NatSettings.jsx
    │   │   ├── Reports.jsx
    │   │   ├── Routes.css
    │   │   ├── Routes.jsx
    │   │   ├── RuleGroups.css
    │   │   ├── RuleGroups.jsx
    │   │   ├── SecurityRules.css
    │   │   ├── SecurityRules.jsx
    │   │   ├── Settings.css
    │   │   ├── Settings.jsx
    │   │   └── Updates.jsx
    │   ├── services/
    │   │   ├── dashboardService.js
    │   │   ├── dnsService.js
    │   │   ├── interfaceService.js
    │   │   ├── logsService.js
    │   │   ├── natService.js
    │   │   ├── reportsService.js
    │   │   ├── routesService.js
    │   │   ├── ruleGroupsService.js
    │   │   ├── securityRulesService.js
    │   │   ├── settingsService.js
    │   │   ├── updatesService.js
    │   │   └── websocketService.js
    │   └── utils/
    │       └── axios.js
    └── utils/
        └── axios.js

================================================
File: Dockerfile
================================================
# Multi-stage build for optimized production bundle
FROM node:18-alpine as builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Build arguments
ARG VITE_API_URL=http://localhost:8000/api/v1
ENV VITE_API_URL=$VITE_API_URL

# Build application
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine as production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx-frontend.conf /etc/nginx/conf.d/default.conf

# Create nginx user and set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]


================================================
File: backend_overview.txt
================================================



================================================
File: index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>KOBI Firewall</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


================================================
File: package.json
================================================
{
  "name": "kobi-firewall-frontend",
  "version": "2.0.0",
  "private": true,
  "type": "module",
  "proxy": "http://localhost:8000",
  "scripts": {
    "dev": "vite --host 0.0.0.0 --port 3000",
    "start": "vite --host 0.0.0.0 --port 3000",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --ext js,jsx --fix",
    "preview": "vite preview --host 0.0.0.0 --port 3000",
    "format": "prettier --write \"src/**/*.{js,jsx,css,md}\"",
    "format:check": "prettier --check \"src/**/*.{js,jsx,css,md}\"",
    "type-check": "tsc --noEmit",
    "test": "vitest",
    "test:coverage": "vitest --coverage",
    "nat:test": "node scripts/test-nat-endpoints.js",
    "backend:health": "node scripts/check-backend-health.js"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.20.1",
    "axios": "^1.6.2",
    "react-hook-form": "^7.48.2",
    "@hookform/resolvers": "^3.3.2",
    "yup": "^1.4.0",
    "@tanstack/react-query": "^5.8.4",
    "react-chartjs-2": "^5.2.0",
    "chart.js": "^4.4.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-hot-toast": "^2.4.1",
    "react-i18next": "^13.5.0",
    "i18next": "^23.7.6",
    "i18next-browser-languagedetector": "^7.2.0",
    "react-icons": "^4.12.0",
    "clsx": "^2.0.0",
    "date-fns": "^2.30.0",
    "react-helmet-async": "^2.0.4",
    "react-error-boundary": "^4.0.11",
    "@headlessui/react": "^1.7.17",
    "tailwindcss": "^3.3.6",
    "lodash.debounce": "^4.0.8",
    "react-use": "^17.4.2"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "vite": "^5.0.8",
    "eslint": "^8.55.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "prettier": "^3.1.1",
    "typescript": "^5.2.2",
    "vitest": "^1.0.4",
    "@vitest/ui": "^1.0.4",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "@types/lodash.debounce": "^4.0.9"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


================================================
File: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      animation: {
        'pulse': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
        'ping': 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',
        'spin': 'spin 1s linear infinite',
      },
      colors: {
        slate: {
          950: '#020617',
        }
      }
    },
  },
  plugins: [],
}


================================================
File: test-connection.js
================================================
import axios from 'axios'

const API_BASE = 'http://127.0.0.1:8000'

async function testConnection() {
  console.log('Testing backend connection...')
  console.log(`API Base: ${API_BASE}`)

  try {
    // Test 1: Simple connection
    console.log('\n1. Testing basic connection...')
    const response = await axios.get(`${API_BASE}/`, {
      timeout: 10000,
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    })
    console.log('✅ Basic connection successful:', response.data)

    // Test 2: Health check
    console.log('\n2. Testing health endpoint...')
    const healthResponse = await axios.get(`${API_BASE}/health`, {
      timeout: 10000
    })
    console.log('✅ Health check successful:', healthResponse.data)

    // Test 3: API docs
    console.log('\n3. Testing API docs...')
    try {
      const docsResponse = await axios.get(`${API_BASE}/docs`, {
        timeout: 5000,
        validateStatus: function (status) {
          return status < 500; // Accept any status less than 500
        }
      })
      console.log('✅ API docs accessible:', docsResponse.status)
    } catch (e) {
      console.log('⚠️  API docs test skipped (expected for HTML endpoint)')
    }

    // Test 4: Login
    console.log('\n4. Testing login endpoint...')
    const loginResponse = await axios.post(`${API_BASE}/api/v1/auth/login`, {
      username: 'admin',
      password: 'admin123'
    }, {
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    })
    console.log('✅ Login successful:', {
      access_token: loginResponse.data.access_token ? 'Present' : 'Missing',
      user: loginResponse.data.user
    })

    // Test 5: Protected endpoint
    console.log('\n5. Testing protected endpoint...')
    const token = loginResponse.data.access_token
    const meResponse = await axios.get(`${API_BASE}/api/v1/auth/me`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      timeout: 5000
    })
    console.log('✅ Protected endpoint successful:', meResponse.data)

    console.log('\n🎉 All tests passed! Backend is working correctly.')

  } catch (error) {
    console.error('\n❌ Test failed:')
    console.error('Error:', error.message)

    if (error.code) {
      console.error('Error Code:', error.code)
    }

    if (error.response) {
      console.error('Response Status:', error.response.status)
      console.error('Response Data:', error.response.data)
    } else if (error.request) {
      console.error('No response received. Check if backend is running on http://127.0.0.1:8000')
      console.error('Request details:', {
        method: error.config?.method,
        url: error.config?.url,
        timeout: error.config?.timeout
      })
    }

    console.log('\n🔧 Troubleshooting steps:')
    console.log('1. Check if backend is running: http://127.0.0.1:8000/health')
    console.log('2. Check if MongoDB is running')
    console.log('3. Check backend logs for errors')
    console.log('4. Try: cd backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload')
  }
}

testConnection()


================================================
File: vite.config.js
================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    host: '0.0.0.0',
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:8000', // ⚡ localhost yerine 127.0.0.1 (daha güvenilir)
        changeOrigin: true,
        secure: false,
        timeout: 60000, // ⚡ 60 saniye timeout (uzatıldı)
        proxyTimeout: 60000, // ⚡ Proxy timeout eklendi
        rewrite: (path) => path, // ✅ Path rewrite eklendi
        configure: (proxy, _options) => {
          proxy.on('error', (err, req, res) => {
            console.log('🚨 [PROXY] Error:', err.code, err.message);
            console.log('🚨 [PROXY] Failed URL:', req.url);
            console.log('🚨 [PROXY] Target:', 'http://127.0.0.1:8000' + req.url);

            // Fallback response - sadece header gönderilmemişse
            if (!res.headersSent) {
              try {
                res.writeHead(502, {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*', // ⚡ Wildcard için daha uyumlu
                  'Access-Control-Allow-Credentials': 'true',
                  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, PATCH',
                  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin'
                });
                res.end(JSON.stringify({
                  success: false,
                  error: 'Backend sunucusuna bağlanılamıyor - Proxy hatası',
                  details: err.message,
                  code: err.code || 'PROXY_ERROR',
                  timestamp: new Date().toISOString()
                }));
              } catch (writeError) {
                console.log('🚨 [PROXY] Error response yazılamadı:', writeError.message);
              }
            }
          });

          proxy.on('proxyReq', (proxyReq, req, res) => {
            console.log('📤 [PROXY] Request:', req.method, req.url);
            console.log('📤 [PROXY] Forwarding to:', 'http://127.0.0.1:8000' + req.url);

            // Timeout ayarları - REQUEST LEVEL
            proxyReq.setTimeout(60000); // ⚡ 60 saniye request timeout

            // CORS ve Auth headers ekle
            proxyReq.setHeader('Origin', 'http://localhost:3000');
            proxyReq.setHeader('Host', '127.0.0.1:8000');

            // Auth headers korunur
            if (req.headers.authorization) {
              proxyReq.setHeader('Authorization', req.headers.authorization);
            }

            // Content-Type korunur
            if (req.headers['content-type']) {
              proxyReq.setHeader('Content-Type', req.headers['content-type']);
            }

            // Additional headers for better compatibility
            proxyReq.setHeader('X-Requested-With', 'XMLHttpRequest');
            proxyReq.setHeader('Accept', 'application/json');
          });

          proxy.on('proxyRes', (proxyRes, req, res) => {
            console.log('📥 [PROXY] Response:', proxyRes.statusCode, req.url);

            // CORS headers backend'den gelmezse ekle - HER ZAMAN EKLE
            proxyRes.headers['access-control-allow-origin'] = '*';
            proxyRes.headers['access-control-allow-credentials'] = 'true';
            proxyRes.headers['access-control-allow-methods'] = 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
            proxyRes.headers['access-control-allow-headers'] = 'Content-Type, Authorization, X-Requested-With, Accept, Origin';
            proxyRes.headers['access-control-expose-headers'] = 'Content-Length, Content-Type';

            // Cache control
            if (req.url.includes('/health')) {
              proxyRes.headers['cache-control'] = 'no-cache, no-store, must-revalidate';
            }
          });

          // ⚡ YENİ: Proxy request error handling
          proxy.on('proxyReqError', (err, req, res) => {
            console.log('🚨 [PROXY] Request Error:', err.message, 'for', req.url);
            if (!res.headersSent) {
              try {
                res.writeHead(502, {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({
                  success: false,
                  error: 'Proxy request error',
                  details: err.message
                }));
              } catch (writeError) {
                console.log('🚨 [PROXY] ProxyReqError response yazılamadı');
              }
            }
          });

          // ⚡ YENİ: Proxy response error handling
          proxy.on('proxyResError', (err, req, res) => {
            console.log('🚨 [PROXY] Response Error:', err.message, 'for', req.url);
            if (!res.headersSent) {
              try {
                res.writeHead(502, {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                });
                res.end(JSON.stringify({
                  success: false,
                  error: 'Proxy response error',
                  details: err.message
                }));
              } catch (writeError) {
                console.log('🚨 [PROXY] ProxyResError response yazılamadı');
              }
            }
          });
        },
      },
      '/health': {
        target: 'http://127.0.0.1:8000', // ⚡ localhost yerine 127.0.0.1
        changeOrigin: true,
        secure: false,
        timeout: 30000, // ⚡ 30 saniye timeout (uzatıldı)
        proxyTimeout: 30000, // ⚡ Proxy timeout eklendi
        configure: (proxy, _options) => {
          proxy.on('error', (err, req, res) => {
            console.log('🚨 [PROXY] Health check error:', err.message);
            console.log('🚨 [PROXY] Health target check: http://127.0.0.1:8000/health');

            if (!res.headersSent) {
              try {
                res.writeHead(502, {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*', // ⚡ Wildcard için daha uyumlu
                  'Access-Control-Allow-Credentials': 'true'
                });
                res.end(JSON.stringify({
                  status: 'error',
                  error: 'Backend sunucusuna bağlanılamıyor',
                  service: 'Health Check Proxy',
                  details: err.message,
                  timestamp: new Date().toISOString()
                }));
              } catch (writeError) {
                console.log('🚨 [PROXY] Health error response yazılamadı:', writeError.message);
              }
            }
          });

          proxy.on('proxyReq', (proxyReq, req, res) => {
            console.log('🏥 [PROXY] Health check request to backend');
            // Timeout ayarları
            proxyReq.setTimeout(30000); // ⚡ 30 saniye
            proxyReq.setHeader('Accept', 'application/json');
            proxyReq.setHeader('User-Agent', 'Vite-Proxy-Health-Check');
          });

          proxy.on('proxyRes', (proxyRes, req, res) => {
            console.log('🏥 [PROXY] Health check response:', proxyRes.statusCode);
            // Health check için CORS headers
            proxyRes.headers['access-control-allow-origin'] = '*';
            proxyRes.headers['access-control-allow-credentials'] = 'true';
            proxyRes.headers['cache-control'] = 'no-cache, no-store, must-revalidate';
          });

          // Health check error handling
          proxy.on('proxyReqError', (err, req, res) => {
            console.log('🚨 [PROXY] Health check request error:', err.message);
          });

          proxy.on('proxyResError', (err, req, res) => {
            console.log('🚨 [PROXY] Health check response error:', err.message);
          });
        }
      }
    },
    // Vite server CORS ayarları (proxy ile beraber çalışır) - GELİŞTİRİLMİŞ
    cors: {
      origin: [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://localhost:8000',  // Backend port
        'http://127.0.0.1:8000',  // Backend port
        'http://localhost:5173',  // Vite default port
        'http://127.0.0.1:5173'   // Vite default port
      ],
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH', 'HEAD'],
      allowedHeaders: [
        'Content-Type',
        'Authorization',
        'X-Requested-With',
        'Accept',
        'Origin',
        'Access-Control-Request-Method',
        'Access-Control-Request-Headers'
      ],
      credentials: true,
      optionsSuccessStatus: 200 // ⚡ IE11 support
    },
    // ⚡ YENİ: Ek server ayarları
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, PATCH',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin'
    }
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@components': path.resolve(__dirname, './src/components'),
      '@pages': path.resolve(__dirname, './src/pages'),
      '@contexts': path.resolve(__dirname, './src/contexts'),
      '@services': path.resolve(__dirname, './src/services'),
      '@utils': path.resolve(__dirname, './src/utils')
    }
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
          utils: ['axios'] // ⚡ axios'u ayrı chunk'a taşı
        }
      }
    },
    // ⚡ YENİ: Build optimizasyonları
    target: 'esnext',
    minify: 'esbuild',
    chunkSizeWarningLimit: 1000
  },
  define: {
    __DEV__: JSON.stringify(true), // ✅ Syntax düzeltildi
    __VITE_DEV_MODE__: JSON.stringify(process.env.VITE_DEV_MODE === 'true'),
    // ⚡ YENİ: Global tanımlamalar
    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
  },
  optimizeDeps: {
    include: [
      'react',
      'react-dom',
      'react-router-dom',
      'react-hot-toast', // ⚡ Eklendi
      'axios' // ⚡ Eklendi
    ],
    // ⚡ YENİ: Force optimization
    force: false
  },
  // ⚡ YENİ: Preview ayarları (production test için)
  preview: {
    host: '0.0.0.0',
    port: 3000,
    cors: true,
    headers: {
      'Access-Control-Allow-Origin': '*'
    }
  },
  // ⚡ YENİ: CSS ayarları
  css: {
    devSourcemap: true,
    preprocessorOptions: {
      css: {
        charset: false
      }
    }
  }
})


================================================
File: .eslintrc.cjs
================================================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
    'react/prop-types': 'off',
    'no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
    'no-console': ['warn', { allow: ['warn', 'error'] }],
  },
}



================================================
File: src/App.css
================================================
/* App.css */
.App {
  min-height: 100vh;
  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
  color: #ffffff;
}

/* Global app styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Loading states */
.loading {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
}

/* Animation utilities */
.fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Toast notification overrides */
.toast-container {
  z-index: 9999;
}

/* Error boundary styles */
.error-boundary {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  padding: 2rem;
  text-align: center;
}

.error-boundary h2 {
  color: #ef4444;
  margin-bottom: 1rem;
}

.error-boundary p {
  color: #64748b;
  margin-bottom: 2rem;
}

/* Login specific styles */
.login-container {
  background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);
  min-height: 100vh;
}

.login-form {
  backdrop-filter: blur(16px);
  background: rgba(30, 41, 59, 0.6);
  border: 1px solid rgba(71, 85, 105, 0.3);
}

.login-logo {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  box-shadow: 0 20px 40px rgba(59, 130, 246, 0.3);
}

.login-input {
  background: rgba(51, 65, 85, 0.5);
  border: 1px solid rgba(71, 85, 105, 0.6);
  transition: all 0.3s ease;
}

.login-input:focus {
  background: rgba(51, 65, 85, 0.8);
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.login-button {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
  transform: translateY(0);
  transition: all 0.2s ease;
}

.login-button:hover:not(:disabled) {
  background: linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%);
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
}

.login-button:disabled {
  background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

/* Responsive design */
@media (max-width: 768px) {
  .App {
    padding: 0 1rem;
  }

  .login-container {
    padding: 1rem;
  }
}

/* Dark theme consistency */
.dark {
  background-color: #0f172a;
  color: #f8fafc;
}

/* Component overrides for consistency */
.btn-primary {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  color: white;
  font-weight: 600;
  transition: all 0.2s ease;
}

.btn-primary:hover {
  background: linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%);
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.btn-secondary {
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid rgba(71, 85, 105, 0.3);
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  color: white;
  font-weight: 600;
  transition: all 0.2s ease;
}

.btn-secondary:hover {
  background: rgba(71, 85, 105, 0.7);
  border-color: rgba(71, 85, 105, 0.5);
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #1e293b;
}

::-webkit-scrollbar-thumb {
  background: #475569;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #64748b;
}

/* Remember me checkbox styling */
.remember-me-checkbox {
  accent-color: #3b82f6;
}

.remember-me-checkbox:checked {
  background-color: #3b82f6;
  border-color: #3b82f6;
}

/* Loading spinner improvements */
.login-spinner {
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid #ffffff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}


================================================
File: src/App.jsx
================================================
import React, { useState, useEffect, useRef, useMemo } from 'react'
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import { Toaster } from 'react-hot-toast'
import './App.css'

import { AuthProvider } from './contexts/AuthContext'
import LoadingSpinner from './components/LoadingSpinner'
import ErrorBoundary from './components/ErrorBoundary'
import ProtectedRoute from './components/ProtectedRoute'

import Login from './pages/Login'
import Dashboard from './pages/Dashboard'
import Reports from './pages/Reports'
import Updates from './pages/Updates'
import Settings from './pages/Settings'
import NatSettings from './pages/NatSettings'
import DnsManagement from './pages/DnsManagement'
import RoutesPage from './pages/Routes'
import RuleGroups from './pages/RuleGroups'
import InterfaceSettings from './pages/InterfaceSettings'
import SecurityRules from './pages/SecurityRules'
import Logs from './pages/Logs'

// Enhanced App Initializer - Backend entegrasyonu ile
class AppInitializer {
  constructor() {
    this.isInitialized = false
    this.isInitializing = false
    this.initPromise = null
    this.backendStatus = null
  }

  async initialize() {
    if (this.isInitialized) {
      console.log('✅ [INIT] Already initialized, skipping')
      return Promise.resolve()
    }

    if (this.isInitializing && this.initPromise) {
      console.log('⏳ [INIT] Already initializing, waiting for existing promise')
      return this.initPromise
    }

    this.isInitializing = true
    console.log('🚀 [INIT] Starting KOBI Firewall initialization')

    this.initPromise = new Promise(async (resolve, reject) => {
      try {
        console.log('🔍 [INIT] Checking components...')

        // Component validation
        const components = {
          AuthProvider,
          LoadingSpinner,
          ErrorBoundary,
          Login,
          Dashboard,
          Reports,
          Updates,
          Settings,
          NatSettings, // ✅ NAT Settings component
          DnsManagement,
          RoutesPage,
          RuleGroups,
          InterfaceSettings,
          SecurityRules,
          Logs,
          ProtectedRoute
        }

        const missingComponents = Object.entries(components)
          .filter(([name, component]) => !component)
          .map(([name]) => name)

        if (missingComponents.length > 0) {
          throw new Error(`Missing components: ${missingComponents.join(', ')}`)
        }

        console.log('✅ [INIT] All components loaded successfully')

        // Enhanced Backend connectivity check
        try {
          console.log('🔍 [INIT] Checking KOBI Firewall backend...')
          const controller = new AbortController()
          setTimeout(() => controller.abort(), 5000) // Backend için daha uzun timeout

          const backendUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000'
          console.log(`🔗 [INIT] Connecting to: ${backendUrl}`)

          // Main health check
          const healthResponse = await fetch(`${backendUrl}/health`, {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'X-Client-Type': 'kobi-firewall-frontend',
              'X-Client-Version': '2.0.0'
            },
            signal: controller.signal
          })

          if (healthResponse.ok) {
            const healthData = await healthResponse.json()
            this.backendStatus = {
              connected: true,
              status: healthData.status,
              version: healthData.version,
              features: healthData.features,
              proxy_ready: healthData.proxy_ready,
              timestamp: healthData.timestamp
            }

            console.log('✅ [INIT] Backend connected:', {
              status: healthData.status,
              version: healthData.version,
              proxy_ready: healthData.proxy_ready,
              features: healthData.features?.length || 0
            })

            // NAT module specific check
            if (healthData.features?.network_interface_management) {
              console.log('✅ [INIT] NAT module supported by backend')
            }

            // Settings management check
            if (healthData.features?.settings_management) {
              console.log('✅ [INIT] Settings management supported by backend')
            }

          } else {
            throw new Error(`Backend health check failed: ${healthResponse.status}`)
          }

        } catch (backendError) {
          console.warn('⚠️ [INIT] Backend connection failed (continuing in offline mode):', backendError.message)
          this.backendStatus = {
            connected: false,
            error: backendError.message,
            offline_mode: true
          }
        }

        // Initialize localStorage cleanup
        this.cleanupLocalStorage()

        // UX delay
        await new Promise(resolve => setTimeout(resolve, 500))

        this.isInitialized = true
        this.isInitializing = false
        console.log('✅ [INIT] KOBI Firewall initialization completed successfully')
        resolve()

      } catch (error) {
        this.isInitializing = false
        console.error('❌ [INIT] Initialization failed:', error)
        reject(error)
      }
    })

    return this.initPromise
  }

  cleanupLocalStorage() {
    try {
      // Clear any invalid tokens
      const token = localStorage.getItem('token')
      const tokenExpiry = localStorage.getItem('tokenExpiry')

      if (token && tokenExpiry) {
        const now = Date.now()
        const expiry = parseInt(tokenExpiry)

        if (now >= expiry) {
          console.log('🧹 [INIT] Cleaning expired token')
          localStorage.removeItem('token')
          localStorage.removeItem('tokenExpiry')
          localStorage.removeItem('user')
          localStorage.removeItem('userRole')
        }
      }
    } catch (error) {
      console.warn('⚠️ [INIT] LocalStorage cleanup warning:', error.message)
    }
  }

  getBackendStatus() {
    return this.backendStatus
  }

  reset() {
    console.log('🔄 [INIT] Resetting KOBI Firewall initialization state')
    this.isInitialized = false
    this.isInitializing = false
    this.initPromise = null
    this.backendStatus = null
  }
}

// Global initializer instance
const appInitializer = new AppInitializer()

// Enhanced global reset function
window.resetKobiFirewall = () => {
  console.log('🔄 [APP] Resetting KOBI Firewall application')
  appInitializer.reset()

  // Clear all localStorage
  localStorage.clear()

  // Reload with cache bust
  const url = new URL(window.location)
  url.searchParams.set('_t', Date.now())
  window.location.href = url.toString()
}

// Global backend status check
window.getBackendStatus = () => {
  return appInitializer.getBackendStatus()
}

console.log('📱 [APP] KOBI Firewall App component loaded')

function App() {
  const [isReady, setIsReady] = useState(false)
  const [error, setError] = useState(null)
  const [backendStatus, setBackendStatus] = useState(null)
  const mountId = useRef(Math.random().toString(36).substr(2, 9))
  const hasInitialized = useRef(false)

  console.log(`📱 [APP] KOBI Firewall App render - Mount ID: ${mountId.current}`)

  // Memoized initialization function
  const initApp = useMemo(() => {
    return async () => {
      if (hasInitialized.current) {
        console.log('🔄 [APP] Init already called for this mount, skipping')
        setIsReady(true)
        return
      }

      hasInitialized.current = true
      console.log(`🚀 [APP] Starting KOBI Firewall initialization for mount ${mountId.current}`)

      try {
        await appInitializer.initialize()
        setBackendStatus(appInitializer.getBackendStatus())
        setIsReady(true)
        console.log(`✅ [APP] Mount ${mountId.current} ready`)
      } catch (initError) {
        console.error(`❌ [APP] Mount ${mountId.current} failed:`, initError)
        setError(initError)
        setIsReady(true)
      }
    }
  }, [])

  useEffect(() => {
    console.log(`🔄 [APP] useEffect triggered for mount ${mountId.current}`)
    initApp()
  }, [initApp])

  useEffect(() => {
    return () => {
      console.log(`🔄 [APP] Mount ${mountId.current} unmounting`)
    }
  }, [])

  // Enhanced Error State
  if (error) {
    console.log('❌ [APP] Error state render')
    return (
      <div style={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: 'linear-gradient(135deg, #0f172a 0%, #1e293b 100%)',
        color: 'white',
        fontFamily: 'system-ui, -apple-system, sans-serif',
        textAlign: 'center',
        padding: '20px'
      }}>
        <div style={{ maxWidth: '600px' }}>
          <div style={{ fontSize: '4rem', marginBottom: '1rem' }}>🔥</div>
          <h1 style={{ color: '#ef4444', marginBottom: '16px', fontSize: '1.5rem' }}>
            KOBI Firewall Başlatma Hatası
          </h1>
          <p style={{ color: '#94a3b8', marginBottom: '24px', lineHeight: '1.5' }}>
            {error.message}
          </p>

          {backendStatus && !backendStatus.connected && (
            <div style={{
              background: 'rgba(239, 68, 68, 0.1)',
              border: '1px solid rgba(239, 68, 68, 0.3)',
              borderRadius: '8px',
              padding: '16px',
              marginBottom: '24px',
              textAlign: 'left'
            }}>
              <h3 style={{ color: '#ef4444', margin: '0 0 8px 0', fontSize: '1rem' }}>
                Backend Bağlantı Sorunu
              </h3>
              <p style={{ color: '#94a3b8', margin: '0', fontSize: '0.875rem' }}>
                Backend server'a bağlanılamıyor. Lütfen backend'in çalışır durumda olduğundan emin olun.
              </p>
            </div>
          )}

          <details style={{
            color: '#64748b',
            fontSize: '12px',
            marginBottom: '24px',
            textAlign: 'left'
          }}>
            <summary style={{ cursor: 'pointer', marginBottom: '10px' }}>
              Debug Bilgileri
            </summary>
            <pre style={{
              background: '#1e293b',
              padding: '10px',
              borderRadius: '4px',
              overflow: 'auto',
              fontSize: '11px'
            }}>
              Mount ID: {mountId.current}{'\n'}
              Error: {error.message}{'\n'}
              Stack: {error.stack}{'\n'}
              Backend Status: {JSON.stringify(backendStatus, null, 2)}
            </pre>
          </details>

          <div style={{ display: 'flex', gap: '12px', justifyContent: 'center', flexWrap: 'wrap' }}>
            <button
              onClick={() => {
                appInitializer.reset()
                window.location.reload()
              }}
              style={{
                background: '#3b82f6',
                color: 'white',
                padding: '12px 24px',
                border: 'none',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '500'
              }}
            >
              🔄 Reset ve Yenile
            </button>

            <button
              onClick={() => {
                window.location.href = '/login'
              }}
              style={{
                background: '#64748b',
                color: 'white',
                padding: '12px 24px',
                border: 'none',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px'
              }}
            >
              🏠 Login Sayfasına Git
            </button>
          </div>
        </div>
      </div>
    )
  }

  // Enhanced Loading State
  if (!isReady) {
    console.log(`⏳ [APP] Loading state - Mount ${mountId.current}`)
    return (
      <div style={{ position: 'relative', minHeight: '100vh' }}>
        <LoadingSpinner message="KOBI Firewall başlatılıyor..." />

        {/* Debug info */}
        <div style={{
          position: 'fixed',
          bottom: '10px',
          left: '10px',
          background: 'rgba(0,0,0,0.8)',
          color: 'white',
          padding: '8px 12px',
          borderRadius: '4px',
          fontSize: '11px',
          fontFamily: 'monospace',
          zIndex: 9999
        }}>
          <div>Mount: {mountId.current}</div>
          <div>Backend: {backendStatus?.connected ? '✅' : '⏳'}</div>
          <div>NAT Ready: {backendStatus?.features?.network_interface_management ? '✅' : '⏳'}</div>
        </div>
      </div>
    )
  }

  console.log(`🎨 [APP] KOBI Firewall main render - Mount ${mountId.current}`)

  return (
    <ErrorBoundary>
      <AuthProvider>
        <Router>
          <div className="App">
            {/* Enhanced Debug info */}
            {process.env.NODE_ENV === 'development' && (
              <div style={{
                position: 'fixed',
                top: '10px',
                right: '10px',
                background: 'rgba(0,0,0,0.8)',
                color: 'white',
                padding: '8px 12px',
                borderRadius: '4px',
                fontSize: '11px',
                fontFamily: 'monospace',
                zIndex: 9999,
                minWidth: '200px'
              }}>
                <div>🔥 KOBI Firewall v2.0</div>
                <div>Mount: {mountId.current.substr(0,6)}</div>
                <div>Time: {new Date().toLocaleTimeString()}</div>
                <div>Backend: {backendStatus?.connected ? '✅ Connected' : '❌ Offline'}</div>
                <div>NAT: {backendStatus?.features?.network_interface_management ? '✅' : '❌'}</div>
              </div>
            )}

            {/* Routes - NAT Settings dahil */}
            <Routes>
              {/* Public Routes */}
              <Route path="/login" element={<Login />} />

              {/* Protected Routes */}
              <Route
                path="/dashboard"
                element={
                  <ProtectedRoute>
                    <Dashboard />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/logs"
                element={
                  <ProtectedRoute>
                    <Logs />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/reports"
                element={
                  <ProtectedRoute>
                    <Reports />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/updates"
                element={
                  <ProtectedRoute>
                    <Updates />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/settings"
                element={
                  <ProtectedRoute>
                    <Settings />
                  </ProtectedRoute>
                }
              />

              {/* 🔥 NAT Settings Route - Enhanced */}
              <Route
                path="/nat-settings"
                element={
                  <ProtectedRoute adminRequired={true}>
                    <NatSettings />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/dns-management"
                element={
                  <ProtectedRoute>
                    <DnsManagement />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/routes"
                element={
                  <ProtectedRoute>
                    <RoutesPage />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/rule-groups"
                element={
                  <ProtectedRoute>
                    <RuleGroups />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/security-rules"
                element={
                  <ProtectedRoute>
                    <SecurityRules />
                  </ProtectedRoute>
                }
              />

              <Route
                path="/interface-settings"
                element={
                  <ProtectedRoute adminRequired={true}>
                    <InterfaceSettings />
                  </ProtectedRoute>
                }
              />

              {/* Default Routes */}
              <Route path="/" element={<Navigate to="/dashboard" replace />} />
              <Route path="*" element={<Navigate to="/dashboard" replace />} />
            </Routes>

            {/* Enhanced Toaster */}
            <Toaster
              position="top-right"
              gutter={8}
              toastOptions={{
                duration: 4000,
                style: {
                  background: '#1e293b',
                  color: '#fff',
                  border: '1px solid #475569',
                  borderRadius: '8px',
                  fontSize: '14px',
                  fontWeight: '500'
                },
                success: {
                  style: {
                    border: '1px solid #22c55e',
                    background: 'rgba(34, 197, 94, 0.1)'
                  },
                },
                error: {
                  style: {
                    border: '1px solid #ef4444',
                    background: 'rgba(239, 68, 68, 0.1)'
                  },
                  duration: 6000
                },
                loading: {
                  style: {
                    border: '1px solid #3b82f6',
                    background: 'rgba(59, 130, 246, 0.1)'
                  }
                }
              }}
            />
          </div>
        </Router>
      </AuthProvider>
    </ErrorBoundary>
  )
}

export default App


================================================
File: src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  min-height: 100vh;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #1e293b;
}

::-webkit-scrollbar-thumb {
  background: #475569;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #64748b;
}

/* Custom animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in {
  animation: fadeIn 0.5s ease-out;
}

/* Loading animations */
@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* Form styles */
input:focus, button:focus, select:focus, textarea:focus {
  outline: none;
}

/* Transition styles */
.transition-all {
  transition: all 0.2s ease-in-out;
}

/* Glass morphism effect */
.glass {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
}

/* Button hover effects */
.btn-primary {
  @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold py-3 px-4 rounded-lg transition-all duration-200;
}

.btn-secondary {
  @apply bg-slate-700 hover:bg-slate-600 text-white font-semibold py-3 px-4 rounded-lg transition-all duration-200;
}

/* Toast customization */
.toast-success {
  background: #059669 !important;
  color: white !important;
}

.toast-error {
  background: #dc2626 !important;
  color: white !important;
}

/* Responsive utilities */
@screen sm {
  .container {
    max-width: 640px;
  }
}

@screen md {
  .container {
    max-width: 768px;
  }
}

@screen lg {
  .container {
    max-width: 1024px;
  }
}

@screen xl {
  .container {
    max-width: 1280px;
  }
}


================================================
File: src/main.jsx
================================================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

// Detaylı hata yakalama ve debug sistemi
console.log('🚀 [MAIN] React uygulaması başlatılıyor...')
console.log('🚀 [MAIN] Environment:', {
  NODE_ENV: import.meta.env.NODE_ENV,
  DEV: import.meta.env.DEV,
  PROD: import.meta.env.PROD,
  BASE_URL: import.meta.env.BASE_URL,
  VITE_API_URL: import.meta.env.VITE_API_URL
})

// Global error handler - detaylı hata yakalama
window.addEventListener('error', (event) => {
  console.error('🚨 [GLOBAL ERROR]:', event.error)
  console.error('🚨 [ERROR DETAILS]:', {
    message: event.message,
    filename: event.filename,
    lineno: event.lineno,
    colno: event.colno,
    stack: event.error?.stack
  })
})

// Promise rejection handler
window.addEventListener('unhandledrejection', (event) => {
  console.error('🚨 [UNHANDLED PROMISE REJECTION]:', event.reason)
  console.error('🚨 [PROMISE ERROR DETAILS]:', event)
})

// React error boundary fallback
const ErrorFallback = ({ error, errorInfo }) => {
  console.error('🚨 [REACT ERROR BOUNDARY]:', error)
  console.error('🚨 [ERROR INFO]:', errorInfo)

  return (
    <div style={{
      minHeight: '100vh',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      background: 'linear-gradient(135deg, #0f172a 0%, #1e293b 100%)',
      color: 'white',
      fontFamily: 'system-ui, -apple-system, sans-serif',
      textAlign: 'center',
      padding: '20px'
    }}>
      <div>
        <h1 style={{ color: '#ef4444', marginBottom: '16px', fontSize: '24px' }}>
          React Hatası Tespit Edildi
        </h1>
        <p style={{ color: '#94a3b8', marginBottom: '24px' }}>
          Konsolu kontrol edin ve sayfayı yenileyin
        </p>
        <div style={{
          background: '#1e293b',
          padding: '16px',
          borderRadius: '8px',
          marginBottom: '24px',
          textAlign: 'left',
          fontSize: '12px',
          fontFamily: 'monospace',
          border: '1px solid #475569'
        }}>
          <div style={{ color: '#ef4444', marginBottom: '8px' }}>Error:</div>
          <div style={{ color: '#f8fafc' }}>{error.toString()}</div>
          {error.stack && (
            <>
              <div style={{ color: '#ef4444', marginTop: '12px', marginBottom: '8px' }}>Stack:</div>
              <div style={{ color: '#94a3b8', fontSize: '10px' }}>
                {error.stack.split('\n').slice(0, 5).join('\n')}
              </div>
            </>
          )}
        </div>
        <button
          onClick={() => window.location.reload()}
          style={{
            background: '#3b82f6',
            color: 'white',
            padding: '12px 24px',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
        >
          Sayfayı Yenile
        </button>
      </div>
    </div>
  )
}

try {
  console.log('🔍 [MAIN] DOM root elementi aranıyor...')
  const rootElement = document.getElementById('root')

  if (!rootElement) {
    throw new Error('Root element bulunamadı! index.html dosyasında <div id="root"></div> var mı?')
  }

  console.log('✅ [MAIN] Root element bulundu:', rootElement)

  console.log('🔍 [MAIN] ReactDOM.createRoot çağrılıyor...')
  const root = ReactDOM.createRoot(rootElement)

  console.log('✅ [MAIN] Root oluşturuldu, App component render ediliyor...')
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  )

  console.log('✅ [MAIN] React uygulaması başarıyla başlatıldı')
} catch (error) {
  console.error('❌ [MAIN] FATAL ERROR:', error)
  console.error('❌ [MAIN] Error type:', typeof error)
  console.error('❌ [MAIN] Error name:', error.name)
  console.error('❌ [MAIN] Error message:', error.message)
  console.error('❌ [MAIN] Error stack:', error.stack)

  // Fallback render
  try {
    document.getElementById('root').innerHTML = `
      <div style="
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        color: white;
        font-family: system-ui, -apple-system, sans-serif;
        text-align: center;
        padding: 20px;
      ">
        <div>
          <h1 style="color: #ef4444; margin-bottom: 16px; font-size: 24px;">
            Kritik Başlatma Hatası
          </h1>
          <p style="color: #94a3b8; margin-bottom: 24px;">
            React uygulaması başlatılamadı
          </p>
          <div style="
            background: #1e293b;
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 24px;
            text-align: left;
            font-size: 12px;
            font-family: monospace;
            border: 1px solid #475569;
          ">
            <div style="color: #ef4444; margin-bottom: 8px;">Error:</div>
            <div style="color: #f8fafc;">${error.message}</div>
            <div style="color: #94a3b8; margin-top: 8px; font-size: 10px;">
              Type: ${error.name || 'Unknown'}
            </div>
          </div>
          <button onclick="window.location.reload()" style="
            background: #3b82f6;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
          ">
            Sayfayı Yenile
          </button>
          <div style="margin-top: 16px; font-size: 12px; color: #64748b;">
            F12 tuşuna basıp konsolu kontrol edin
          </div>
        </div>
      </div>`
  } catch (fallbackError) {
    console.error('❌ [MAIN] Fallback render da başarısız:', fallbackError)
  }
}


================================================
File: src/components/AnalyticsChart.jsx
================================================
import React, { useState, useEffect } from 'react';
import { FaChartLine } from 'react-icons/fa';

const AnalyticsChart = () => {
  const [activeFilter, setActiveFilter] = useState('24h');
  const [chartData, setChartData] = useState({
    totalConnections: [],
    blockedConnections: []
  });

  const filters = [
    { key: '24h', label: '24sa' },
    { key: '7d', label: '7g' },
    { key: '30d', label: '30g' }
  ];

  // Simulated data generation
  useEffect(() => {
    const generateData = () => {
      const hours = Array.from({length: 24}, (_, i) => {
        const hour = i.toString().padStart(2, '0') + ':00';
        const totalConnections = Math.floor(Math.random() * 500) + 200;
        const blockedConnections = Math.floor(totalConnections * (Math.random() * 0.2 + 0.05));

        return {
          time: hour,
          total: totalConnections,
          blocked: blockedConnections
        };
      });

      setChartData({
        totalConnections: hours.map(h => ({ time: h.time, value: h.total })),
        blockedConnections: hours.map(h => ({ time: h.time, value: h.blocked }))
      });
    };

    generateData();
    const interval = setInterval(generateData, 30000); // Update every 30 seconds

    return () => clearInterval(interval);
  }, [activeFilter]);

  const maxValue = Math.max(
    ...chartData.totalConnections.map(d => d.value),
    ...chartData.blockedConnections.map(d => d.value)
  );

  return (
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <FaChartLine className="text-blue-400 text-xl" />
          <h3 className="text-white font-semibold text-lg">Analitik</h3>
        </div>
        <div className="flex bg-slate-700/50 rounded-lg p-1">
          {filters.map((filter) => (
            <button
              key={filter.key}
              onClick={() => setActiveFilter(filter.key)}
              className={`px-3 py-1 text-sm rounded-md transition-all ${
                activeFilter === filter.key
                  ? 'bg-blue-600 text-white'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              {filter.label}
            </button>
          ))}
        </div>
      </div>

      <p className="text-gray-400 text-sm mb-6">Zaman iÃ§indeki aÄŸ etkinliÄŸi</p>

      {/* Chart Container */}
      <div className="relative h-64 bg-slate-900/30 rounded-lg p-4">
        {/* Y-axis labels */}
        <div className="absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-gray-500 py-4">
          <span>{maxValue}</span>
          <span>{Math.floor(maxValue * 0.75)}</span>
          <span>{Math.floor(maxValue * 0.5)}</span>
          <span>{Math.floor(maxValue * 0.25)}</span>
          <span>0</span>
        </div>

        {/* Chart Area */}
        <div className="ml-8 h-full relative">
          <svg className="w-full h-full" viewBox="0 0 800 200">
            {/* Grid lines */}
            {[0, 0.25, 0.5, 0.75, 1].map((ratio, index) => (
              <line
                key={index}
                x1="0"
                y1={200 - (ratio * 180)}
                x2="800"
                y2={200 - (ratio * 180)}
                stroke="#334155"
                strokeWidth="0.5"
                opacity="0.5"
              />
            ))}

            {/* Total Connections Line */}
            <path
              d={`M ${chartData.totalConnections.map((point, index) =>
                `${(index / (chartData.totalConnections.length - 1)) * 800},${200 - ((point.value / maxValue) * 180)}`
              ).join(' L ')}`}
              fill="none"
              stroke="#3B82F6"
              strokeWidth="3"
              className="drop-shadow-lg"
            />

            {/* Blocked Connections Line */}
            <path
              d={`M ${chartData.blockedConnections.map((point, index) =>
                `${(index / (chartData.blockedConnections.length - 1)) * 800},${200 - ((point.value / maxValue) * 180)}`
              ).join(' L ')}`}
              fill="none"
              stroke="#EF4444"
              strokeWidth="2"
              className="drop-shadow-lg"
            />

            {/* Area fill for total connections */}
            <path
              d={`M ${chartData.totalConnections.map((point, index) =>
                `${(index / (chartData.totalConnections.length - 1)) * 800},${200 - ((point.value / maxValue) * 180)}`
              ).join(' L ')} L 800,200 L 0,200 Z`}
              fill="url(#totalGradient)"
              opacity="0.1"
            />

            {/* Gradients */}
            <defs>
              <linearGradient id="totalGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                <stop offset="0%" style={{stopColor: '#3B82F6', stopOpacity: 0.3}} />
                <stop offset="100%" style={{stopColor: '#3B82F6', stopOpacity: 0}} />
              </linearGradient>
            </defs>
          </svg>
        </div>

        {/* X-axis labels */}
        <div className="flex justify-between text-xs text-gray-500 mt-2 ml-8">
          {['00:00', '04:00', '08:00', '12:00', '16:00', '20:00'].map((time, index) => (
            <span key={index}>{time}</span>
          ))}
        </div>
      </div>

      {/* Legend */}
      <div className="flex items-center justify-center space-x-6 mt-4">
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
          <span className="text-gray-400 text-sm">Toplam BaÄŸlantÄ±</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
          <span className="text-gray-400 text-sm">Engellenen</span>
        </div>
      </div>
    </div>
  );
};

export default AnalyticsChart;


================================================
File: src/components/Badge.jsx
================================================
import React from 'react';

const Badge = ({
  children,
  variant = 'primary',
  size = 'md',
  className = ''
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-full';

  const variants = {
    primary: 'bg-blue-100 text-blue-800',
    secondary: 'bg-gray-100 text-gray-800',
    success: 'bg-green-100 text-green-800',
    warning: 'bg-yellow-100 text-yellow-800',
    danger: 'bg-red-100 text-red-800',
    info: 'bg-blue-100 text-blue-800'
  };

  const sizes = {
    sm: 'px-2 py-1 text-xs',
    md: 'px-3 py-1 text-sm',
    lg: 'px-4 py-2 text-base'
  };

  return (
    <span className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`}>
      {children}
    </span>
  );
};

export default Badge;


================================================
File: src/components/Button.jsx
================================================
import React from 'react';

const Button = ({
  children,
  onClick,
  variant = 'primary',
  size = 'md',
  disabled = false,
  className = '',
  type = 'button'
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors';

  const variants = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',
    outline: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500'
  };

  const sizes = {
    sm: 'px-3 py-2 text-sm',
    md: 'px-4 py-2 text-sm',
    lg: 'px-6 py-3 text-base'
  };

  const disabledClasses = disabled ? 'opacity-50 cursor-not-allowed' : '';

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${disabledClasses} ${className}`}
    >
      {children}
    </button>
  );
};

export default Button;


================================================
File: src/components/Card.jsx
================================================
import React from 'react';

const Card = ({ children, title, className = '' }) => {
  return (
    <div className={`bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 ${className}`}>
      {title && (
        <div className="px-6 py-4 border-b border-slate-700/50">
          <h3 className="text-lg font-medium text-white">{title}</h3>
        </div>
      )}
      <div className="p-6">
        {children}
      </div>
    </div>
  );
};

export default Card;


================================================
File: src/components/DataPersistenceIndicator.jsx
================================================
import React, { useState, useEffect, useCallback } from 'react';
import {
  FaDatabase,
  FaCheckCircle,
  FaExclamationTriangle,
  FaClock,
  FaServer,
  FaHdd,
  FaChartLine,
  FaTimes,
  FaSync,
  FaInfoCircle,
  FaNetworkWired,
  FaShieldAlt,
  FaEye,
  FaWifi,
  FaBolt,
  FaHistory
} from 'react-icons/fa';
import { logsService } from '../services/logsService';

const DataPersistenceIndicator = ({
  className = '',
  size = 'normal',
  showDetails = true,
  onStatusChange = null,
  refreshInterval = 60000 // 1 minute default
}) => {
  // Enhanced data status state
  const [dataStatus, setDataStatus] = useState(null);
  const [realTimeStats, setRealTimeStats] = useState(null);
  const [trafficSummary, setTrafficSummary] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState(null);
  const [error, setError] = useState(null);

  // UI state
  const [isExpanded, setIsExpanded] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [activeTab, setActiveTab] = useState('overview'); // overview, traffic, performance

  // Performance tracking
  const [performanceHistory, setPerformanceHistory] = useState([]);

  // Enhanced fetch function with multiple data sources
  const fetchAllData = useCallback(async () => {
    try {
      setError(null);

      // Fetch multiple data sources in parallel
      const [dataStatusRes, realTimeStatsRes, trafficSummaryRes] = await Promise.allSettled([
        logsService.getDataStatus(),
        logsService.getRealTimeStats(),
        logsService.getTrafficSummary('1h')
      ]);

      // Process data status
      if (dataStatusRes.status === 'fulfilled' && dataStatusRes.value.success) {
        setDataStatus(dataStatusRes.value.data);
      }

      // Process real-time stats
      if (realTimeStatsRes.status === 'fulfilled' && realTimeStatsRes.value.success) {
        setRealTimeStats(realTimeStatsRes.value.data);

        // Add to performance history
        setPerformanceHistory(prev => {
          const newEntry = {
            timestamp: new Date(),
            logsPerMinute: realTimeStatsRes.value.data.logs_per_minute || 0,
            activeConnections: realTimeStatsRes.value.data.active_connections || 0,
            totalPackets: realTimeStatsRes.value.data.total_packets || 0
          };

          // Keep only last 20 entries
          const updated = [...prev, newEntry].slice(-20);
          return updated;
        });
      }

      // Process traffic summary
      if (trafficSummaryRes.status === 'fulfilled' && trafficSummaryRes.value.success) {
        setTrafficSummary(trafficSummaryRes.value.data);
      }

      setLastUpdate(new Date());

      // Notify parent if callback provided
      if (onStatusChange) {
        onStatusChange({
          dataStatus: dataStatusRes.status === 'fulfilled' ? dataStatusRes.value.data : null,
          realTimeStats: realTimeStatsRes.status === 'fulfilled' ? realTimeStatsRes.value.data : null,
          isHealthy: dataStatusRes.status === 'fulfilled' && dataStatusRes.value.success
        });
      }

    } catch (error) {
      console.error('Enhanced data status fetch error:', error);
      setError('Veri durumu alÄ±namadÄ±');

      if (onStatusChange) {
        onStatusChange({ error: error.message, isHealthy: false });
      }
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  }, [onStatusChange]);

  // Auto-refresh with configurable interval
  useEffect(() => {
    fetchAllData();

    if (refreshInterval > 0) {
      const interval = setInterval(fetchAllData, refreshInterval);
      return () => clearInterval(interval);
    }
  }, [fetchAllData, refreshInterval]);

  const handleRefresh = async () => {
    setRefreshing(true);
    await fetchAllData();
  };

  // Enhanced format functions
  const formatUptime = (seconds) => {
    if (!seconds || seconds < 0) return '0s';
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);

    if (days > 0) return `${days}g ${hours}s`;
    if (hours > 0) return `${hours}s ${minutes}dk`;
    if (minutes > 0) return `${minutes}dk`;
    return `${seconds}s`;
  };

  const formatNumber = (num) => {
    if (!num || num < 0) return '0';
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
    return num.toLocaleString();
  };

  const formatBytes = (bytes) => {
    if (!bytes || bytes < 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatRate = (rate) => {
    if (!rate || rate < 0) return '0/dk';
    if (rate >= 60) return `${(rate / 60).toFixed(1)}/s`;
    return `${rate.toFixed(1)}/dk`;
  };

  // Size variants
  const sizeClasses = {
    small: {
      container: 'px-2 py-1 text-xs',
      icon: 'text-xs',
      text: 'text-xs'
    },
    normal: {
      container: 'px-3 py-1.5 text-sm',
      icon: 'text-sm',
      text: 'text-xs'
    },
    large: {
      container: 'px-4 py-2 text-base',
      icon: 'text-base',
      text: 'text-sm'
    }
  };

  const currentSize = sizeClasses[size] || sizeClasses.normal;

  // Loading state
  if (isLoading) {
    return (
      <div className={`flex items-center space-x-2 rounded-full border bg-gray-500/20 border-gray-500/30 ${currentSize.container} ${className}`}>
        <FaDatabase className={`text-gray-400 ${currentSize.icon} animate-pulse`} />
        <span className={`text-gray-400 ${currentSize.text}`}>
          PC-to-PC durum kontrol ediliyor...
        </span>
      </div>
    );
  }

  // Error state
  if (error || !dataStatus?.persistence) {
    return (
      <div className={`flex items-center space-x-2 rounded-full border bg-red-500/20 border-red-500/30 ${currentSize.container} ${className}`}>
        <FaExclamationTriangle className={`text-red-400 ${currentSize.icon}`} />
        <span className={`text-red-400 ${currentSize.text}`}>
          Veri durumu alÄ±namadÄ±
        </span>
        {showDetails && (
          <button
            onClick={handleRefresh}
            className="text-red-400 hover:text-red-300 transition-colors"
            title="Yeniden dene"
          >
            <FaSync className={`text-xs ${refreshing ? 'animate-spin' : ''}`} />
          </button>
        )}
      </div>
    );
  }

  const { persistence } = dataStatus;

  // Enhanced status determination
  const getEnhancedStatusConfig = () => {
    const isPersistent = persistence.enabled && persistence.dataCollection;
    const hasData = persistence.totalActivities > 0;
    const isRealTimeActive = realTimeStats?.system_status === 'active';
    const hasRecentActivity = realTimeStats?.recent_logs_5min > 0;

    if (isPersistent && hasData && isRealTimeActive && hasRecentActivity) {
      return {
        icon: FaCheckCircle,
        color: 'text-green-400',
        bgColor: 'bg-green-500/20',
        borderColor: 'border-green-500/30',
        statusText: 'PC-to-PC Monitoring Aktif',
        statusColor: 'text-green-300',
        status: 'active',
        pulseColor: 'bg-green-400'
      };
    } else if (isPersistent && isRealTimeActive) {
      return {
        icon: FaWifi,
        color: 'text-blue-400',
        bgColor: 'bg-blue-500/20',
        borderColor: 'border-blue-500/30',
        statusText: 'Trafik Ä°zleme HazÄ±r',
        statusColor: 'text-blue-300',
        status: 'ready',
        pulseColor: 'bg-blue-400'
      };
    } else if (isPersistent && !hasData) {
      return {
        icon: FaClock,
        color: 'text-yellow-400',
        bgColor: 'bg-yellow-500/20',
        borderColor: 'border-yellow-500/30',
        statusText: 'Veri Bekleniyor',
        statusColor: 'text-yellow-300',
        status: 'waiting',
        pulseColor: 'bg-yellow-400'
      };
    } else {
      return {
        icon: FaExclamationTriangle,
        color: 'text-red-400',
        bgColor: 'bg-red-500/20',
        borderColor: 'border-red-500/30',
        statusText: 'Monitoring Devre DÄ±ÅŸÄ±',
        statusColor: 'text-red-300',
        status: 'inactive',
        pulseColor: 'bg-red-400'
      };
    }
  };

  const config = getEnhancedStatusConfig();
  const Icon = config.icon;

  // Get activity rate from real-time stats
  const activityRate = realTimeStats?.logs_per_minute || 0;
  const recentActivity = realTimeStats?.recent_logs_5min || 0;

  // Compact version for small size
  if (size === 'small') {
    return (
      <div
        className={`inline-flex items-center space-x-1 rounded-full border ${config.bgColor} ${config.borderColor} ${currentSize.container} ${className}`}
        title={`${config.statusText}: ${formatNumber(persistence.totalActivities)} kayÄ±t`}
      >
        <div className="relative">
          <div className={`flex items-center space-x-1 ${config.color}`}>
            <Icon className={currentSize.icon} />
            <FaDatabase className={currentSize.icon} />
          </div>
          {config.status === 'active' && (
            <div className={`absolute -top-1 -right-1 w-2 h-2 ${config.pulseColor} rounded-full animate-pulse`} />
          )}
        </div>
        <span className={`font-medium ${config.statusColor} ${currentSize.text}`}>
          {formatNumber(persistence.totalActivities)}
        </span>
      </div>
    );
  }

  // Normal and large versions with enhanced features
  return (
    <div className={`relative ${className}`}>
      <div
        className={`flex items-center space-x-2 rounded-full border cursor-pointer transition-all duration-200 hover:shadow-lg ${config.bgColor} ${config.borderColor} ${currentSize.container} ${
          isExpanded ? 'rounded-lg shadow-lg' : ''
        }`}
        onClick={() => showDetails && setIsExpanded(!isExpanded)}
      >
        {/* Enhanced Status Icons */}
        <div className="relative">
          <div className={`flex items-center space-x-1 ${config.color}`}>
            <Icon className={currentSize.icon} />
            <FaDatabase className={currentSize.icon} />
          </div>

          {/* Activity pulse indicator */}
          {config.status === 'active' && (
            <div className={`absolute -top-1 -right-1 w-2 h-2 ${config.pulseColor} rounded-full animate-pulse`} />
          )}

          {/* Real-time activity indicator */}
          {recentActivity > 0 && (
            <div className="absolute -bottom-1 -left-1 w-2 h-2 bg-blue-400 rounded-full animate-ping" />
          )}
        </div>

        {/* Enhanced Status Text */}
        <div className={currentSize.text}>
          <div className={`font-medium ${config.statusColor}`}>
            {config.statusText}
          </div>
          {showDetails && (
            <div className="text-gray-400">
              {formatNumber(persistence.totalActivities)} kayÄ±t
              {activityRate > 0 && (
                <span className="ml-1">â€¢ {formatRate(activityRate)}</span>
              )}
              {persistence.systemUptime > 0 && (
                <span className="ml-1">â€¢ {formatUptime(persistence.systemUptime)}</span>
              )}
            </div>
          )}
        </div>

        {/* Enhanced Activity Badges */}
        <div className="flex items-center space-x-1">
          {persistence.totalActivities > 0 && (
            <div className="bg-blue-500 text-white text-xs font-bold px-2 py-0.5 rounded-full">
              {formatNumber(persistence.totalActivities)}
            </div>
          )}

          {recentActivity > 0 && (
            <div className="bg-green-500 text-white text-xs font-bold px-1.5 py-0.5 rounded-full animate-bounce">
              +{recentActivity}
            </div>
          )}
        </div>

        {/* Last Update Indicator */}
        {lastUpdate && showDetails && (
          <div className="text-gray-500" title={`Son gÃ¼ncelleme: ${lastUpdate.toLocaleTimeString('tr-TR')}`}>
            <FaClock className="text-xs" />
          </div>
        )}

        {/* Refresh Button */}
        {showDetails && (
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleRefresh();
            }}
            className={`${config.color} hover:text-white transition-colors`}
            title="Yenile"
          >
            <FaSync className={`text-xs ${refreshing ? 'animate-spin' : ''}`} />
          </button>
        )}

        {/* Expand Indicator */}
        {showDetails && (
          <div className={`transition-transform duration-200 ${config.color} ${
            isExpanded ? 'rotate-180' : ''
          }`}>
            â–¼
          </div>
        )}
      </div>

      {/* Enhanced Expanded Details Panel */}
      {isExpanded && showDetails && (
        <div className="absolute top-full left-0 right-0 mt-2 bg-slate-800/95 backdrop-blur-xl border border-slate-700/50 rounded-lg p-4 shadow-xl z-50 min-w-[400px]">
          {/* Enhanced Header with Tabs */}
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <FaNetworkWired className="text-blue-400" />
              <h4 className="text-white font-medium">PC-to-PC Data Persistence</h4>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowAdvanced(!showAdvanced)}
                className="text-gray-400 hover:text-white transition-colors text-xs"
                title="GeliÅŸmiÅŸ gÃ¶rÃ¼nÃ¼m"
              >
                <FaEye />
              </button>
              <button
                onClick={() => setIsExpanded(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <FaTimes className="text-sm" />
              </button>
            </div>
          </div>

          {/* Tab Navigation */}
          <div className="flex space-x-1 mb-4 bg-slate-700/30 rounded-lg p-1">
            {[
              { id: 'overview', label: 'Genel', icon: FaChartLine },
              { id: 'traffic', label: 'Trafik', icon: FaNetworkWired },
              { id: 'performance', label: 'Performans', icon: FaServer }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-1 px-3 py-1 rounded text-xs transition-colors ${
                  activeTab === tab.id
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-400 hover:text-white'
                }`}
              >
                <tab.icon className="text-xs" />
                <span>{tab.label}</span>
              </button>
            ))}
          </div>

          {/* Tab Content */}
          {activeTab === 'overview' && (
            <div>
              {/* Status Overview */}
              <div className="grid grid-cols-2 gap-3 mb-4">
                <div className="bg-slate-700/30 rounded-lg p-3">
                  <div className="text-gray-400 text-xs mb-1">Veri Toplama</div>
                  <div className={`text-sm font-medium ${
                    persistence.dataCollection ? 'text-green-400' : 'text-red-400'
                  }`}>
                    {persistence.dataCollection ? 'Aktif' : 'Devre DÄ±ÅŸÄ±'}
                  </div>
                </div>
                <div className="bg-slate-700/30 rounded-lg p-3">
                  <div className="text-gray-400 text-xs mb-1">Real-time Status</div>
                  <div className={`text-sm font-medium ${
                    realTimeStats?.system_status === 'active' ? 'text-green-400' : 'text-yellow-400'
                  }`}>
                    {realTimeStats?.system_status === 'active' ? 'CanlÄ±' : 'Beklemede'}
                  </div>
                </div>
              </div>

              {/* Key Statistics */}
              <div className="grid grid-cols-2 gap-3 mb-4">
                <div className="bg-slate-700/30 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <FaChartLine className="text-blue-400 text-xs" />
                    <div className="text-gray-400 text-xs">Toplam Log KayÄ±tlarÄ±</div>
                  </div>
                  <div className="text-white text-lg font-bold">
                    {formatNumber(persistence.totalActivities)}
                  </div>
                  {realTimeStats?.recent_logs_5min > 0 && (
                    <div className="text-green-400 text-xs">
                      +{realTimeStats.recent_logs_5min} son 5dk
                    </div>
                  )}
                </div>
                <div className="bg-slate-700/30 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <FaClock className="text-green-400 text-xs" />
                    <div className="text-gray-400 text-xs">Sistem Uptime</div>
                  </div>
                  <div className="text-white text-lg font-bold">
                    {formatUptime(persistence.systemUptime)}
                  </div>
                  <div className="text-gray-500 text-xs">
                    sÃ¼rekli Ã§alÄ±ÅŸma
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'traffic' && trafficSummary && (
            <div>
              {/* Traffic Statistics */}
              <div className="grid grid-cols-2 gap-3 mb-4">
                <div className="bg-slate-700/30 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <FaNetworkWired className="text-blue-400 text-xs" />
                    <div className="text-gray-400 text-xs">Toplam BaÄŸlantÄ±</div>
                  </div>
                  <div className="text-white text-lg font-bold">
                    {formatNumber(trafficSummary.summary?.total_flows || 0)}
                  </div>
                </div>
                <div className="bg-slate-700/30 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <FaBolt className="text-yellow-400 text-xs" />
                    <div className="text-gray-400 text-xs">Aktif BaÄŸlantÄ±</div>
                  </div>
                  <div className="text-white text-lg font-bold">
                    {formatNumber(realTimeStats?.active_connections || 0)}
                  </div>
                </div>
              </div>

              {/* Traffic Breakdown */}
              <div className="mb-4">
                <div className="text-gray-400 text-xs mb-2">Trafik DaÄŸÄ±lÄ±mÄ±</div>
                <div className="grid grid-cols-2 gap-2">
                  <div className="bg-green-500/10 border border-green-500/20 rounded p-2">
                    <div className="text-green-400 text-xs">Ä°Ã§ AÄŸ TrafiÄŸi</div>
                    <div className="text-white font-medium">
                      {formatNumber(trafficSummary.summary?.internal_flows || 0)}
                    </div>
                  </div>
                  <div className="bg-blue-500/10 border border-blue-500/20 rounded p-2">
                    <div className="text-blue-400 text-xs">DÄ±ÅŸ AÄŸ TrafiÄŸi</div>
                    <div className="text-white font-medium">
                      {formatNumber(trafficSummary.summary?.external_flows || 0)}
                    </div>
                  </div>
                </div>
              </div>

              {/* Bandwidth Info */}
              <div className="mb-4">
                <div className="text-gray-400 text-xs mb-2">Veri Transfer</div>
                <div className="flex justify-between text-xs">
                  <span className="text-gray-400">Toplam Bytes:</span>
                  <span className="text-white">
                    {formatBytes(trafficSummary.summary?.total_bytes || 0)}
                  </span>
                </div>
                <div className="flex justify-between text-xs">
                  <span className="text-gray-400">Toplam Paket:</span>
                  <span className="text-white">
                    {formatNumber(trafficSummary.summary?.total_packets || 0)}
                  </span>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'performance' && (
            <div>
              {/* Performance Metrics */}
              <div className="mb-4">
                <div className="text-gray-400 text-xs mb-2">Performans Metrikleri</div>
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Log Rate:</span>
                    <span className="text-white">{formatRate(activityRate)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Toplam Paket:</span>
                    <span className="text-white">{formatNumber(realTimeStats?.total_packets || 0)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Veri Transfer:</span>
                    <span className="text-white">{formatBytes(realTimeStats?.bytes_transferred || 0)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Unique IPs:</span>
                    <span className="text-white">{realTimeStats?.unique_ips_count || 0}</span>
                  </div>
                </div>
              </div>

              {/* Performance History Chart (simplified) */}
              {showAdvanced && performanceHistory.length > 0 && (
                <div className="mb-4">
                  <div className="text-gray-400 text-xs mb-2">Aktivite GeÃ§miÅŸi (Son 20 KayÄ±t)</div>
                  <div className="bg-slate-700/20 rounded p-2 h-20 flex items-end space-x-1">
                    {performanceHistory.map((entry, index) => {
                      const height = Math.max(4, (entry.logsPerMinute / Math.max(...performanceHistory.map(e => e.logsPerMinute))) * 60);
                      return (
                        <div
                          key={index}
                          className="bg-blue-400 w-2 rounded-t"
                          style={{ height: `${height}px` }}
                          title={`${entry.logsPerMinute.toFixed(1)} logs/min at ${entry.timestamp.toLocaleTimeString()}`}
                        />
                      );
                    })}
                  </div>
                </div>
              )}

              {/* Database Performance */}
              {persistence.performanceMetrics && (
                <div className="mb-4">
                  <div className="text-gray-400 text-xs mb-2 flex items-center space-x-1">
                    <FaDatabase className="text-xs" />
                    <span>Database Durumu</span>
                  </div>
                  <div className="grid grid-cols-2 gap-2 text-xs">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Veri Boyutu:</span>
                      <span className="text-white">
                        {formatBytes(persistence.performanceMetrics.dataSize || 0)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Disk KullanÄ±mÄ±:</span>
                      <span className="text-white">
                        {persistence.performanceMetrics.diskUsage || 'N/A'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Retention:</span>
                      <span className="text-white">
                        {persistence.performanceMetrics.retentionDays || 30} gÃ¼n
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Son Backup:</span>
                      <span className="text-white">
                        {persistence.performanceMetrics.lastBackup || 'Yok'}
                      </span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Health Status */}
          <div className="mb-4">
            <div className="text-gray-400 text-xs mb-2">Sistem SaÄŸlÄ±ÄŸÄ±</div>
            <div className="flex items-center space-x-2">
              <div className={`w-3 h-3 rounded-full ${
                config.status === 'active' ? 'bg-green-400 animate-pulse' :
                config.status === 'ready' ? 'bg-blue-400' :
                config.status === 'waiting' ? 'bg-yellow-400' :
                'bg-red-400'
              }`} />
              <span className="text-white text-sm font-medium">
                {config.status === 'active' ? 'PC-to-PC Monitoring Aktif' :
                 config.status === 'ready' ? 'Sistem HazÄ±r' :
                 config.status === 'waiting' ? 'Trafik Bekleniyor' :
                 'Dikkat Gerekli'}
              </span>
            </div>
          </div>

          {/* Last Update Info */}
          {lastUpdate && (
            <div className="mb-4">
              <div className="text-gray-400 text-xs mb-1">Son GÃ¼ncelleme</div>
              <div className="flex items-center space-x-2 text-xs">
                <FaClock className="text-gray-400" />
                <span className="text-white">
                  {lastUpdate.toLocaleString('tr-TR')}
                </span>
                <span className="text-gray-400">
                  ({formatUptime((Date.now() - lastUpdate.getTime()) / 1000)} Ã¶nce)
                </span>
              </div>
            </div>
          )}

          {/* Enhanced Quick Actions */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <button
                onClick={handleRefresh}
                disabled={refreshing}
                className="bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white text-xs px-3 py-1 rounded transition-colors flex items-center space-x-1"
              >
                <FaSync className={`text-xs ${refreshing ? 'animate-spin' : ''}`} />
                <span>Yenile</span>
              </button>

              {!persistence.enabled && (
                <div className="bg-yellow-500/10 border border-yellow-500/30 rounded px-2 py-1">
                  <div className="flex items-center space-x-1">
                    <FaInfoCircle className="text-yellow-400 text-xs" />
                    <span className="text-yellow-200 text-xs">Veri toplama kapalÄ±</span>
                  </div>
                </div>
              )}

              {config.status === 'active' && (
                <div className="bg-green-500/10 border border-green-500/30 rounded px-2 py-1">
                  <div className="flex items-center space-x-1">
                    <FaShieldAlt className="text-green-400 text-xs" />
                    <span className="text-green-200 text-xs">Monitoring aktif</span>
                  </div>
                </div>
              )}
            </div>

            <div className="text-xs text-gray-500">
              Auto-refresh: {refreshInterval / 1000}s
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DataPersistenceIndicator;


================================================
File: src/components/ErrorBoundary.jsx
================================================
import React from 'react'

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props)
    this.state = { hasError: false, error: null }
  }

  static getDerivedStateFromError(error) {
    console.error('🚨 ErrorBoundary caught error:', error)
    return { hasError: true }
  }

  componentDidCatch(error, errorInfo) {
    console.error('🚨 ErrorBoundary details:', error, errorInfo)
    this.setState({ error })
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
          <div className="text-center max-w-md mx-auto p-8">
            <div className="text-red-400 text-6xl mb-4">⚠️</div>
            <h1 className="text-2xl font-bold text-white mb-2">Bir Hata Oluştu</h1>
            <p className="text-gray-400 mb-4">
              Uygulama beklenmedik bir hatayla karşılaştı.
            </p>
            <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4 mb-4 text-left">
              <h3 className="text-red-300 font-semibold mb-2">Hata:</h3>
              <pre className="text-xs text-red-200 whitespace-pre-wrap">
                {this.state.error?.toString()}
              </pre>
            </div>
            <button
              onClick={() => window.location.reload()}
              className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg mx-auto transition-colors"
            >
              <span>🔄 Sayfayı Yenile</span>
            </button>
          </div>
        </div>
      )
    }

    return this.props.children
  }
}

export default ErrorBoundary


================================================
File: src/components/Input.jsx
================================================
import React from 'react';

const Input = ({
  type = 'text',
  value,
  onChange,
  placeholder,
  label,
  error,
  disabled = false,
  className = '',
  ...props
}) => {
  const inputClasses = `
    block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400
    focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm
    ${error ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : ''}
    ${disabled ? 'bg-gray-50 text-gray-500 cursor-not-allowed' : ''}
    ${className}
  `;

  return (
    <div className="space-y-1">
      {label && (
        <label className="block text-sm font-medium text-gray-700">
          {label}
        </label>
      )}
      <input
        type={type}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        disabled={disabled}
        className={inputClasses}
        {...props}
      />
      {error && (
        <p className="text-sm text-red-600">{error}</p>
      )}
    </div>
  );
};

export default Input;


================================================
File: src/components/LoadingSpinner.jsx
================================================
import React from 'react'

console.log('ğŸ“„ [LOADING] LoadingSpinner component yÃ¼klendi')

const LoadingSpinner = ({ message = 'YÃ¼kleniyor...' }) => {
  console.log('ğŸ“„ [LOADING] LoadingSpinner render:', message)

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
      <div className="text-center">
        <div className="relative mb-6">
          <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full shadow-2xl">
            <div className="w-8 h-8 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
          </div>
          <div className="absolute inset-0 rounded-full border-4 border-blue-500/30 animate-ping"></div>
        </div>
        <div className="flex items-center justify-center space-x-3 mb-4">
          <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
          <span className="text-white text-lg font-medium">{message}</span>
          <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
        </div>
        <div className="w-48 h-1 bg-slate-700 rounded-full overflow-hidden mx-auto">
          <div className="h-full bg-gradient-to-r from-blue-500 to-blue-600 rounded-full animate-pulse"></div>
        </div>
        <div className="mt-4 text-xs text-gray-400">
          Debug: {new Date().toLocaleTimeString()}
        </div>
      </div>
    </div>
  )
}

export default LoadingSpinner


================================================
File: src/components/LogsErrorBoundary.jsx
================================================



================================================
File: src/components/Modal.jsx
================================================
import React from 'react';

const Modal = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const sizes = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl'
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose} />

        <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>

        <div className={`inline-block w-full ${sizes[size]} transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle`}>
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">{title}</h3>
              <button
                onClick={onClose}
                className="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 text-xl"
              >
                Ã—
              </button>
            </div>
            {children}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Modal;


================================================
File: src/components/ProgressBar.css
================================================
.progress-bar-container {
  width: 100%;
  background-color: #1e2329;
  border-radius: 4px;
  overflow: hidden;
}

.progress-bar-fill {
  height: 100%;
  border-radius: 4px;
  transition: width 0.3s ease;
}


================================================
File: src/components/ProgressBar.jsx
================================================
import React from 'react';
import './ProgressBar.css';

const ProgressBar = ({ value, color = '#007bff', height = '8px', className = '' }) => {
  return (
    <div className={`progress-bar-container ${className}`} style={{ height }}>
      <div
        className="progress-bar-fill"
        style={{
          width: `${value}%`,
          backgroundColor: color
        }}
      />
    </div>
  );
};

export default ProgressBar;


================================================
File: src/components/ProtectedRoute.jsx
================================================
import React from 'react'
import { Navigate, useLocation } from 'react-router-dom'
import { useAuth } from '../contexts/AuthContext'
import LoadingSpinner from './LoadingSpinner'

const ProtectedRoute = ({ children, adminRequired = false, permission = null }) => {
  const {
    isAuthenticated,
    isLoading,
    userRole,
    isAdmin,
    hasPermission,
    canAccessNAT
  } = useAuth()
  const location = useLocation()

  console.log('🔒 Enhanced ProtectedRoute check:', {
    isAuthenticated,
    isLoading,
    userRole,
    adminRequired,
    permission,
    path: location.pathname,
    isAdmin: isAdmin(),
    canAccessNAT: canAccessNAT()
  })

  // Loading state
  if (isLoading) {
    console.log('⏳ ProtectedRoute: Auth loading...')
    return <LoadingSpinner message="Yetki kontrol ediliyor..." />
  }

  // Authentication check
  if (!isAuthenticated) {
    console.log('❌ ProtectedRoute: Not authenticated, redirecting to login')
    return <Navigate to="/login" state={{ from: location }} replace />
  }

  // Admin requirement check
  if (adminRequired && !isAdmin()) {
    console.log('🚫 ProtectedRoute: Admin required but user is not admin:', {
      userRole,
      required: 'admin',
      path: location.pathname
    })

    // Redirect to dashboard with error message
    return (
      <Navigate
        to="/dashboard"
        state={{
          from: location,
          error: 'Bu sayfaya erişim için admin yetkisi gereklidir.'
        }}
        replace
      />
    )
  }

  // Specific permission check
  if (permission && !hasPermission(permission)) {
    console.log('🚫 ProtectedRoute: Required permission not found:', {
      userRole,
      requiredPermission: permission,
      path: location.pathname
    })

    return (
      <Navigate
        to="/dashboard"
        state={{
          from: location,
          error: `Bu sayfaya erişim için '${permission}' yetkisi gereklidir.`
        }}
        replace
      />
    )
  }

  // NAT-specific access control
  if (location.pathname === '/nat-settings' && !canAccessNAT()) {
    console.log('🚫 ProtectedRoute: NAT access denied:', {
      userRole,
      path: location.pathname,
      canAccessNAT: canAccessNAT()
    })

    return (
      <Navigate
        to="/dashboard"
        state={{
          from: location,
          error: 'NAT ayarlarına erişim için admin yetkisi gereklidir.'
        }}
        replace
      />
    )
  }

  // Interface Settings access control
  if (location.pathname === '/interface-settings' && !isAdmin()) {
    console.log('🚫 ProtectedRoute: Interface Settings access denied:', {
      userRole,
      path: location.pathname
    })

    return (
      <Navigate
        to="/dashboard"
        state={{
          from: location,
          error: 'Interface ayarlarına erişim için admin yetkisi gereklidir.'
        }}
        replace
      />
    )
  }

  // Security Rules access control (example)
  if (location.pathname === '/security-rules' && !hasPermission('firewall_management') && !isAdmin()) {
    console.log('🚫 ProtectedRoute: Security Rules access denied:', {
      userRole,
      path: location.pathname
    })

    return (
      <Navigate
        to="/dashboard"
        state={{
          from: location,
          error: 'Güvenlik kurallarını yönetmek için yetki gereklidir.'
        }}
        replace
      />
    )
  }

  console.log('✅ ProtectedRoute: All checks passed, showing protected content:', {
    isAuthenticated: true,
    userRole,
    path: location.pathname,
    hasRequiredAccess: true
  })

  return children
}

// HOC wrapper for easier admin route protection
export const AdminRoute = ({ children }) => {
  return (
    <ProtectedRoute adminRequired={true}>
      {children}
    </ProtectedRoute>
  )
}

// HOC wrapper for permission-based protection
export const PermissionRoute = ({ children, permission }) => {
  return (
    <ProtectedRoute permission={permission}>
      {children}
    </ProtectedRoute>
  )
}

// HOC wrapper for NAT-specific protection
export const NATRoute = ({ children }) => {
  const { canAccessNAT } = useAuth()

  return (
    <ProtectedRoute adminRequired={true}>
      {children}
    </ProtectedRoute>
  )
}

export default ProtectedRoute


================================================
File: src/components/RealTimeIndicator.jsx
================================================
import React, { useState, useEffect, useCallback } from 'react';
import {
  FaWifi,
  FaExclamationTriangle,
  FaTimes,
  FaSync,
  FaCircle,
  FaSignal,        // FaSignalAlt yerine FaSignal
  FaClock,
  FaPlug,
  FaServer,
  FaShieldAlt,
  FaBolt,
  FaEye,
  FaDatabase
} from 'react-icons/fa';
import { webSocketService } from '../services/websocketService';

const RealTimeIndicator = ({
  className = '',
  showDetails = true,
  size = 'normal',
  onStatusChange = null,
  autoConnect = true,
  showMetrics = true
}) => {
  // Enhanced connection state
  const [connectionStatus, setConnectionStatus] = useState(false);
  const [connectionQuality, setConnectionQuality] = useState('disconnected');
  const [reconnectAttempts, setReconnectAttempts] = useState(0);
  const [totalReconnects, setTotalReconnects] = useState(0);
  // Enhanced activity tracking
  const [error, setError] = useState(null);
  const [lastActivity, setLastActivity] = useState(null);
  const [metrics, setMetrics] = useState(null);
  const [isInitializing, setIsInitializing] = useState(false);
  // Message counters for different types
  const [messageCounts, setMessageCounts] = useState({
    logs: 0,
    stats: 0,
    alerts: 0,
    total: 0
  });
  // UI state
  const [isExpanded, setIsExpanded] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);
  // Activity indicators
  const [recentActivity, setRecentActivity] = useState({
    logs: 0,
    stats: 0,
    alerts: 0
  });

  // Reset recent activity counters every 30 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setRecentActivity({ logs: 0, stats: 0, alerts: 0 });
    }, 30000);
    return () => clearInterval(interval);
  }, []);

  // Enhanced connection handler
  const handleConnectionChange = useCallback((connected, quality, connectionMetrics) => {
    setConnectionStatus(connected);
    setConnectionQuality(quality);
    setMetrics(connectionMetrics);
    setIsInitializing(false);
    if (connected) {
      setError(null);
      setLastActivity(new Date());
    }
    // Notify parent component if callback provided
    if (onStatusChange) {
      onStatusChange({
        connected,
        quality,
        metrics: connectionMetrics,
        error: connected ? null : error
      });
    }
  }, [error, onStatusChange]);

  // Enhanced error handler
  const handleError = useCallback((errorMsg) => {
    setError(errorMsg);
    setLastActivity(new Date());
    setIsInitializing(false);
    if (onStatusChange) {
      onStatusChange({
        connected: false,
        quality: 'disconnected',
        error: errorMsg
      });
    }
  }, [onStatusChange]);

  // Enhanced reconnect handler
  const handleReconnect = useCallback((attempts, totalCount) => {
    setReconnectAttempts(attempts);
    setTotalReconnects(totalCount);
    setLastActivity(new Date());
    setIsInitializing(true);
  }, []);

  // Enhanced message handlers
  const handleNewLog = useCallback((logData) => {
    setMessageCounts(prev => ({
      ...prev,
      logs: prev.logs + 1,
      total: prev.total + 1
    }));
    setRecentActivity(prev => ({ ...prev, logs: prev.logs + 1 }));
    setLastActivity(new Date());
  }, []);

  const handleStatsUpdate = useCallback((statsData) => {
    setMessageCounts(prev => ({
      ...prev,
      stats: prev.stats + 1,
      total: prev.total + 1
    }));
    setRecentActivity(prev => ({ ...prev, stats: prev.stats + 1 }));
    setLastActivity(new Date());
  }, []);

  const handleSecurityAlert = useCallback((alertData) => {
    setMessageCounts(prev => ({
      ...prev,
      alerts: prev.alerts + 1,
      total: prev.total + 1
    }));
    setRecentActivity(prev => ({ ...prev, alerts: prev.alerts + 1 }));
    setLastActivity(new Date());
  }, []);

  useEffect(() => {
    // Initialize WebSocket if auto-connect is enabled
    if (autoConnect && webSocketService?.isHealthy) {
      try {
        if (!webSocketService.isHealthy()) {
          setIsInitializing(true);
          webSocketService.connect();
        }
      } catch (err) {
        console.warn('WebSocket service not ready:', err);
      }
    }

    // Set up event listeners with error handling
    let unsubscribeConnection = () => {};
    let unsubscribeError = () => {};
    let unsubscribeReconnect = () => {};
    let unsubscribeNewLog = () => {};
    let unsubscribeStatsUpdate = () => {};
    let unsubscribeSecurityAlert = () => {};

    try {
      unsubscribeConnection = webSocketService.onConnectionChange?.(handleConnectionChange) || (() => {});
      unsubscribeError = webSocketService.onError?.(handleError) || (() => {});
      unsubscribeReconnect = webSocketService.onReconnect?.(handleReconnect) || (() => {});
      unsubscribeNewLog = webSocketService.onNewLog?.(handleNewLog) || (() => {});
      unsubscribeStatsUpdate = webSocketService.onStatsUpdate?.(handleStatsUpdate) || (() => {});
      unsubscribeSecurityAlert = webSocketService.onSecurityAlert?.(handleSecurityAlert) || (() => {});

      // Get initial status
      const status = webSocketService.getStatus?.() || {};
      setConnectionStatus(status.isConnected || false);
      setConnectionQuality(status.connectionQuality || 'disconnected');
      setReconnectAttempts(status.reconnectAttempts || 0);

      // Get initial metrics
      const initialMetrics = webSocketService.getConnectionMetrics?.() || null;
      setMetrics(initialMetrics);
    } catch (err) {
      console.warn('Error setting up WebSocket listeners:', err);
    }

    // Cleanup function
    return () => {
      try {
        unsubscribeConnection();
        unsubscribeError();
        unsubscribeReconnect();
        unsubscribeNewLog();
        unsubscribeStatsUpdate();
        unsubscribeSecurityAlert();
      } catch (err) {
        console.warn('Error cleaning up WebSocket listeners:', err);
      }
    };
  }, [autoConnect, handleConnectionChange, handleError, handleReconnect,
      handleNewLog, handleStatsUpdate, handleSecurityAlert]);

  // Enhanced status configuration
  const getStatusConfig = () => {
    if (isInitializing) {
      return {
        icon: FaSync,
        color: 'text-blue-400',
        bgColor: 'bg-blue-500/10',
        borderColor: 'border-blue-500/30',
        pulseColor: 'bg-blue-400',
        text: 'BaÅŸlatÄ±lÄ±yor',
        description: 'BaÄŸlantÄ± kuruluyor...',
        status: 'initializing'
      };
    }
    if (connectionStatus && connectionQuality === 'good') {
      return {
        icon: FaWifi,
        color: 'text-green-400',
        bgColor: 'bg-green-500/10',
        borderColor: 'border-green-500/30',
        pulseColor: 'bg-green-400',
        text: 'CanlÄ± BaÄŸlantÄ±',
        description: 'PC-to-PC traffic monitoring aktif',
        status: 'healthy'
      };
    } else if (connectionStatus && connectionQuality === 'poor') {
      return {
        icon: FaExclamationTriangle,
        color: 'text-yellow-400',
        bgColor: 'bg-yellow-500/10',
        borderColor: 'border-yellow-500/30',
        pulseColor: 'bg-yellow-400',
        text: 'ZayÄ±f BaÄŸlantÄ±',
        description: 'Log gÃ¼ncellemeleri gecikebilir',
        status: 'warning'
      };
    } else if (reconnectAttempts > 0) {
      return {
        icon: FaSync,
        color: 'text-blue-400',
        bgColor: 'bg-blue-500/10',
        borderColor: 'border-blue-500/30',
        pulseColor: 'bg-blue-400',
        text: 'Yeniden BaÄŸlanÄ±yor',
        description: `Deneme ${reconnectAttempts}/10`,
        status: 'connecting'
      };
    } else {
      return {
        icon: FaTimes,
        color: 'text-red-400',
        bgColor: 'bg-red-500/10',
        borderColor: 'border-red-500/30',
        pulseColor: 'bg-red-400',
        text: 'BaÄŸlantÄ± Yok',
        description: 'Real-time log izleme devre dÄ±ÅŸÄ±',
        status: 'disconnected'
      };
    }
  };

  const config = getStatusConfig();
  const Icon = config.icon;

  // Size variants
  const sizeClasses = {
    small: {
      container: 'px-2 py-1 text-xs',
      icon: 'text-xs',
      text: 'text-xs'
    },
    normal: {
      container: 'px-3 py-1.5 text-sm',
      icon: 'text-sm',
      text: 'text-xs'
    },
    large: {
      container: 'px-4 py-2 text-base',
      icon: 'text-base',
      text: 'text-sm'
    }
  };

  const currentSize = sizeClasses[size] || sizeClasses.normal;

  // Enhanced utility functions
  const formatUptime = (uptimeMs) => {
    if (!uptimeMs || uptimeMs < 0) return '0s';
    const seconds = Math.floor(uptimeMs / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    if (days > 0) return `${days}g ${hours % 24}s`;
    if (hours > 0) return `${hours}s ${minutes % 60}dk`;
    if (minutes > 0) return `${minutes}dk ${seconds % 60}s`;
    return `${seconds}s`;
  };

  const formatCount = (count) => {
    if (count >= 1000000) return `${(count / 1000000).toFixed(1)}M`;
    if (count >= 1000) return `${(count / 1000).toFixed(1)}K`;
    return count.toString();
  };

  // Enhanced action handlers
  const handleManualReconnect = () => {
    setError(null);
    setIsInitializing(true);
    try {
      webSocketService.disconnect?.();
      setTimeout(() => webSocketService.connect?.(), 1000);
    } catch (err) {
      console.warn('Error during manual reconnect:', err);
      setIsInitializing(false);
    }
  };

  const handleResetCounters = () => {
    setMessageCounts({ logs: 0, stats: 0, alerts: 0, total: 0 });
    setRecentActivity({ logs: 0, stats: 0, alerts: 0 });
  };

  const handleRequestData = () => {
    try {
      webSocketService.requestData?.(['logs', 'stats', 'alerts']);
    } catch (err) {
      console.warn('Error requesting data:', err);
    }
  };

  // Compact version for small size
  if (size === 'small') {
    return (
      <div
        className={`inline-flex items-center space-x-1 rounded-full border ${config.bgColor} ${config.borderColor} ${currentSize.container} ${className}`}
        title={`${config.text}: ${config.description}`}
      >
        <div className="relative">
          <Icon className={`${config.color} ${currentSize.icon} ${
            isInitializing || reconnectAttempts > 0 ? 'animate-spin' :
            connectionStatus ? 'animate-pulse' : ''
          }`} />
          {connectionStatus && (
            <div className={`absolute -top-1 -right-1 w-2 h-2 ${config.pulseColor} rounded-full animate-pulse`} />
          )}
        </div>
        <span className={`font-medium ${config.color} ${currentSize.text}`}>
          {config.status === 'connecting' ? reconnectAttempts :
           messageCounts.total > 0 ? formatCount(messageCounts.total) : ''}
        </span>
      </div>
    );
  }

  // Normal and large versions with enhanced features
  return (
    <div className={`relative ${className}`}>
      <div
        className={`flex items-center space-x-2 rounded-full border cursor-pointer transition-all duration-200 hover:shadow-lg ${config.bgColor} ${config.borderColor} ${currentSize.container} ${
          isExpanded ? 'rounded-lg shadow-lg' : ''
        }`}
        onClick={() => showDetails && setIsExpanded(!isExpanded)}
      >
        {/* Enhanced Status Icon with Multiple Indicators */}
        <div className="relative flex items-center">
          <Icon className={`${config.color} ${currentSize.icon} ${
            isInitializing || reconnectAttempts > 0 ? 'animate-spin' :
            connectionStatus ? 'animate-pulse' : ''
          }`} />
          {/* Connection quality indicator */}
          {connectionStatus && (
            <div className={`absolute -top-1 -right-1 w-2 h-2 ${config.pulseColor} rounded-full ${
              connectionQuality === 'good' ? 'animate-pulse' :
              connectionQuality === 'poor' ? 'animate-bounce' : ''
            }`} />
          )}
          {/* Activity indicator for recent messages */}
          {(recentActivity.logs > 0 || recentActivity.stats > 0 || recentActivity.alerts > 0) && (
            <div className="absolute -bottom-1 -left-1 w-2 h-2 bg-blue-400 rounded-full animate-ping" />
          )}
        </div>

        {/* Enhanced Status Text */}
        <div className={currentSize.text}>
          <span className={`font-medium ${config.color}`}>
            {config.text}
          </span>
          {showDetails && (
            <div className="text-gray-400">
              {config.description}
            </div>
          )}
        </div>

        {/* Enhanced Message Count Badges */}
        {messageCounts.total > 0 && connectionStatus && (
          <div className="flex items-center space-x-1">
            {messageCounts.logs > 0 && (
              <div className="bg-green-500 text-white text-xs font-bold px-1.5 py-0.5 rounded-full" title="Log mesajlarÄ±">
                {formatCount(messageCounts.logs)}
              </div>
            )}
            {messageCounts.alerts > 0 && (
              <div className="bg-red-500 text-white text-xs font-bold px-1.5 py-0.5 rounded-full" title="GÃ¼venlik uyarÄ±larÄ±">
                {formatCount(messageCounts.alerts)}
              </div>
            )}
            {messageCounts.stats > 0 && (
              <div className="bg-blue-500 text-white text-xs font-bold px-1.5 py-0.5 rounded-full" title="Ä°statistik gÃ¼ncellemeleri">
                {formatCount(messageCounts.stats)}
              </div>
            )}
          </div>
        )}

        {/* Error Indicator */}
        {error && (
          <div className="text-red-400" title={error}>
            <FaExclamationTriangle className="text-xs animate-bounce" />
          </div>
        )}

        {/* Expand Indicator */}
        {showDetails && (
          <div className={`transition-transform duration-200 ${config.color} ${
            isExpanded ? 'rotate-180' : ''
          }`}>
            â–¼
          </div>
        )}
      </div>

      {/* Enhanced Expanded Details Panel */}
      {isExpanded && showDetails && (
        <div className="absolute top-full left-0 right-0 mt-2 bg-slate-800/95 backdrop-blur-xl border border-slate-700/50 rounded-lg p-4 shadow-xl z-50 min-w-[350px]">
          {/* Enhanced Header */}
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <FaServer className="text-blue-400" />
              <h4 className="text-white font-medium">Real-time Log Monitoring</h4>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowAdvanced(!showAdvanced)}
                className="text-gray-400 hover:text-white transition-colors text-xs"
                title="GeliÅŸmiÅŸ gÃ¶rÃ¼nÃ¼m"
              >
                <FaEye />
              </button>
              <button
                onClick={() => setIsExpanded(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <FaTimes className="text-sm" />
              </button>
            </div>
          </div>

          {/* Enhanced Connection Status Grid */}
          <div className="grid grid-cols-2 gap-3 mb-4">
            <div className="bg-slate-700/30 rounded-lg p-2">
              <div className="text-gray-400 text-xs flex items-center space-x-1">
                <FaWifi className="text-xs" />
                <span>BaÄŸlantÄ± Durumu</span>
              </div>
              <div className={`text-sm font-medium ${config.color}`}>
                {config.text}
              </div>
            </div>
            <div className="bg-slate-700/30 rounded-lg p-2">
              <div className="text-gray-400 text-xs flex items-center space-x-1">
                <FaSignal className="text-xs" />
                <span>BaÄŸlantÄ± Kalitesi</span>
              </div>
              <div className="text-white text-sm font-medium">
                {connectionQuality === 'good' ? 'ğŸŸ¢ MÃ¼kemmel' :
                 connectionQuality === 'poor' ? 'ğŸŸ¡ ZayÄ±f' :
                 'ğŸ”´ BaÄŸlantÄ±sÄ±z'}
              </div>
            </div>
            <div className="bg-slate-700/30 rounded-lg p-2">
              <div className="text-gray-400 text-xs flex items-center space-x-1">
                <FaBolt className="text-xs" />
                <span>Toplam Mesaj</span>
              </div>
              <div className="text-white text-sm font-medium">
                {messageCounts.total.toLocaleString()}
              </div>
            </div>
            <div className="bg-slate-700/30 rounded-lg p-2">
              <div className="text-gray-400 text-xs flex items-center space-x-1">
                <FaSync className="text-xs" />
                <span>Yeniden BaÄŸlanma</span>
              </div>
              <div className="text-white text-sm font-medium">
                {totalReconnects} kez
              </div>
            </div>
          </div>

          {/* Enhanced Message Type Breakdown */}
          <div className="mb-4">
            <div className="text-gray-400 text-xs mb-2 flex items-center space-x-1">
              <FaDatabase className="text-xs" />
              <span>Mesaj TÃ¼rleri</span>
            </div>
            <div className="grid grid-cols-3 gap-2">
              <div className="bg-green-500/10 border border-green-500/20 rounded p-2">
                <div className="text-green-400 text-xs">Log KayÄ±tlarÄ±</div>
                <div className="text-white font-medium">{messageCounts.logs.toLocaleString()}</div>
                {recentActivity.logs > 0 && (
                  <div className="text-green-300 text-xs">+{recentActivity.logs} son 30s</div>
                )}
              </div>
              <div className="bg-blue-500/10 border border-blue-500/20 rounded p-2">
                <div className="text-blue-400 text-xs">Ä°statistikler</div>
                <div className="text-white font-medium">{messageCounts.stats.toLocaleString()}</div>
                {recentActivity.stats > 0 && (
                  <div className="text-blue-300 text-xs">+{recentActivity.stats} son 30s</div>
                )}
              </div>
              <div className="bg-red-500/10 border border-red-500/20 rounded p-2">
                <div className="text-red-400 text-xs">GÃ¼venlik UyarÄ±larÄ±</div>
                <div className="text-white font-medium">{messageCounts.alerts.toLocaleString()}</div>
                {recentActivity.alerts > 0 && (
                  <div className="text-red-300 text-xs">+{recentActivity.alerts} son 30s</div>
                )}
              </div>
            </div>
          </div>

          {/* Enhanced Metrics - Show only if enabled */}
          {showMetrics && metrics && (
            <div className="mb-4">
              <div className="text-gray-400 text-xs mb-2">Performans Metrikleri</div>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div className="flex justify-between">
                  <span className="text-gray-400">Ã‡alÄ±ÅŸma SÃ¼resi:</span>
                  <span className="text-white">{formatUptime(metrics.uptime)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">GÃ¶nderilen:</span>
                  <span className="text-white">{metrics.messagesSent || 0}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">AlÄ±nan:</span>
                  <span className="text-white">{metrics.messagesReceived || 0}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Kuyruk:</span>
                  <span className="text-white">{webSocketService.getStatus?.()?.queuedMessages || 0}</span>
                </div>
                {showAdvanced && (
                  <>
                    <div className="flex justify-between col-span-2">
                      <span className="text-gray-400">WebSocket Durumu:</span>
                      <span className="text-white">{webSocketService.getReadyState?.() || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between col-span-2">
                      <span className="text-gray-400">Endpoint:</span>
                      <span className="text-white text-xs truncate">{webSocketService.getStatus?.()?.endpoint || 'N/A'}</span>
                    </div>
                  </>
                )}
              </div>
            </div>
          )}

          {/* Last Activity */}
          {lastActivity && (
            <div className="mb-4">
              <div className="text-gray-400 text-xs mb-1">Son Aktivite</div>
              <div className="flex items-center space-x-2 text-xs">
                <FaClock className="text-gray-400" />
                <span className="text-white">{lastActivity.toLocaleString('tr-TR')}</span>
                <span className="text-gray-400">({formatUptime(Date.now() - lastActivity.getTime())} Ã¶nce)</span>
              </div>
            </div>
          )}

          {/* Enhanced Error Display */}
          {error && (
            <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-3 mb-4">
              <div className="flex items-center space-x-2">
                <FaExclamationTriangle className="text-red-400 text-sm" />
                <span className="text-red-200 text-sm font-medium">BaÄŸlantÄ± HatasÄ±</span>
              </div>
              <div className="text-red-200/80 text-xs mt-1">{error}</div>
            </div>
          )}

          {/* Enhanced Quick Actions */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <button
                onClick={handleManualReconnect}
                disabled={isInitializing}
                className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 disabled:cursor-not-allowed text-white text-xs px-3 py-1 rounded transition-colors flex items-center space-x-1"
              >
                <FaSync className={isInitializing ? 'animate-spin' : ''} />
                <span>{isInitializing ? 'BaÄŸlanÄ±yor...' : 'Yeniden BaÄŸlan'}</span>
              </button>
              <button
                onClick={handleResetCounters}
                className="bg-gray-600 hover:bg-gray-700 text-white text-xs px-3 py-1 rounded transition-colors"
              >
                SayaÃ§larÄ± SÄ±fÄ±rla
              </button>
              {connectionStatus && (
                <button
                  onClick={handleRequestData}
                  className="bg-green-600 hover:bg-green-700 text-white text-xs px-3 py-1 rounded transition-colors"
                  title="Sunucudan veri talep et"
                >
                  Veri Talep Et
                </button>
              )}
            </div>
            <div className="text-xs text-gray-500">
              Log Monitor v2.0
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RealTimeIndicator;


================================================
File: src/components/RecentActivity.jsx
================================================
import React, { useState, useEffect } from 'react';
import { FaClock, FaShieldAlt, FaExclamationTriangle, FaCheckCircle, FaBan } from 'react-icons/fa';

const RecentActivity = () => {
  const [activities, setActivities] = useState([]);

  const activityTypes = {
    blocked: { icon: FaBan, color: 'text-red-400', bg: 'bg-red-500/10' },
    allowed: { icon: FaCheckCircle, color: 'text-green-400', bg: 'bg-green-500/10' },
    warning: { icon: FaExclamationTriangle, color: 'text-yellow-400', bg: 'bg-yellow-500/10' },
    info: { icon: FaShieldAlt, color: 'text-blue-400', bg: 'bg-blue-500/10' }
  };

  const generateActivity = () => {
    const domains = [
      'malware.com', 'github.com', 'suspicious-site.net', 'vercel.com',
      'api.example.com', 'safe-site.org', 'threat.xyz', 'legitimate-api.com'
    ];

    const ips = [
      '192.168.1.10', '10.0.0.15', '172.16.0.8', '192.168.1.25',
      '10.0.0.32', '172.16.0.45', '192.168.1.100', '10.0.0.200'
    ];

    const activityTemplates = [
      { type: 'blocked', message: 'Engellendi', detail: 'Kötü amaçlı site' },
      { type: 'allowed', message: 'İzin Verildi', detail: 'Güvenli bağlantı' },
      { type: 'blocked', message: 'Engellendi', detail: 'Şüpheli aktivite' },
      { type: 'warning', message: 'Uyarı', detail: 'Yüksek bant genişliği' },
      { type: 'info', message: 'Bilgi', detail: 'Kural güncellendi' }
    ];

    const template = activityTemplates[Math.floor(Math.random() * activityTemplates.length)];
    const domain = domains[Math.floor(Math.random() * domains.length)];
    const ip = ips[Math.floor(Math.random() * ips.length)];

    return {
      id: Date.now() + Math.random(),
      type: template.type,
      message: template.message,
      detail: template.detail,
      domain: domain,
      ip: ip,
      timestamp: new Date(),
      port: Math.floor(Math.random() * 65535) + 1
    };
  };

  useEffect(() => {
    // Initial activities
    const initialActivities = Array.from({length: 8}, () => generateActivity());
    setActivities(initialActivities);

    // Add new activity every 5 seconds
    const interval = setInterval(() => {
      setActivities(prev => {
        const newActivity = generateActivity();
        return [newActivity, ...prev.slice(0, 7)]; // Keep only 8 most recent
      });
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const formatTime = (timestamp) => {
    const now = new Date();
    const diff = Math.floor((now - timestamp) / 1000);

    if (diff < 60) return `${diff} sn önce`;
    if (diff < 3600) return `${Math.floor(diff / 60)} dk önce`;
    if (diff < 86400) return `${Math.floor(diff / 3600)} sa önce`;
    return `${Math.floor(diff / 86400)} gün önce`;
  };

  return (
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
      <div className="flex items-center space-x-3 mb-6">
        <FaClock className="text-blue-400 text-xl" />
        <h3 className="text-white font-semibold text-lg">Son Etkinlik</h3>
      </div>

      <p className="text-gray-400 text-sm mb-4">Son ağ olayları</p>

      <div className="space-y-3 max-h-96 overflow-y-auto">
        {activities.map((activity) => {
          const ActivityIcon = activityTypes[activity.type].icon;

          return (
            <div
              key={activity.id}
              className="flex items-start space-x-3 p-3 bg-slate-900/30 rounded-lg hover:bg-slate-900/50 transition-colors"
            >
              <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${activityTypes[activity.type].bg}`}>
                <ActivityIcon className={`text-sm ${activityTypes[activity.type].color}`} />
              </div>

              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between">
                  <p className="text-white font-medium text-sm">{activity.domain}</p>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                    activity.type === 'blocked' ? 'bg-red-500/20 text-red-300' :
                    activity.type === 'allowed' ? 'bg-green-500/20 text-green-300' :
                    activity.type === 'warning' ? 'bg-yellow-500/20 text-yellow-300' :
                    'bg-blue-500/20 text-blue-300'
                  }`}>
                    {activity.message}
                  </span>
                </div>

                <p className="text-gray-400 text-xs mt-1">{activity.detail}</p>

                <div className="flex items-center justify-between mt-2">
                  <span className="text-gray-500 text-xs">
                    {activity.ip}:{activity.port}
                  </span>
                  <span className="text-gray-500 text-xs">
                    {formatTime(activity.timestamp)}
                  </span>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default RecentActivity;


================================================
File: src/components/Select.jsx
================================================
import React from 'react';

const Select = ({
  value,
  onChange,
  options = [],
  placeholder,
  label,
  error,
  disabled = false,
  className = '',
  ...props
}) => {
  const selectClasses = `
    block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm
    focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm
    ${error ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : ''}
    ${disabled ? 'bg-gray-50 text-gray-500 cursor-not-allowed' : ''}
    ${className}
  `;

  return (
    <div className="space-y-1">
      {label && (
        <label className="block text-sm font-medium text-gray-700">
          {label}
        </label>
      )}
      <select
        value={value}
        onChange={onChange}
        disabled={disabled}
        className={selectClasses}
        {...props}
      >
        {placeholder && (
          <option value="" disabled>
            {placeholder}
          </option>
        )}
        {options.map((option, index) => (
          <option key={index} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
      {error && (
        <p className="text-sm text-red-600">{error}</p>
      )}
    </div>
  );
};

export default Select;


================================================
File: src/components/Sidebar.jsx
================================================
import React, { useState } from 'react';
import { FaShieldAlt, FaHome, FaChartBar, FaShield, FaCogs, FaNetworkWired, FaRoute, FaServer, FaDns, FaWrench, FaFileAlt, FaSync, FaSignOutAlt, FaChevronLeft, FaChevronRight } from 'react-icons/fa';
import { useAuth } from '../contexts/AuthContext';
import { toast } from 'react-hot-toast';

const Sidebar = ({ activeMenu, setActiveMenu }) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const { logout } = useAuth();

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'GÃ¼venlik KurallarÄ±', icon: FaShield },
    { id: 'rule-groups', label: 'Kural GruplarÄ±', icon: FaCogs },
    { id: 'interface-settings', label: 'Ä°nterface AyarlarÄ±', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT AyarlarÄ±', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS YÃ¶netimi', icon: FaDns },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'GÃ¼ncellemeler', icon: FaSync }
  ];

  const handleLogout = async () => {
    try {
      await logout();
      toast.success('BaÅŸarÄ±yla Ã§Ä±kÄ±ÅŸ yapÄ±ldÄ±');
    } catch (error) {
      toast.error('Ã‡Ä±kÄ±ÅŸ yapÄ±lÄ±rken hata oluÅŸtu');
    }
  };

  return (
    <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
      {/* Header */}
      <div className="p-4 border-b border-slate-700/50">
        <div className="flex items-center justify-between">
          {!isCollapsed && (
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                <FaShieldAlt className="text-white text-sm" />
              </div>
              <span className="text-white font-bold text-lg">NetGate</span>
            </div>
          )}
          <button
            onClick={() => setIsCollapsed(!isCollapsed)}
            className="text-gray-400 hover:text-white transition-colors p-1"
          >
            {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
          </button>
        </div>
      </div>

      {/* Navigation Menu */}
      <nav className="flex-1 overflow-y-auto py-4">
        <ul className="space-y-1 px-2">
          {menuItems.map((item) => {
            const Icon = item.icon;
            const isActive = activeMenu === item.id;

            return (
              <li key={item.id}>
                <button
                  onClick={() => setActiveMenu(item.id)}
                  className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                    isActive
                      ? 'bg-blue-600 text-white shadow-lg'
                      : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                  }`}
                  title={isCollapsed ? item.label : ''}
                >
                  <Icon className={`text-lg ${isActive ? 'text-white' : ''}`} />
                  {!isCollapsed && (
                    <span className="font-medium">{item.label}</span>
                  )}
                </button>
              </li>
            );
          })}
        </ul>
      </nav>

      {/* Logout Button */}
      <div className="p-4 border-t border-slate-700/50">
        <button
          onClick={handleLogout}
          className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
          title={isCollapsed ? 'Ã‡Ä±kÄ±ÅŸ Yap' : ''}
        >
          <FaSignOutAlt className="text-lg" />
          {!isCollapsed && <span className="font-medium">Ã‡Ä±kÄ±ÅŸ Yap</span>}
        </button>
      </div>
    </div>
  );
};

export default Sidebar;


================================================
File: src/components/StatCard.jsx
================================================
import React from 'react';

const StatCard = ({ title, value, subtitle, icon, color = 'blue', trend, size = 'normal' }) => {
  const getColorClasses = (color) => {
    const colors = {
      green: 'text-green-400 bg-green-500/10 border-green-500/20',
      blue: 'text-blue-400 bg-blue-500/10 border-blue-500/20',
      yellow: 'text-yellow-400 bg-yellow-500/10 border-yellow-500/20',
      red: 'text-red-400 bg-red-500/10 border-red-500/20',
      purple: 'text-purple-400 bg-purple-500/10 border-purple-500/20',
      gray: 'text-gray-400 bg-gray-500/10 border-gray-500/20'
    };
    return colors[color] || colors.blue;
  };

  const getSizeClasses = (size) => {
    return size === 'large' ? 'p-6' : 'p-4';
  };

  return (
    <div className={`bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 ${getSizeClasses(size)} hover:bg-slate-800/70 transition-all duration-200`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
          <p className={`font-bold ${size === 'large' ? 'text-3xl' : 'text-2xl'} text-white mb-1`}>
            {value}
          </p>
          {subtitle && (
            <p className="text-gray-500 text-xs">{subtitle}</p>
          )}
          {trend && (
            <div className="flex items-center mt-2">
              <span className={`text-xs font-medium ${trend.positive ? 'text-green-400' : 'text-red-400'}`}>
                {trend.positive ? '+' : ''}{trend.value}
              </span>
              <span className="text-gray-500 text-xs ml-1">{trend.period}</span>
            </div>
          )}
        </div>
        {icon && (
          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getColorClasses(color)}`}>
            {icon}
          </div>
        )}
      </div>
    </div>
  );
};

export default StatCard;


================================================
File: src/components/Switch.jsx
================================================
import React from 'react';

const Switch = ({
  checked,
  onChange,
  label,
  disabled = false,
  className = ''
}) => {
  return (
    <div className={`flex items-center ${className}`}>
      <button
        type="button"
        role="switch"
        aria-checked={checked}
        disabled={disabled}
        onClick={() => !disabled && onChange(!checked)}
        className={`
          relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent
          transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
          ${checked ? 'bg-blue-600' : 'bg-gray-600'}
          ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
        `}
      >
        <span
          className={`
            pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0
            transition duration-200 ease-in-out
            ${checked ? 'translate-x-5' : 'translate-x-0'}
          `}
        />
      </button>
      {label && (
        <span className={`ml-3 text-sm font-medium ${disabled ? 'text-gray-500' : 'text-gray-300'}`}>
          {label}
        </span>
      )}
    </div>
  );
};

export default Switch;


================================================
File: src/components/SystemStatusCard.jsx
================================================
import React from 'react';
import {
  FaCheckCircle,
  FaExclamationTriangle,
  FaTimesCircle,
  FaClock,
  FaShieldAlt,
  FaLock,
  FaServer
} from 'react-icons/fa';

const SystemStatusCard = ({
  title,
  icon: Icon,
  status,
  description,
  color = 'green',
  lastUpdated,
  details = [],
  className = ''
}) => {
  const getStatusIcon = () => {
    switch (color) {
      case 'green':
        return <FaCheckCircle className="text-green-400" />;
      case 'yellow':
        return <FaExclamationTriangle className="text-yellow-400" />;
      case 'red':
        return <FaTimesCircle className="text-red-400" />;
      default:
        return <FaCheckCircle className="text-gray-400" />;
    }
  };

  const getStatusColor = () => {
    switch (color) {
      case 'green':
        return 'text-green-400';
      case 'yellow':
        return 'text-yellow-400';
      case 'red':
        return 'text-red-400';
      default:
        return 'text-gray-400';
    }
  };

  const getBorderColor = () => {
    switch (color) {
      case 'green':
        return 'border-green-500/20';
      case 'yellow':
        return 'border-yellow-500/20';
      case 'red':
        return 'border-red-500/20';
      default:
        return 'border-gray-500/20';
    }
  };

  return (
    <div className={`bg-slate-800/50 backdrop-blur-xl rounded-xl border ${getBorderColor()} p-6 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className={`bg-${color}-500/20 p-2 rounded-lg`}>
            <Icon className={`text-${color}-400 text-xl`} />
          </div>
          <h3 className="text-white font-semibold text-lg">{title}</h3>
        </div>
        <div className="flex items-center space-x-2">
          {getStatusIcon()}
          <span className={`font-medium ${getStatusColor()}`}>{status}</span>
        </div>
      </div>

      {/* Description */}
      {description && (
        <p className="text-gray-400 text-sm mb-4">{description}</p>
      )}

      {/* Details */}
      {details.length > 0 && (
        <div className="space-y-3 mb-4">
          {details.map((detail, index) => (
            <div key={index} className="flex justify-between items-center">
              <span className="text-gray-400 text-sm">{detail.label}:</span>
              <span className={`text-sm font-medium ${detail.color ? `text-${detail.color}-400` : 'text-white'}`}>
                {detail.value}
              </span>
            </div>
          ))}
        </div>
      )}

      {/* Last Updated */}
      {lastUpdated && (
        <div className="flex items-center space-x-2 text-gray-500 text-xs pt-4 border-t border-slate-700/50">
          <FaClock />
          <span>Son gÃ¼ncelleme: {lastUpdated}</span>
        </div>
      )}
    </div>
  );
};

// Predefined Status Cards
export const FirewallStatusCard = ({ status, lastScan, rulesCount }) => (
  <SystemStatusCard
    title="Firewall Durumu"
    icon={FaShieldAlt}
    status={status}
    color={status === 'Aktif' ? 'green' : 'red'}
    description="Sistem gÃ¼venlik duvarÄ± durumu"
    details={[
      { label: 'Aktif Kurallar', value: rulesCount || '0' },
      { label: 'Son Tarama', value: lastScan || 'Bilinmiyor' }
    ]}
    lastUpdated={new Date().toLocaleString('tr-TR')}
  />
);

export const SSLStatusCard = ({ status, expiryDate, issuer }) => (
  <SystemStatusCard
    title="SSL SertifikasÄ±"
    icon={FaLock}
    status={status}
    color={status === 'GÃ¼ncel' ? 'green' : status === 'YakÄ±nda Sona Erecek' ? 'yellow' : 'red'}
    description="SSL sertifikasÄ± durumu ve geÃ§erlilik"
    details={[
      { label: 'Sona Erme', value: expiryDate || 'Bilinmiyor' },
      { label: 'Verici', value: issuer || 'Self-Signed' }
    ]}
    lastUpdated={new Date().toLocaleString('tr-TR')}
  />
);

export const SystemHealthCard = ({ status, uptime, loadAverage }) => (
  <SystemStatusCard
    title="Sistem SaÄŸlÄ±ÄŸÄ±"
    icon={FaServer}
    status={status}
    color={status === 'SaÄŸlÄ±klÄ±' ? 'green' : status === 'UyarÄ±' ? 'yellow' : 'red'}
    description="Genel sistem durumu ve performans"
    details={[
      { label: 'Ã‡alÄ±ÅŸma SÃ¼resi', value: uptime || 'Bilinmiyor' },
      { label: 'YÃ¼k OrtalamasÄ±', value: loadAverage || '0.0' }
    ]}
    lastUpdated={new Date().toLocaleString('tr-TR')}
  />
);

export default SystemStatusCard;


================================================
File: src/components/Table.jsx
================================================
import React from 'react';

const Table = ({ columns, data, className = '' }) => {
  return (
    <div className={`overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg ${className}`}>
      <table className="min-w-full divide-y divide-gray-300">
        <thead className="bg-gray-50">
          <tr>
            {columns.map((column, index) => (
              <th
                key={index}
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                {column.header}
              </th>
            ))}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((row, rowIndex) => (
            <tr key={rowIndex} className="hover:bg-gray-50">
              {columns.map((column, colIndex) => (
                <td key={colIndex} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {column.accessor ? row[column.accessor] : column.cell ? column.cell(row) : ''}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


================================================
File: src/components/index.js
================================================
// Component exports
export { default as AnalyticsChart } from './AnalyticsChart';
export { default as Badge } from './Badge';
export { default as Button } from './Button';
export { default as Card } from './Card';
export { default as DataPersistenceIndicator } from './DataPersistenceIndicator';
export { default as ErrorBoundary } from './ErrorBoundary';
export { default as Input } from './Input';
export { default as LoadingSpinner } from './LoadingSpinner';
export { default as Modal } from './Modal';
export { default as ProgressBar } from './ProgressBar';
export { default as ProtectedRoute } from './ProtectedRoute';
export { default as RecentActivity } from './RecentActivity';
export { default as RealTimeIndicator } from './RealTimeIndicator';
export { default as Select } from './Select';
export { default as Sidebar } from './Sidebar';
export { default as StatCard } from './StatCard';
export { default as Switch } from './Switch';
export { default as SystemStatusCard, FirewallStatusCard, SSLStatusCard, SystemHealthCard } from './SystemStatusCard';
export { default as Table } from './Table';


================================================
File: src/contexts/AuthContext.jsx
================================================
import React, { createContext, useContext, useState, useEffect } from 'react';

console.log('🔐 [AUTH] Enhanced AuthContext loaded for KOBI Firewall');

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    console.error('❌ [AUTH] useAuth must be used within AuthProvider!');
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Cross-browser timeout implementation
const createTimeoutSignal = (timeoutMs) => {
  const controller = new AbortController();
  setTimeout(() => controller.abort(), timeoutMs);
  return controller.signal;
};

// Enhanced input sanitization for backend compatibility
const sanitizeInput = (input) => {
  if (typeof input !== 'string') return input;
  // Backend-safe character filtering
  const dangerous = /[<>${}[\]()\\]/g;
  return input.replace(dangerous, '').trim();
};

// Enhanced validation for backend auth requirements
const validateInput = (username, password) => {
  const errors = [];

  // Username validation - Backend uyumlu
  if (!username || username.length < 3) {
    errors.push('Kullanıcı adı en az 3 karakter olmalıdır');
  }
  if (username && username.length > 50) {
    errors.push('Kullanıcı adı en fazla 50 karakter olabilir');
  }
  if (username && !/^[a-zA-Z0-9_.-]+$/.test(username)) {
    errors.push('Kullanıcı adı sadece harf, rakam, _, -, . karakterlerini içerebilir');
  }

  // Password validation - Backend requirements
  if (!password || password.length < 8) {
    errors.push('Parola en az 8 karakter olmalıdır');
  }
  if (password && password.length > 128) {
    errors.push('Parola en fazla 128 karakter olabilir');
  }

  return errors;
};

export const AuthProvider = ({ children }) => {
  console.log('🔐 [AUTH] Enhanced AuthProvider initialized');

  const [user, setUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [loginAttempts, setLoginAttempts] = useState(0);
  const [isBlocked, setIsBlocked] = useState(false);
  const [userRole, setUserRole] = useState(null);
  const [userPermissions, setUserPermissions] = useState([]);

  console.log('🔐 [AUTH] Current enhanced state:', {
    isAuthenticated,
    isLoading,
    user: user?.username,
    userRole,
    permissions: userPermissions.length,
    loginAttempts,
    isBlocked
  });

  // Enhanced rate limiting
  const MAX_LOGIN_ATTEMPTS = 5;
  const BLOCK_DURATION = 5 * 60 * 1000; // 5 minutes

  // Enhanced backend URL configuration
  const getBackendUrl = () => {
    // Development proxy mode
    if (import.meta.env.DEV) {
      console.log('🌍 [AUTH] Using development proxy mode');
      return ''; // Use proxy
    }

    // Production URL configuration
    const envUrl = import.meta.env.VITE_API_URL || import.meta.env.VITE_BACKEND_URL;
    if (envUrl) {
      console.log('🌍 [AUTH] Using environment URL:', envUrl);
      return envUrl;
    }

    // Fallback
    const fallbackUrl = 'http://localhost:8000';
    console.log('🌍 [AUTH] Using fallback URL:', fallbackUrl);
    return fallbackUrl;
  };

  // Enhanced token validation
  const isTokenValid = (token, expiry) => {
    if (!token || !expiry) return false;

    const expiryTime = parseInt(expiry);
    const now = Date.now();
    const fiveMinutes = 5 * 60 * 1000; // 5 minutes buffer

    return now < (expiryTime - fiveMinutes);
  };

  useEffect(() => {
    console.log('🔄 [AUTH] Enhanced auth check starting');

    const checkAuth = async () => {
      try {
        // Check login block status
        const blockData = localStorage.getItem('loginBlock');
        if (blockData) {
          const { timestamp, attempts } = JSON.parse(blockData);
          const now = Date.now();

          if (now - timestamp < BLOCK_DURATION && attempts >= MAX_LOGIN_ATTEMPTS) {
            setIsBlocked(true);
            setLoginAttempts(attempts);
            console.log('🚫 [AUTH] Login blocked due to too many attempts');
          } else if (now - timestamp >= BLOCK_DURATION) {
            localStorage.removeItem('loginBlock');
            setIsBlocked(false);
            setLoginAttempts(0);
            console.log('✅ [AUTH] Login block expired, cleared');
          }
        }

        // Get auth data from localStorage
        const token = localStorage.getItem('token');
        const userData = localStorage.getItem('user');
        const tokenExpiry = localStorage.getItem('tokenExpiry');
        const storedRole = localStorage.getItem('userRole');
        const storedPermissions = localStorage.getItem('userPermissions');

        console.log('📋 [AUTH] Enhanced localStorage check:', {
          hasToken: !!token,
          hasUser: !!userData,
          hasExpiry: !!tokenExpiry,
          hasRole: !!storedRole,
          hasPermissions: !!storedPermissions,
          tokenLength: token?.length
        });

        if (token && userData && tokenExpiry) {
          // Validate token expiry
          if (!isTokenValid(token, tokenExpiry)) {
            console.log('⏰ [AUTH] Token expired, clearing auth data');
            logout();
            return;
          }

          try {
            const parsedUser = JSON.parse(userData);

            // Enhanced user data validation
            if (parsedUser && parsedUser.username && typeof parsedUser.username === 'string') {
              console.log('✅ [AUTH] Valid enhanced auth data found:', {
                username: parsedUser.username,
                role: parsedUser.role || storedRole,
                isActive: parsedUser.is_active
              });

              setUser(parsedUser);
              setIsAuthenticated(true);

              // Set role and permissions
              const role = parsedUser.role || storedRole || 'viewer';
              setUserRole(role);

              // Parse permissions
              try {
                const permissions = storedPermissions ? JSON.parse(storedPermissions) : parsedUser.permissions || [];
                setUserPermissions(Array.isArray(permissions) ? permissions : []);
              } catch {
                setUserPermissions([]);
              }

              // Optional: Verify token with backend
              await verifyTokenWithBackend(token);

            } else {
              console.error('❌ [AUTH] Invalid user data structure');
              logout();
            }
          } catch (parseError) {
            console.error('❌ [AUTH] User data parse error:', parseError);
            logout();
          }
        } else {
          console.log('❌ [AUTH] Incomplete auth data found');
          setIsAuthenticated(false);
          setUser(null);
          setUserRole(null);
          setUserPermissions([]);
        }
      } catch (error) {
        console.error('❌ [AUTH] Enhanced auth check error:', error);
        logout();
      } finally {
        console.log('✅ [AUTH] Enhanced auth check completed');
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  // Token verification with backend
  const verifyTokenWithBackend = async (token) => {
    try {
      const baseUrl = getBackendUrl();
      const verifyUrl = baseUrl ? `${baseUrl}/api/v1/auth/verify` : '/api/v1/auth/verify';

      const response = await fetch(verifyUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        },
        signal: createTimeoutSignal(5000)
      });

      if (!response.ok) {
        throw new Error('Token verification failed');
      }

      const data = await response.json();
      console.log('✅ [AUTH] Token verified with backend:', data.success);

    } catch (error) {
      console.warn('⚠️ [AUTH] Token verification failed (continuing):', error.message);
      // Don't logout on verification failure - might be network issue
    }
  };

  const handleLoginBlock = (increment = true) => {
    const attempts = increment ? loginAttempts + 1 : loginAttempts;
    if (attempts >= MAX_LOGIN_ATTEMPTS) {
      const blockData = {
        timestamp: Date.now(),
        attempts: attempts
      };
      localStorage.setItem('loginBlock', JSON.stringify(blockData));
      setIsBlocked(true);
      console.log('🚫 [AUTH] Login blocked due to failed attempts');
    }
    setLoginAttempts(attempts);
  };

  const login = async (credentials) => {
    console.log('🔐 [AUTH] Enhanced login attempt:', credentials.username);

    // Check if blocked
    if (isBlocked) {
      const blockData = JSON.parse(localStorage.getItem('loginBlock') || '{}');
      const remainingTime = Math.ceil((BLOCK_DURATION - (Date.now() - blockData.timestamp)) / 60000);
      return {
        success: false,
        error: `Çok fazla başarısız giriş denemesi. ${remainingTime} dakika sonra tekrar deneyin.`
      };
    }

    try {
      setIsLoading(true);

      // Enhanced input validation
      const sanitizedUsername = sanitizeInput(credentials.username);
      const validationErrors = validateInput(sanitizedUsername, credentials.password);

      if (validationErrors.length > 0) {
        console.log('❌ [AUTH] Enhanced validation failed:', validationErrors);
        return {
          success: false,
          error: validationErrors.join(', ')
        };
      }

      const baseUrl = getBackendUrl();

      // Backend health check
      try {
        const healthUrl = baseUrl ? `${baseUrl}/health` : '/health';
        console.log('🏥 [AUTH] Enhanced health check:', healthUrl);

        const healthResponse = await fetch(healthUrl, {
          method: 'GET',
          signal: createTimeoutSignal(10000),
          headers: {
            'Accept': 'application/json',
            'X-Client-Type': 'kobi-firewall-frontend'
          },
          mode: 'cors',
          credentials: 'include'
        });

        if (healthResponse.ok) {
          const healthData = await healthResponse.json();
          console.log('✅ [AUTH] Enhanced backend health:', {
            status: healthData.status,
            version: healthData.version,
            features: healthData.features?.length || 0
          });
        }
      } catch (healthError) {
        console.warn('⚠️ [AUTH] Health check failed, continuing:', healthError.message);
      }

      // Enhanced authentication endpoints
      const endpoints = [
        '/api/v1/auth/login',  // Enhanced auth endpoint (primary)
        '/api/auth/login'      // Legacy fallback
      ];

      let lastError = null;
      let response = null;
      let data = null;

      for (const endpoint of endpoints) {
        try {
          const fullUrl = baseUrl ? `${baseUrl}${endpoint}` : endpoint;
          console.log('🌐 [AUTH] Trying enhanced endpoint:', endpoint);

          // Enhanced login request
          response = await fetch(fullUrl, {
            method: 'POST',
            signal: createTimeoutSignal(30000),
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'X-Client-Type': 'kobi-firewall-frontend',
              'X-Client-Version': '2.0.0',
              'Origin': window.location.origin
            },
            body: JSON.stringify({
              username: sanitizedUsername,
              password: credentials.password,
              remember_me: Boolean(credentials.rememberMe)
            }),
            mode: 'cors',
            credentials: 'include'
          });

          console.log('📨 [AUTH] Enhanced response:', {
            endpoint,
            status: response.status,
            ok: response.ok,
            statusText: response.statusText
          });

          if (response.ok) {
            data = await response.json();
            console.log('✅ [AUTH] Enhanced login success from:', endpoint);
            break;
          } else {
            let errorData;
            try {
              errorData = await response.json();
            } catch {
              errorData = { message: response.statusText };
            }

            // Handle specific error cases
            if (response.status === 401) {
              handleLoginBlock();
              return {
                success: false,
                error: errorData.message || 'Kullanıcı adı veya parola hatalı'
              };
            }

            throw new Error(`HTTP ${response.status}: ${errorData.message || response.statusText}`);
          }
        } catch (error) {
          console.log(`⚠️ [AUTH] Enhanced endpoint ${endpoint} failed:`, error.message);
          lastError = error;
          continue;
        }
      }

      // Handle failed authentication
      if (!response || !response.ok || !data) {
        if (lastError?.name === 'AbortError') {
          return {
            success: false,
            error: 'Bağlantı zaman aşımı - Backend yanıt vermiyor (30s)'
          };
        }

        if (lastError?.message?.includes('fetch')) {
          return {
            success: false,
            error: 'Backend sunucusuna bağlanılamıyor'
          };
        }

        handleLoginBlock();
        return {
          success: false,
          error: lastError?.message || 'Giriş başarısız'
        };
      }

      // Process enhanced successful response
      console.log('📨 [AUTH] Enhanced login response:', {
        hasToken: !!(data.access_token || data.token),
        hasUser: !!data.user,
        hasRole: !!(data.user?.role),
        hasPermissions: !!(data.user?.permissions),
        tokenType: data.token_type
      });

      const token = data.access_token || data.token;
      const userData = data.user;

      if (token && userData) {
        console.log('✅ [AUTH] Enhanced login successful');

        // Reset login attempts
        setLoginAttempts(0);
        setIsBlocked(false);
        localStorage.removeItem('loginBlock');

        // Calculate token expiry
        const expiresIn = data.expires_in || 3600;
        const expiryTime = Date.now() + (expiresIn * 1000);

        // Store enhanced auth data
        localStorage.setItem('token', token);
        localStorage.setItem('user', JSON.stringify(userData));
        localStorage.setItem('tokenExpiry', expiryTime.toString());

        // Store role and permissions
        if (userData.role) {
          localStorage.setItem('userRole', userData.role);
          setUserRole(userData.role);
        }

        if (userData.permissions) {
          localStorage.setItem('userPermissions', JSON.stringify(userData.permissions));
          setUserPermissions(userData.permissions);
        }

        // Handle remember me
        if (credentials.rememberMe) {
          localStorage.setItem('rememberMe', 'true');
          localStorage.setItem('savedUsername', sanitizedUsername);
        } else {
          localStorage.removeItem('rememberMe');
          localStorage.removeItem('savedUsername');
        }

        setUser(userData);
        setIsAuthenticated(true);

        return { success: true, user: userData };
      } else {
        console.log('❌ [AUTH] Enhanced login failed: Invalid response');
        handleLoginBlock();
        return {
          success: false,
          error: 'Geçersiz yanıt formatı'
        };
      }
    } catch (error) {
      console.error('❌ [AUTH] Enhanced login error:', error);

      if (error.name === 'AbortError') {
        return {
          success: false,
          error: 'Bağlantı zaman aşımı'
        };
      }

      handleLoginBlock();
      return {
        success: false,
        error: `Giriş hatası: ${error.message}`
      };
    } finally {
      console.log('🔄 [AUTH] Enhanced login completed');
      setIsLoading(false);
    }
  };

  const logout = async () => {
    console.log('🚪 [AUTH] Enhanced logout');

    try {
      // Try to call backend logout if token exists
      const token = localStorage.getItem('token');
      if (token) {
        const baseUrl = getBackendUrl();
        const logoutUrl = baseUrl ? `${baseUrl}/api/v1/auth/logout` : '/api/v1/auth/logout';

        try {
          await fetch(logoutUrl, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Accept': 'application/json'
            },
            signal: createTimeoutSignal(5000)
          });
          console.log('✅ [AUTH] Backend logout successful');
        } catch (error) {
          console.warn('⚠️ [AUTH] Backend logout failed (continuing):', error.message);
        }
      }
    } catch (error) {
      console.warn('⚠️ [AUTH] Logout cleanup error:', error.message);
    }

    // Clear all auth data
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('tokenExpiry');
    localStorage.removeItem('userRole');
    localStorage.removeItem('userPermissions');

    // Keep remember me if it was set
    const rememberMe = localStorage.getItem('rememberMe');
    if (rememberMe !== 'true') {
      localStorage.removeItem('rememberMe');
      localStorage.removeItem('savedUsername');
    }

    setUser(null);
    setIsAuthenticated(false);
    setUserRole(null);
    setUserPermissions([]);
    setIsLoading(false);
  };

  // Enhanced utility functions
  const isAdmin = () => {
    return userRole === 'admin';
  };

  const hasPermission = (permission) => {
    if (userRole === 'admin') return true;
    return userPermissions.includes(permission) || userPermissions.includes('*');
  };

  const canAccessNAT = () => {
    return isAdmin() || hasPermission('nat_management');
  };

  const value = {
    user,
    isAuthenticated,
    isLoading,
    authLoading: isLoading, // Compatibility
    loginAttempts,
    isBlocked,
    userRole,
    userPermissions,
    login,
    logout,
    // Enhanced utilities
    isAdmin,
    hasPermission,
    canAccessNAT,
    // Backward compatibility
    isTokenValid: () => isAuthenticated
  };

  console.log('🔐 [AUTH] Enhanced AuthProvider rendering:', {
    isAuthenticated,
    isLoading,
    hasUser: !!user,
    userRole,
    permissions: userPermissions.length,
    canAccessNAT: canAccessNAT()
  });

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};


================================================
File: src/pages/Dashboard.jsx
================================================
import React, { useState, useEffect } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { useNavigate } from 'react-router-dom'
import { toast } from 'react-hot-toast'
import {
  FaShieldAlt,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaCog,
  FaServer,
  FaExclamationTriangle,
  FaCheckCircle,
  FaBan,
  FaClock,
  FaDatabase,
  FaChartLine,
  FaEye
} from 'react-icons/fa'

console.log('🏠 [DASHBOARD] Dashboard component dosyası yüklendi')

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    fetchDataStatus()
    const interval = setInterval(fetchDataStatus, 60000)
    return () => clearInterval(interval)
  }, [])

  const fetchDataStatus = async () => {
    try {
      // Simulate API call
      setTimeout(() => {
        setDataStatus({
          persistence: {
            enabled: true,
            dataCollection: true,
            totalActivities: 135421,
            systemUptime: 172800 // 2 days in seconds
          }
        })
        setIsLoading(false)
      }, 500)
    } catch (error) {
      console.error('Data status fetch error:', error)
      setIsLoading(false)
    }
  }

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    )
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400)
    const hours = Math.floor((seconds % 86400) / 3600)
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`
  }

  const isPersistent = dataStatus.persistence?.enabled && dataStatus.persistence?.dataCollection

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus.persistence?.systemUptime || 0)}
      </div>
    </div>
  )
}

// Analytics Chart Component
const AnalyticsChart = () => {
  const [activeFilter, setActiveFilter] = useState('24h')
  const [chartData, setChartData] = useState({
    totalConnections: [],
    blockedConnections: []
  })

  const filters = [
    { key: '24h', label: '24sa' },
    { key: '7d', label: '7g' },
    { key: '30d', label: '30g' }
  ]

  useEffect(() => {
    const generateData = () => {
      const hours = Array.from({length: 24}, (_, i) => {
        const hour = i.toString().padStart(2, '0') + ':00'
        const totalConnections = Math.floor(Math.random() * 500) + 200
        const blockedConnections = Math.floor(totalConnections * (Math.random() * 0.2 + 0.05))
        return {
          time: hour,
          total: totalConnections,
          blocked: blockedConnections
        }
      })
      setChartData({
        totalConnections: hours.map(h => ({ time: h.time, value: h.total })),
        blockedConnections: hours.map(h => ({ time: h.time, value: h.blocked }))
      })
    }
    generateData()
    const interval = setInterval(generateData, 30000)
    return () => clearInterval(interval)
  }, [activeFilter])

  const maxValue = Math.max(
    ...chartData.totalConnections.map(d => d.value),
    ...chartData.blockedConnections.map(d => d.value)
  )

  return (
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <FaChartLine className="text-blue-400 text-xl" />
          <h3 className="text-white font-semibold text-lg">Analitik</h3>
        </div>
        <div className="flex bg-slate-700/50 rounded-lg p-1">
          {filters.map((filter) => (
            <button
              key={filter.key}
              onClick={() => setActiveFilter(filter.key)}
              className={`px-3 py-1 text-sm rounded-md transition-all ${
                activeFilter === filter.key
                  ? 'bg-blue-600 text-white'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              {filter.label}
            </button>
          ))}
        </div>
      </div>
      <p className="text-gray-400 text-sm mb-6">Zaman içindeki ağ etkinliği</p>

      {/* Chart Container */}
      <div className="relative h-64 bg-slate-900/30 rounded-lg p-4">
        {/* Y-axis labels */}
        <div className="absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-gray-500 py-4">
          <span>{maxValue}</span>
          <span>{Math.floor(maxValue * 0.75)}</span>
          <span>{Math.floor(maxValue * 0.5)}</span>
          <span>{Math.floor(maxValue * 0.25)}</span>
          <span>0</span>
        </div>

        {/* Chart Area */}
        <div className="ml-8 h-full relative">
          <svg className="w-full h-full" viewBox="0 0 800 200">
            {/* Grid lines */}
            {[0, 0.25, 0.5, 0.75, 1].map((ratio, index) => (
              <line
                key={index}
                x1="0"
                y1={200 - (ratio * 180)}
                x2="800"
                y2={200 - (ratio * 180)}
                stroke="#334155"
                strokeWidth="0.5"
                opacity="0.5"
              />
            ))}

            {/* Total Connections Line */}
            <path
              d={`M ${chartData.totalConnections.map((point, index) =>
                `${(index / (chartData.totalConnections.length - 1)) * 800},${200 - ((point.value / maxValue) * 180)}`
              ).join(' L ')}`}
              fill="none"
              stroke="#3B82F6"
              strokeWidth="3"
              className="drop-shadow-lg"
            />

            {/* Blocked Connections Line */}
            <path
              d={`M ${chartData.blockedConnections.map((point, index) =>
                `${(index / (chartData.blockedConnections.length - 1)) * 800},${200 - ((point.value / maxValue) * 180)}`
              ).join(' L ')}`}
              fill="none"
              stroke="#EF4444"
              strokeWidth="2"
              className="drop-shadow-lg"
            />

            {/* Area fill for total connections */}
            <path
              d={`M ${chartData.totalConnections.map((point, index) =>
                `${(index / (chartData.totalConnections.length - 1)) * 800},${200 - ((point.value / maxValue) * 180)}`
              ).join(' L ')} L 800,200 L 0,200 Z`}
              fill="url(#totalGradient)"
              opacity="0.1"
            />

            {/* Gradients */}
            <defs>
              <linearGradient id="totalGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                <stop offset="0%" style={{stopColor: '#3B82F6', stopOpacity: 0.3}} />
                <stop offset="100%" style={{stopColor: '#3B82F6', stopOpacity: 0}} />
              </linearGradient>
            </defs>
          </svg>
        </div>

        {/* X-axis labels */}
        <div className="flex justify-between text-xs text-gray-500 mt-2 ml-8">
          {['00:00', '04:00', '08:00', '12:00', '16:00', '20:00'].map((time, index) => (
            <span key={index}>{time}</span>
          ))}
        </div>
      </div>

      {/* Legend */}
      <div className="flex items-center justify-center space-x-6 mt-4">
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
          <span className="text-gray-400 text-sm">Toplam Bağlantı</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
          <span className="text-gray-400 text-sm">Engellenen</span>
        </div>
      </div>
    </div>
  )
}

// Recent Activity Component
const RecentActivity = () => {
  const [activities, setActivities] = useState([])

  const activityTypes = {
    blocked: { icon: FaBan, color: 'text-red-400', bg: 'bg-red-500/10' },
    allowed: { icon: FaCheckCircle, color: 'text-green-400', bg: 'bg-green-500/10' },
    warning: { icon: FaExclamationTriangle, color: 'text-yellow-400', bg: 'bg-yellow-500/10' },
    info: { icon: FaShieldAlt, color: 'text-blue-400', bg: 'bg-blue-500/10' }
  }

  const generateActivity = () => {
    const domains = [
      'malware.com', 'github.com', 'suspicious-site.net', 'vercel.com',
      'api.example.com', 'safe-site.org', 'threat.xyz', 'legitimate-api.com'
    ]
    const ips = [
      '192.168.1.10', '10.0.0.15', '172.16.0.8', '192.168.1.25',
      '10.0.0.32', '172.16.0.45', '192.168.1.100', '10.0.0.200'
    ]
    const activityTemplates = [
      { type: 'blocked', message: 'Engellendi', detail: 'Kötü amaçlı site' },
      { type: 'allowed', message: 'İzin Verildi', detail: 'Güvenli bağlantı' },
      { type: 'blocked', message: 'Engellendi', detail: 'Şüpheli aktivite' },
      { type: 'warning', message: 'Uyarı', detail: 'Yüksek bant genişliği' },
      { type: 'info', message: 'Bilgi', detail: 'Kural güncellendi' }
    ]

    const template = activityTemplates[Math.floor(Math.random() * activityTemplates.length)]
    const domain = domains[Math.floor(Math.random() * domains.length)]
    const ip = ips[Math.floor(Math.random() * ips.length)]

    return {
      id: Date.now() + Math.random(),
      type: template.type,
      message: template.message,
      detail: template.detail,
      domain: domain,
      ip: ip,
      timestamp: new Date(),
      port: Math.floor(Math.random() * 65535) + 1
    }
  }

  useEffect(() => {
    // Initial activities
    const initialActivities = Array.from({length: 8}, () => generateActivity())
    setActivities(initialActivities)

    // Add new activity every 5 seconds
    const interval = setInterval(() => {
      setActivities(prev => {
        const newActivity = generateActivity()
        return [newActivity, ...prev.slice(0, 7)] // Keep only 8 most recent
      })
    }, 5000)

    return () => clearInterval(interval)
  }, [])

  const formatTime = (timestamp) => {
    const now = new Date()
    const diff = Math.floor((now - timestamp) / 1000)
    if (diff < 60) return `${diff} sn önce`
    if (diff < 3600) return `${Math.floor(diff / 60)} dk önce`
    if (diff < 86400) return `${Math.floor(diff / 3600)} sa önce`
    return `${Math.floor(diff / 86400)} gün önce`
  }

  return (
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
      <div className="flex items-center space-x-3 mb-6">
        <FaClock className="text-blue-400 text-xl" />
        <h3 className="text-white font-semibold text-lg">Son Etkinlik</h3>
      </div>
      <p className="text-gray-400 text-sm mb-4">Son ağ olayları</p>

      <div className="space-y-3 max-h-96 overflow-y-auto">
        {activities.map((activity) => {
          const ActivityIcon = activityTypes[activity.type].icon
          return (
            <div
              key={activity.id}
              className="flex items-start space-x-3 p-3 bg-slate-900/30 rounded-lg hover:bg-slate-900/50 transition-colors"
            >
              <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${activityTypes[activity.type].bg}`}>
                <ActivityIcon className={`text-sm ${activityTypes[activity.type].color}`} />
              </div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between">
                  <p className="text-white font-medium text-sm">{activity.domain}</p>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                    activity.type === 'blocked' ? 'bg-red-500/20 text-red-300' :
                    activity.type === 'allowed' ? 'bg-green-500/20 text-green-300' :
                    activity.type === 'warning' ? 'bg-yellow-500/20 text-yellow-300' :
                    'bg-blue-500/20 text-blue-300'
                  }`}>
                    {activity.message}
                  </span>
                </div>
                <p className="text-gray-400 text-xs mt-1">{activity.detail}</p>
                <div className="flex items-center justify-between mt-2">
                  <span className="text-gray-500 text-xs">
                    {activity.ip}:{activity.port}
                  </span>
                  <span className="text-gray-500 text-xs">
                    {formatTime(activity.timestamp)}
                  </span>
                </div>
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}

// Stat Card Component
const StatCard = ({ title, value, subtitle, icon, color = 'blue', trend, size = 'normal' }) => {
  const getColorClasses = (color) => {
    const colors = {
      green: 'text-green-400 bg-green-500/10 border-green-500/20',
      blue: 'text-blue-400 bg-blue-500/10 border-blue-500/20',
      yellow: 'text-yellow-400 bg-yellow-500/10 border-yellow-500/20',
      red: 'text-red-400 bg-red-500/10 border-red-500/20',
      purple: 'text-purple-400 bg-purple-500/10 border-purple-500/20',
      gray: 'text-gray-400 bg-gray-500/10 border-gray-500/20'
    }
    return colors[color] || colors.blue
  }

  const getSizeClasses = (size) => {
    return size === 'large' ? 'p-6' : 'p-4'
  }

  return (
    <div className={`bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 ${getSizeClasses(size)} hover:bg-slate-800/70 transition-all duration-200`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
          <p className={`font-bold ${size === 'large' ? 'text-3xl' : 'text-2xl'} text-white mb-1`}>
            {value}
          </p>
          {subtitle && (
            <p className="text-gray-500 text-xs">{subtitle}</p>
          )}
          {trend && (
            <div className="flex items-center mt-2">
              <span className={`text-xs font-medium ${trend.positive ? 'text-green-400' : 'text-red-400'}`}>
                {trend.positive ? '+' : ''}{trend.value}
              </span>
              <span className="text-gray-500 text-xs ml-1">{trend.period}</span>
            </div>
          )}
        </div>
        {icon && (
          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getColorClasses(color)}`}>
            {icon}
          </div>
        )}
      </div>
    </div>
  )
}

const Dashboard = () => {
  console.log('🏠 [DASHBOARD] Dashboard component render başladı')
  const { user, logout } = useAuth()
  const navigate = useNavigate()
  const [activeMenu, setActiveMenu] = useState('home')
  const [isCollapsed, setIsCollapsed] = useState(false)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [isLoading, setIsLoading] = useState(false)

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCog },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ]

  useEffect(() => {
    console.log('🏠 [DASHBOARD] Dashboard mounted')
    const timer = setInterval(() => {
      setCurrentTime(new Date())
    }, 1000)

    setIsLoading(false)

    return () => {
      console.log('🏠 [DASHBOARD] Dashboard unmounted')
      clearInterval(timer)
    }
  }, [])

  const handleLogout = async () => {
    try {
      console.log('🏠 [DASHBOARD] Logout başladı')
      await logout()
      toast.success('Başarıyla çıkış yapıldı')
      console.log('🏠 [DASHBOARD] Logout tamamlandı')
    } catch (error) {
      console.error('🏠 [DASHBOARD] Logout hatası:', error)
      toast.error('Çıkış yapılırken hata oluştu')
    }
  }

  const handleMenuClick = (menuId) => {
    console.log('🔗 [DASHBOARD] Menu tıklandı:', menuId)

    // Logs için routing - YENİ EKLENDİ!
    if (menuId === 'logs') {
      console.log('📊 [DASHBOARD] Logs sayfasına yönlendiriliyor')
      navigate('/logs')
      return
    }

    // DNS Management'a direkt yönlendirme - EN ÖNEMLİ!
    if (menuId === 'dns-management') {
      console.log('➡️ [DASHBOARD] DNS Management sayfasına yönlendiriliyor')
      navigate('/dns-management')
      return
    }

    // Routes sayfasına yönlendirme - YENİ EKLENDİ!
    if (menuId === 'routes') {
      console.log('➡️ [DASHBOARD] Routes sayfasına yönlendiriliyor')
      navigate('/routes')
      return
    }

    // Rule Groups sayfasına yönlendirme - YENİ EKLENDİ!
    if (menuId === 'rule-groups') {
      console.log('➡️ [DASHBOARD] Rule Groups sayfasına yönlendiriliyor')
      navigate('/rule-groups')
      return
    }

    // Interface Settings sayfasına yönlendirme - YENİ EKLENDİ!
    if (menuId === 'interface-settings') {
      console.log('➡️ [DASHBOARD] Interface Settings sayfasına yönlendiriliyor')
      navigate('/interface-settings')
      return
    }

    // Security Rules sayfasına yönlendirme - YENİ EKLENDİ!
    if (menuId === 'security-rules') {
      console.log('🛡️ [DASHBOARD] Security Rules sayfasına yönlendiriliyor')
      navigate('/security-rules')
      return
    }

    // Diğer direkt sayfalar
    if (menuId === 'reports') {
      console.log('➡️ [DASHBOARD] Reports sayfasına yönlendiriliyor')
      navigate('/reports')
      return
    }

    if (menuId === 'settings') {
      console.log('➡️ [DASHBOARD] Settings sayfasına yönlendiriliyor')
      navigate('/settings')
      return
    }

    if (menuId === 'updates') {
      console.log('➡️ [DASHBOARD] Updates sayfasına yönlendiriliyor')
      navigate('/updates')
      return
    }

    if (menuId === 'nat-settings') {
      console.log('➡️ [DASHBOARD] NAT Settings sayfasına yönlendiriliyor')
      navigate('/nat-settings')
      return
    }

    // Dashboard içinde kalacak menüler
    if (menuId === 'home') {
      console.log('🏠 [DASHBOARD] Ana sayfa seçildi')
      setActiveMenu(menuId)
      return
    }

    // Fallback - bilinmeyen menü
    console.log('❓ [DASHBOARD] Bilinmeyen menu:', menuId)
    setActiveMenu(menuId)
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4"></div>
          <p className="text-white">Dashboard yükleniyor...</p>
        </div>
      </div>
    )
  }

  console.log('🎨 [DASHBOARD] Dashboard render ediliyor, activeMenu:', activeMenu)

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon
              const isActive = activeMenu === item.id
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              )
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Ana Sayfa</h2>
                <span className="text-gray-400 text-sm">Güvenlik duvarı yapılandırması ve ayrıntılı günlük görünümü</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">Hoş geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Top Stats Row */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <StatCard
              title="Durum"
              value="Aktif"
              subtitle="Güvenlik duvarı çalışıyor"
              icon={<FaCheckCircle />}
              color="green"
            />
            <StatCard
              title="Bağlı Cihazlar"
              value="5"
              subtitle="Güvenlik duvarı koruması kullanan cihazlar"
              icon={<FaServer />}
              color="blue"
            />
            <StatCard
              title="Aktif Kurallar"
              value="12"
              subtitle="Aktif güvenlik duvarı kuralları"
              icon={<FaExclamationTriangle />}
              color="yellow"
            />
            <StatCard
              title="Son Güncelleme"
              value="2sa önce"
              subtitle="Son yapılandırma değişikliği"
              icon={<FaClock />}
              color="gray"
            />
          </div>

          {/* Middle Stats Row */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <StatCard
              title="Toplam Bağlantı"
              value="135,421"
              subtitle="Geçen aydan %17"
              icon={<FaChartBar />}
              color="blue"
            />
            <StatCard
              title="Engellenen"
              value="23,543"
              subtitle="Güvenlik tehdidi engellendi %17,41"
              icon={<FaBan />}
              color="red"
            />
            <StatCard
              title="Tehditler"
              value="342"
              subtitle="Engellenen girişimler %13,51"
              icon={<FaExclamationTriangle />}
              color="yellow"
            />
            <StatCard
              title="Güvenlik"
              value="%98.7"
              subtitle="Güvenlik performansı"
              icon={<FaShieldAlt />}
              color="green"
            />
          </div>

          {/* Main Content Grid */}
          <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
            {/* Analytics Chart - Left Side */}
            <div className="xl:col-span-2">
              <AnalyticsChart />
            </div>

            {/* Recent Activity - Right Side */}
            <div>
              <RecentActivity />
            </div>
          </div>
        </main>
      </div>
    </div>
  )
}

export default Dashboard


================================================
File: src/pages/DnsManagement.css
================================================
.dns-management-page {
  padding: 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.dns-icon {
  font-size: 2rem;
}

.page-title h1 {
  color: white;
  font-size: 1.75rem;
  font-weight: 500;
  margin: 0;
}

.page-title p {
  color: #6c757d;
  margin: 0;
  font-size: 0.875rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  transition: all 0.2s ease;
}

.stat-card:hover {
  background: rgba(30, 41, 59, 0.7);
}

.domain-list-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 2rem;
}

.tab-navigation {
  display: flex;
  background: rgba(71, 85, 105, 0.5);
  border-radius: 0.5rem;
  padding: 0.25rem;
  margin-bottom: 1.5rem;
}

.tab-button {
  padding: 0.75rem 1rem;
  font-size: 0.875rem;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  border: none;
  background: transparent;
  cursor: pointer;
}

.tab-button.active {
  background: #3b82f6;
  color: white;
}

.tab-button:not(.active) {
  color: #9ca3af;
}

.tab-button:not(.active):hover {
  color: white;
}

.domain-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
  background: rgba(15, 23, 42, 0.3);
  border-radius: 0.5rem;
  margin-bottom: 0.75rem;
  transition: all 0.2s ease;
  animation: fadeInUp 0.3s ease-out;
}

.domain-item:hover {
  background: rgba(15, 23, 42, 0.5);
}

.domain-info {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.domain-badge {
  padding: 0.25rem 0.5rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 500;
}

.domain-badge.blocked {
  background: rgba(239, 68, 68, 0.2);
  color: #fca5a5;
}

.domain-badge.wildcard {
  background: rgba(245, 158, 11, 0.2);
  color: #fbbf24;
}

.domain-badge.allowed {
  background: rgba(34, 197, 94, 0.2);
  color: #86efac;
}

.empty-state {
  text-align: center;
  padding: 3rem;
}

.empty-state-icon {
  color: #6b7280;
  font-size: 3rem;
  margin-bottom: 1rem;
}

.settings-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  margin-bottom: 2rem;
}

@media (max-width: 1024px) {
  .settings-grid {
    grid-template-columns: 1fr;
  }
}

.settings-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
}

.setting-toggle {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.toggle-switch {
  position: relative;
  display: inline-flex;
  height: 1.75rem;
  width: 3rem;
  align-items: center;
  border-radius: 9999px;
  transition: background-color 0.2s ease;
  cursor: pointer;
  border: none;
}

.toggle-switch.active {
  background-color: #16a34a;
}

.toggle-switch:not(.active) {
  background-color: #4b5563;
}

.toggle-switch-knob {
  display: inline-block;
  height: 1.25rem;
  width: 1.25rem;
  border-radius: 9999px;
  background-color: white;
  transition: transform 0.2s ease;
}

.toggle-switch.active .toggle-switch-knob {
  transform: translateX(1.5rem);
}

.toggle-switch:not(.active) .toggle-switch-knob {
  transform: translateX(0.25rem);
}

.url-input-group {
  display: flex;
  gap: 0.5rem;
  margin-top: 0.75rem;
}

.url-input {
  flex: 1;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.url-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.download-button {
  background: #3b82f6;
  color: white;
  border: none;
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  cursor: pointer;
  transition: background-color 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
}

.download-button:hover {
  background: #2563eb;
}

.download-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.warning-box {
  background: rgba(245, 158, 11, 0.1);
  border: 1px solid rgba(245, 158, 11, 0.2);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-bottom: 1rem;
}

.warning-content {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.warning-icon {
  color: #fbbf24;
  font-size: 1.125rem;
  margin-top: 0.125rem;
  flex-shrink: 0;
}

.warning-text {
  color: #fde68a;
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.warning-description {
  color: rgba(253, 230, 138, 0.8);
  font-size: 0.875rem;
}

.info-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
}

.info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

@media (max-width: 768px) {
  .info-grid {
    grid-template-columns: 1fr;
  }
}

.info-item h4 {
  color: white;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.info-item p {
  color: #9ca3af;
  font-size: 0.875rem;
  line-height: 1.5;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  inset: 0;
  z-index: 50;
  background: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background: #1e293b;
  border-radius: 0.75rem;
  padding: 1.5rem;
  width: 100%;
  max-width: 28rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.modal-title {
  color: white;
  font-size: 1.125rem;
  font-weight: 500;
}

.modal-close {
  color: #9ca3af;
  background: transparent;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  border-radius: 0.375rem;
  transition: color 0.2s ease;
}

.modal-close:hover {
  color: #d1d5db;
}

.modal-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.form-group label {
  display: block;
  color: #d1d5db;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.form-input {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.form-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.form-select {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.form-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.modal-actions {
  display: flex;
  gap: 0.75rem;
  margin-top: 1.5rem;
}

.modal-button {
  flex: 1;
  padding: 0.75rem;
  border-radius: 0.5rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
}

.modal-button.secondary {
  background: #4b5563;
  color: white;
}

.modal-button.secondary:hover {
  background: #374151;
}

.modal-button.primary {
  background: #3b82f6;
  color: white;
}

.modal-button.primary:hover {
  background: #2563eb;
}

/* Search Input */
.search-input-container {
  position: relative;
}

.search-input {
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.5rem 0.75rem 0.5rem 2.5rem;
  color: white;
  font-size: 0.875rem;
  width: 200px;
}

.search-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.search-icon {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  color: #9ca3af;
  font-size: 0.875rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .dns-management-page {
    padding: 1rem;
  }

  .header-actions {
    flex-direction: column;
    gap: 0.5rem;
  }

  .search-input {
    width: 100%;
  }

  .url-input-group {
    flex-direction: column;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .tab-navigation {
    flex-direction: column;
  }

  .tab-button {
    text-align: center;
  }

  .domain-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.75rem;
  }

  .modal-actions {
    flex-direction: column;
  }
}

/* Animation for domain items */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Loading states */
.loading-shimmer {
  background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}


================================================
File: src/pages/DnsManagement.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import {
  FaShieldAlt,
  FaServer,
  FaCog,
  FaClock,
  FaExclamationTriangle,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaDatabase,
  FaCheckCircle,
  FaBan,
  FaLink,
  FaPlus,
  FaSearch,
  FaDownload,
  FaInfoCircle,
  FaSave,
  FaTrash,
  FaEdit,
  FaEye,
  FaTimes
} from 'react-icons/fa';
import { dnsService } from '../services/dnsService';
import './DnsManagement.css';

console.log('🌐 [DNS] DnsManagement component yüklendi');

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchDataStatus();
    const interval = setInterval(fetchDataStatus, 60000);
    return () => clearInterval(interval);
  }, []);

  const fetchDataStatus = async () => {
    try {
      const response = await dnsService.getDataStatus();
      if (response.success) {
        setDataStatus(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Data status fetch error:', error);
      setIsLoading(false);
    }
  };

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    );
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`;
  };

  const isPersistent = dataStatus?.persistence?.enabled && dataStatus?.persistence?.dataCollection;

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus?.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus?.persistence?.systemUptime || 0)}
      </div>
    </div>
  );
};

const DnsManagement = () => {
  console.log('🌐 [DNS] DnsManagement component render başladı');

  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [activeMenu, setActiveMenu] = useState('dns-management');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  // DNS Management State
  const [dnsConfig, setDnsConfig] = useState({
    blockedDomains: [],
    wildcardRules: [],
    allowedDomains: [],
    adBlockerEnabled: true,
    dohBlocked: false,
    adBlockList: 'https://somehost.com/adblock-list.txt'
  });

  const [searchDomain, setSearchDomain] = useState('');
  const [activeTab, setActiveTab] = useState('blocked');
  const [showAddModal, setShowAddModal] = useState(false);
  const [domainToAdd, setDomainToAdd] = useState('');
  const [domainType, setDomainType] = useState('blocked');

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCog },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ];

  useEffect(() => {
    console.log('🌐 [DNS] useEffect başladı');

    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    fetchDnsConfig();

    return () => {
      console.log('🌐 [DNS] Component unmount, timer temizleniyor');
      clearInterval(timer);
    };
  }, []);

  const fetchDnsConfig = async () => {
    try {
      console.log('🌐 [DNS] DNS config fetch başladı');
      setIsLoading(true);
      const response = await dnsService.getDnsConfig();
      if (response.success) {
        console.log('🌐 [DNS] DNS config başarıyla alındı:', response.data);
        setDnsConfig(response.data);
      }
    } catch (error) {
      console.error('🌐 [DNS] DNS config fetch error:', error);
      toast.error('DNS konfigürasyonu alınamadı');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddDomain = async () => {
    if (!domainToAdd.trim()) {
      toast.error('Domain adı boş olamaz');
      return;
    }

    try {
      console.log('🌐 [DNS] Domain ekleniyor:', { domainToAdd, domainType });
      setIsSaving(true);
      const fieldName = domainType === 'blocked' ? 'blockedDomains' :
                       domainType === 'wildcard' ? 'wildcardRules' : 'allowedDomains';

      const newConfig = {
        ...dnsConfig,
        [fieldName]: [...dnsConfig[fieldName], domainToAdd.trim()]
      };

      const response = await dnsService.updateDnsConfig(newConfig);
      if (response.success) {
        setDnsConfig(newConfig);
        toast.success('Domain başarıyla eklendi');
        setDomainToAdd('');
        setShowAddModal(false);
      }
    } catch (error) {
      console.error('Add domain error:', error);
      toast.error('Domain eklenirken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleRemoveDomain = async (domain, type) => {
    try {
      console.log('🌐 [DNS] Domain kaldırılıyor:', { domain, type });
      const fieldName = type === 'blocked' ? 'blockedDomains' :
                       type === 'wildcard' ? 'wildcardRules' : 'allowedDomains';

      const newConfig = {
        ...dnsConfig,
        [fieldName]: dnsConfig[fieldName].filter(d => d !== domain)
      };

      const response = await dnsService.updateDnsConfig(newConfig);
      if (response.success) {
        setDnsConfig(newConfig);
        toast.success('Domain başarıyla kaldırıldı');
      }
    } catch (error) {
      console.error('Remove domain error:', error);
      toast.error('Domain kaldırılırken hata oluştu');
    }
  };

  const handleToggleAdBlocker = async () => {
    try {
      const newConfig = {
        ...dnsConfig,
        adBlockerEnabled: !dnsConfig.adBlockerEnabled
      };

      const response = await dnsService.updateDnsConfig(newConfig);
      if (response.success) {
        setDnsConfig(newConfig);
        toast.success(`Reklam/Tracker engelleyici ${newConfig.adBlockerEnabled ? 'açıldı' : 'kapatıldı'}`);
      }
    } catch (error) {
      console.error('Toggle ad blocker error:', error);
      toast.error('Ayar değiştirilemedi');
    }
  };

  const handleToggleDohBlocking = async () => {
    try {
      const newConfig = {
        ...dnsConfig,
        dohBlocked: !dnsConfig.dohBlocked
      };

      const response = await dnsService.updateDnsConfig(newConfig);
      if (response.success) {
        setDnsConfig(newConfig);
        toast.success(`DNS over HTTPS engelleme ${newConfig.dohBlocked ? 'açıldı' : 'kapatıldı'}`);
      }
    } catch (error) {
      console.error('Toggle DoH blocking error:', error);
      toast.error('Ayar değiştirilemedi');
    }
  };

  const handleDownloadAdBlockList = async () => {
    if (!dnsConfig.adBlockList.trim()) {
      toast.error('Liste URL\'si boş olamaz');
      return;
    }

    try {
      setIsSaving(true);
      const response = await dnsService.downloadAdBlockList(dnsConfig.adBlockList);
      if (response.success) {
        toast.success('Reklam engelleme listesi başarıyla indirildi');
        await fetchDnsConfig(); // Refresh config
      }
    } catch (error) {
      console.error('Download ad block list error:', error);
      toast.error('Liste indirilemedi');
    } finally {
      setIsSaving(false);
    }
  };

  const handleLogout = async () => {
    try {
      console.log('🌐 [DNS] Logout başladı');
      await logout();
      toast.success('Başarıyla çıkış yapıldı');
    } catch (error) {
      console.error('Logout error:', error);
      toast.error('Çıkış yapılırken hata oluştu');
    }
  };

  const handleMenuClick = (menuId) => {
    console.log('🌐 [DNS] Menu tıklandı:', menuId);

    // DNS Management'ta kalmak için
    if (menuId === 'dns-management') {
      console.log('🌐 [DNS] DNS Management seçildi, activeMenu güncelleniyor');
      setActiveMenu(menuId);
      return;
    }

    // Diğer sayfalara yönlendirmeler
    if (menuId === 'home') {
      console.log('🌐 [DNS] Ana sayfaya yönlendiriliyor');
      navigate('/dashboard');
    } else if (menuId === 'updates') {
      console.log('🌐 [DNS] Updates sayfasına yönlendiriliyor');
      navigate('/updates');
    } else if (menuId === 'reports') {
      console.log('🌐 [DNS] Reports sayfasına yönlendiriliyor');
      navigate('/reports');
    } else if (menuId === 'settings') {
      console.log('🌐 [DNS] Settings sayfasına yönlendiriliyor');
      navigate('/settings');
    } else if (menuId === 'nat-settings') {
      console.log('🌐 [DNS] NAT Settings sayfasına yönlendiriliyor');
      navigate('/nat-settings');
    } else {
      // Diğer menüler için dashboard'a git
      console.log('🌐 [DNS] Dashboard\'a yönlendiriliyor');
      navigate('/dashboard');
    }
  };

  const filteredDomains = (domains, type) => {
    if (!searchDomain) return domains || [];
    return (domains || []).filter(domain =>
      domain.toLowerCase().includes(searchDomain.toLowerCase())
    );
  };

  const StatCard = ({ title, value, icon, color }) => {
    return (
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4 hover:bg-slate-800/70 transition-all duration-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
            <p className="font-bold text-2xl text-white">{value}</p>
          </div>
          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${color}`}>
            {icon}
          </div>
        </div>
      </div>
    );
  };

  console.log('🌐 [DNS] Component render ediliyor, state:', {
    activeMenu,
    isLoading,
    dnsConfigLength: dnsConfig.blockedDomains?.length || 0
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">DNS Yönetimi</h2>
                <span className="text-gray-400 text-sm">Domain engelleme, reklam filtreleme ve DNS güvenliği</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => setShowAddModal(true)}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <FaPlus className="text-sm" />
                  <span>Yeni Domain</span>
                </button>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">Hoş geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <StatCard
              title="Engelli Domainler"
              value={dnsConfig.blockedDomains?.length || 0}
              icon={<FaBan />}
              color="text-red-400 bg-red-500/10"
            />
            <StatCard
              title="Wildcard Kurallar"
              value={dnsConfig.wildcardRules?.length || 0}
              icon={<FaLink />}
              color="text-orange-400 bg-orange-500/10"
            />
            <StatCard
              title="Seçili Domainler"
              value={dnsConfig.allowedDomains?.length || 0}
              icon={<FaCheckCircle />}
              color="text-blue-400 bg-blue-500/10"
            />
          </div>

          {/* Domain Lists */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <FaBan className="text-red-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">Engelli Domainler</h3>
              </div>
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm" />
                  <input
                    type="text"
                    placeholder="Domain ara..."
                    value={searchDomain}
                    onChange={(e) => setSearchDomain(e.target.value)}
                    className="bg-slate-700/50 border border-slate-600 rounded-lg px-10 py-2 text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            {/* Tab Navigation */}
            <div className="flex bg-slate-700/50 rounded-lg p-1 mb-6">
              <button
                onClick={() => setActiveTab('blocked')}
                className={`px-4 py-2 text-sm rounded-md transition-all ${
                  activeTab === 'blocked'
                    ? 'bg-red-600 text-white'
                    : 'text-gray-400 hover:text-white'
                }`}
              >
                Engelli Domainler
              </button>
              <button
                onClick={() => setActiveTab('wildcard')}
                className={`px-4 py-2 text-sm rounded-md transition-all ${
                  activeTab === 'wildcard'
                    ? 'bg-orange-600 text-white'
                    : 'text-gray-400 hover:text-white'
                }`}
              >
                Wildcard Kurallar
              </button>
              <button
                onClick={() => setActiveTab('allowed')}
                className={`px-4 py-2 text-sm rounded-md transition-all ${
                  activeTab === 'allowed'
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-400 hover:text-white'
                }`}
              >
                Seçili Domainler
              </button>
            </div>

            {/* Domain List */}
            <div className="space-y-3">
              {activeTab === 'blocked' && (
                <>
                  {filteredDomains(dnsConfig.blockedDomains || [], 'blocked').length > 0 ? (
                    filteredDomains(dnsConfig.blockedDomains || [], 'blocked').map((domain, index) => (
                      <div key={index} className="flex items-center justify-between p-4 bg-slate-900/30 rounded-lg hover:bg-slate-900/50 transition-colors">
                        <div className="flex items-center space-x-3">
                          <FaBan className="text-red-400" />
                          <span className="text-white font-medium">{domain}</span>
                          <span className="text-red-300 text-xs bg-red-500/20 px-2 py-1 rounded-full">Engelli</span>
                        </div>
                        <button
                          onClick={() => handleRemoveDomain(domain, 'blocked')}
                          className="text-red-400 hover:text-red-300 p-2 rounded transition-colors"
                        >
                          <FaTrash className="text-sm" />
                        </button>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <FaBan className="text-gray-500 text-3xl mb-3 mx-auto" />
                      <h4 className="text-white font-medium mb-2">Henüz engelli domain yok</h4>
                      <p className="text-gray-400 text-sm mb-4">İlk domain'i engellemek için yukarıdaki butonu kullanın</p>
                      <button
                        onClick={() => {
                          setDomainType('blocked');
                          setShowAddModal(true);
                        }}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                      >
                        İlk Domain'i Engelle
                      </button>
                    </div>
                  )}
                </>
              )}

              {activeTab === 'wildcard' && (
                <>
                  {filteredDomains(dnsConfig.wildcardRules || [], 'wildcard').length > 0 ? (
                    filteredDomains(dnsConfig.wildcardRules || [], 'wildcard').map((rule, index) => (
                      <div key={index} className="flex items-center justify-between p-4 bg-slate-900/30 rounded-lg hover:bg-slate-900/50 transition-colors">
                        <div className="flex items-center space-x-3">
                          <FaLink className="text-orange-400" />
                          <span className="text-white font-medium">{rule}</span>
                          <span className="text-orange-300 text-xs bg-orange-500/20 px-2 py-1 rounded-full">Wildcard</span>
                        </div>
                        <button
                          onClick={() => handleRemoveDomain(rule, 'wildcard')}
                          className="text-red-400 hover:text-red-300 p-2 rounded transition-colors"
                        >
                          <FaTrash className="text-sm" />
                        </button>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <FaLink className="text-gray-500 text-3xl mb-3 mx-auto" />
                      <h4 className="text-white font-medium mb-2">Henüz wildcard kuralı yok</h4>
                      <p className="text-gray-400 text-sm">Wildcard kuralları ile tüm alt domainleri engelleyebilirsiniz</p>
                    </div>
                  )}
                </>
              )}

              {activeTab === 'allowed' && (
                <>
                  {filteredDomains(dnsConfig.allowedDomains || [], 'allowed').length > 0 ? (
                    filteredDomains(dnsConfig.allowedDomains || [], 'allowed').map((domain, index) => (
                      <div key={index} className="flex items-center justify-between p-4 bg-slate-900/30 rounded-lg hover:bg-slate-900/50 transition-colors">
                        <div className="flex items-center space-x-3">
                          <FaCheckCircle className="text-green-400" />
                          <span className="text-white font-medium">{domain}</span>
                          <span className="text-green-300 text-xs bg-green-500/20 px-2 py-1 rounded-full">İzinli</span>
                        </div>
                        <button
                          onClick={() => handleRemoveDomain(domain, 'allowed')}
                          className="text-red-400 hover:text-red-300 p-2 rounded transition-colors"
                        >
                          <FaTrash className="text-sm" />
                        </button>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <FaCheckCircle className="text-gray-500 text-3xl mb-3 mx-auto" />
                      <h4 className="text-white font-medium mb-2">Henüz izinli domain yok</h4>
                      <p className="text-gray-400 text-sm">İzinli domainler diğer kurallardan muaf tutulur</p>
                    </div>
                  )}
                </>
              )}
            </div>
          </div>

          {/* Ad/Tracker Blocker & DoH Settings */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-8 mb-8">
            {/* Ad/Tracker Blocker */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <FaShieldAlt className="text-yellow-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">Reklam/Tracker Engelleyici</h3>
              </div>
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 font-medium">Reklam Engelleyici</span>
                  <button
                    onClick={handleToggleAdBlocker}
                    className={`relative inline-flex h-7 w-12 items-center rounded-full transition-colors duration-200 ${
                      dnsConfig.adBlockerEnabled ? 'bg-green-600' : 'bg-gray-600'
                    }`}
                  >
                    <span
                      className={`inline-block h-5 w-5 transform rounded-full bg-white transition-transform duration-200 ${
                        dnsConfig.adBlockerEnabled ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>
                <div>
                  <label className="text-gray-300 font-medium mb-3 block">Liste İndir ve Ekle</label>
                  <div className="flex space-x-2">
                    <input
                      type="url"
                      value={dnsConfig.adBlockList || 'https://somehost.com/adblock-list.txt'}
                      onChange={(e) => setDnsConfig(prev => ({ ...prev, adBlockList: e.target.value }))}
                      className="flex-1 bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Liste URL'sini girin..."
                    />
                    <button
                      onClick={handleDownloadAdBlockList}
                      disabled={isSaving}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg transition-colors disabled:opacity-50 flex items-center space-x-2"
                    >
                      {isSaving ? <FaSync className="animate-spin" /> : <FaDownload />}
                      <span>Liste İndir ve Ekle</span>
                    </button>
                  </div>
                  <p className="text-gray-500 text-xs mt-2">EasyList formatındaki blokaj listelerini otomatik olarak indirir</p>
                </div>
              </div>
            </div>

            {/* DNS over HTTPS Blocking */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <FaExclamationTriangle className="text-red-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">DNS over HTTPS Engelleme</h3>
              </div>
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <span className="text-gray-300 font-medium">DoH Sunucularını Engelle</span>
                    <p className="text-gray-500 text-sm mt-1">Şifreli DNS trafiğini engeller</p>
                  </div>
                  <button
                    onClick={handleToggleDohBlocking}
                    className={`relative inline-flex h-7 w-12 items-center rounded-full transition-colors duration-200 ${
                      dnsConfig.dohBlocked ? 'bg-red-600' : 'bg-gray-600'
                    }`}
                  >
                    <span
                      className={`inline-block h-5 w-5 transform rounded-full bg-white transition-transform duration-200 ${
                        dnsConfig.dohBlocked ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4">
                  <div className="flex items-start space-x-3">
                    <FaExclamationTriangle className="text-yellow-400 text-lg mt-0.5 flex-shrink-0" />
                    <div>
                      <p className="text-yellow-200 font-medium mb-1">Dikkat</p>
                      <p className="text-yellow-200/80 text-sm">
                        DoH engellemesi, Google DNS, Cloudflare DNS gibi şifreli DNS servislerini engeller. Bu, DNS filtrelemeni bypass etmeye çalışan uygulamaları durdurur.
                      </p>
                    </div>
                  </div>
                </div>

                <button
                  onClick={() => handleToggleDohBlocking()}
                  className="w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
                >
                  <FaBan />
                  <span>DoH Sunucularını Engelle</span>
                </button>
              </div>
            </div>
          </div>

          {/* DNS Filtering Information */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="flex items-center space-x-3 mb-6">
              <FaInfoCircle className="text-blue-400 text-xl" />
              <h3 className="text-white font-semibold text-lg">DNS Filtreleme Hakkında</h3>
            </div>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-white font-medium mb-2">Domain Engelleme:</h4>
                  <p className="text-gray-400 text-sm">Belirtilen web sitelerine erişimi DNS seviyesinde engeller. Bu yaklaşım ağ adresleme seviyesinde çalışır.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Wildcard Engelleme:</h4>
                  <p className="text-gray-400 text-sm">*.example.com formatında tüm alt domainleri ve sıkıştırılmış example.com gibi belirttikleri engeller. Örneğin ad.example.com, tracker.example.com gibi adresleri kapsar.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Adblock Listeleri:</h4>
                  <p className="text-gray-400 text-sm">EasyList, AdGuard gibi yaygın reklam engelleme listelerini otomatik olarak indirip uygular.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">DoH Engelleme:</h4>
                  <p className="text-gray-400 text-sm">DNS over HTTPS trafiğini engeller, filtreleme bypass etmeye çalışan uygulamaları durdurur.</p>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* Add Domain Modal */}
      {showAddModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowAddModal(false)} />
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block w-full max-w-md transform overflow-hidden rounded-lg bg-slate-800 text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle">
              <div className="bg-slate-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-white">Yeni Domain Ekle</h3>
                  <button
                    onClick={() => setShowAddModal(false)}
                    className="rounded-md bg-slate-800 text-gray-400 hover:text-gray-300 focus:outline-none"
                  >
                    <FaTimes />
                  </button>
                </div>
                <div className="space-y-4">
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Domain Adı</label>
                    <input
                      type="text"
                      value={domainToAdd}
                      onChange={(e) => setDomainToAdd(e.target.value)}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="example.com"
                    />
                  </div>
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Kural Tipi</label>
                    <select
                      value={domainType}
                      onChange={(e) => setDomainType(e.target.value)}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="blocked">Engelli Domain</option>
                      <option value="wildcard">Wildcard Kural</option>
                      <option value="allowed">İzinli Domain</option>
                    </select>
                  </div>
                </div>
                <div className="mt-6 flex space-x-3">
                  <button
                    onClick={() => setShowAddModal(false)}
                    className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    İptal
                  </button>
                  <button
                    onClick={handleAddDomain}
                    disabled={isSaving}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors disabled:opacity-50"
                  >
                    {isSaving ? 'Ekleniyor...' : 'Ekle'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DnsManagement;


================================================
File: src/pages/InterfaceSettings.css
================================================
.interface-settings-page {
  padding: 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.interface-icon {
  font-size: 2rem;
}

.page-title h1 {
  color: white;
  font-size: 1.75rem;
  font-weight: 500;
  margin: 0;
}

.page-title p {
  color: #6c757d;
  margin: 0;
  font-size: 0.875rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  transition: all 0.2s ease;
}

.stat-card:hover {
  background: rgba(30, 41, 59, 0.7);
}

.interfaces-list-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 2rem;
}

.interface-item {
  background: rgba(15, 23, 42, 0.4);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 1rem;
  border: 1px solid rgba(71, 85, 105, 0.3);
  transition: all 0.2s ease;
  animation: fadeInUp 0.3s ease-out;
}

.interface-item:hover {
  background: rgba(15, 23, 42, 0.6);
  border-color: rgba(71, 85, 105, 0.5);
}

.interface-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.interface-info {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.interface-type-icon {
  width: 3rem;
  height: 3rem;
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(71, 85, 105, 0.5);
}

.interface-details {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-top: 1rem;
}

.interface-detail-item {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.interface-detail-label {
  color: #9ca3af;
  font-size: 0.875rem;
}

.interface-detail-value {
  color: white;
  font-weight: 500;
}

.interface-status-badges {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.status-badge {
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 700;
  border: 1px solid;
}

.status-badge.up {
  background: rgba(34, 197, 94, 0.2);
  color: #86efac;
  border-color: rgba(34, 197, 94, 0.3);
}

.status-badge.down {
  background: rgba(239, 68, 68, 0.2);
  color: #fca5a5;
  border-color: rgba(239, 68, 68, 0.3);
}

.status-badge.static {
  background: rgba(59, 130, 246, 0.2);
  color: #93c5fd;
  border-color: rgba(59, 130, 246, 0.3);
}

.status-badge.dhcp {
  background: rgba(245, 158, 11, 0.2);
  color: #fcd34d;
  border-color: rgba(245, 158, 11, 0.3);
}

.interface-actions {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.interface-toggle {
  position: relative;
  display: inline-flex;
  height: 1.5rem;
  width: 2.75rem;
  align-items: center;
  border-radius: 9999px;
  transition: background-color 0.2s ease;
  cursor: pointer;
  border: none;
}

.interface-toggle.active {
  background-color: #16a34a;
}

.interface-toggle:not(.active) {
  background-color: #4b5563;
}

.interface-toggle-knob {
  display: inline-block;
  height: 1rem;
  width: 1rem;
  border-radius: 9999px;
  background-color: white;
  transition: transform 0.2s ease;
}

.interface-toggle.active .interface-toggle-knob {
  transform: translateX(1.25rem);
}

.interface-toggle:not(.active) .interface-toggle-knob {
  transform: translateX(0.25rem);
}

.action-button {
  padding: 0.5rem;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.action-button.edit {
  color: #3b82f6;
}

.action-button.edit:hover {
  color: #2563eb;
  background: rgba(59, 130, 246, 0.1);
}

.action-button.delete {
  color: #ef4444;
}

.action-button.delete:hover {
  color: #dc2626;
  background: rgba(239, 68, 68, 0.1);
}

.empty-state {
  text-align: center;
  padding: 3rem;
}

.empty-state-icon {
  color: #6b7280;
  font-size: 3rem;
  margin-bottom: 1rem;
}

/* Internet Connection Sharing (ICS) Styles */
.ics-section {
  border-top: 1px solid #475569;
  padding-top: 1.5rem;
  margin-top: 1.5rem;
}

.ics-toggle-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem 0;
}

.ics-source-select {
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  width: 100%;
}

.ics-source-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.dhcp-range-inputs {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

.ics-info-box {
  background: rgba(34, 197, 94, 0.1);
  border: 1px solid rgba(34, 197, 94, 0.2);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-top: 1rem;
}

.ics-info-icon {
  color: #22c55e;
  font-size: 1.125rem;
  margin-top: 0.125rem;
  flex-shrink: 0;
}

.ics-info-title {
  color: #bbf7d0;
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.ics-info-description {
  color: rgba(187, 247, 208, 0.8);
  font-size: 0.875rem;
  line-height: 1.5;
}

/* Enhanced interface cards for ICS indication */
.interface-card-ics {
  border-left: 4px solid #22c55e;
  position: relative;
}

.interface-card-ics::before {
  content: "ICS";
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  background: rgba(34, 197, 94, 0.2);
  color: #22c55e;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  font-weight: bold;
}

/* ICS Status Badge */
.status-badge.ics {
  background: rgba(34, 197, 94, 0.2);
  color: #86efac;
  border-color: rgba(34, 197, 94, 0.3);
}

/* ICS Details in Interface Cards */
.ics-details {
  background: rgba(34, 197, 94, 0.1);
  border: 1px solid rgba(34, 197, 94, 0.2);
  border-radius: 0.5rem;
  padding: 0.75rem;
  margin-top: 0.75rem;
}

.ics-details-title {
  color: #bbf7d0;
  font-weight: 500;
  font-size: 0.875rem;
  margin-bottom: 0.25rem;
}

.ics-details-text {
  color: rgba(187, 247, 208, 0.8);
  font-size: 0.75rem;
}

/* ICS Toggle Switch Enhancement */
.ics-toggle-switch {
  position: relative;
  display: inline-flex;
  height: 1.5rem;
  width: 2.75rem;
  align-items: center;
  border-radius: 9999px;
  transition: all 0.3s ease;
  cursor: pointer;
  border: none;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.ics-toggle-switch.enabled {
  background: linear-gradient(135deg, #22c55e, #16a34a);
  box-shadow: 0 0 10px rgba(34, 197, 94, 0.3);
}

.ics-toggle-switch:not(.enabled) {
  background: #4b5563;
}

.ics-toggle-switch-knob {
  display: inline-block;
  height: 1.25rem;
  width: 1.25rem;
  border-radius: 9999px;
  background: white;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.ics-toggle-switch.enabled .ics-toggle-switch-knob {
  transform: translateX(1.25rem);
  box-shadow: 0 2px 8px rgba(34, 197, 94, 0.4);
}

.ics-toggle-switch:not(.enabled) .ics-toggle-switch-knob {
  transform: translateX(0.125rem);
}

/* ICS Form Section Styles */
.ics-form-section {
  background: rgba(34, 197, 94, 0.05);
  border: 1px solid rgba(34, 197, 94, 0.15);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-top: 1rem;
}

.ics-form-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
}

.ics-form-title {
  color: #bbf7d0;
  font-weight: 600;
  font-size: 1rem;
}

.ics-form-icon {
  color: #22c55e;
  font-size: 1.25rem;
}

/* Mobile responsive for ICS */
@media (max-width: 768px) {
  .dhcp-range-inputs {
    grid-template-columns: 1fr;
  }

  .ics-toggle-container {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }

  .ics-form-section {
    padding: 1rem;
  }
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  inset: 0;
  z-index: 50;
  background: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background: #1e293b;
  border-radius: 0.75rem;
  padding: 1.5rem;
  width: 100%;
  max-width: 42rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  max-height: 90vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.modal-title {
  color: white;
  font-size: 1.125rem;
  font-weight: 500;
}

.modal-close {
  color: #9ca3af;
  background: transparent;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  border-radius: 0.375rem;
  transition: color 0.2s ease;
}

.modal-close:hover {
  color: #d1d5db;
}

.modal-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-group label {
  display: block;
  color: #d1d5db;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.form-input {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.form-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.form-input::placeholder {
  color: #9ca3af;
}

.ip-mode-buttons {
  display: flex;
  gap: 1rem;
}

.ip-mode-button {
  flex: 1;
  padding: 0.75rem;
  border-radius: 0.5rem;
  border: 1px solid;
  transition: all 0.2s ease;
  cursor: pointer;
  text-align: center;
  font-weight: 500;
}

.ip-mode-button.active {
  border-color: #3b82f6;
  background: #3b82f6;
  color: white;
}

.ip-mode-button:not(.active) {
  border-color: #4b5563;
  background: rgba(71, 85, 105, 0.5);
  color: #d1d5db;
}

.ip-mode-button:not(.active):hover {
  background: rgba(71, 85, 105, 0.7);
}

.form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

@media (max-width: 768px) {
  .form-grid {
    grid-template-columns: 1fr;
  }
}

.modal-actions {
  display: flex;
  gap: 0.75rem;
  margin-top: 1.5rem;
}

.modal-button {
  flex: 1;
  padding: 0.75rem;
  border-radius: 0.5rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.modal-button.secondary {
  background: #4b5563;
  color: white;
}

.modal-button.secondary:hover {
  background: #374151;
}

.modal-button.primary {
  background: #3b82f6;
  color: white;
}

.modal-button.primary:hover {
  background: #2563eb;
}

.modal-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.info-box {
  background: rgba(59, 130, 246, 0.1);
  border: 1px solid rgba(59, 130, 246, 0.2);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-top: 1rem;
}

.info-content {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.info-icon {
  color: #60a5fa;
  font-size: 1.125rem;
  margin-top: 0.125rem;
  flex-shrink: 0;
}

.info-text {
  color: #dbeafe;
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.info-description {
  color: rgba(219, 234, 254, 0.8);
  font-size: 0.875rem;
}

.info-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
}

.info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

@media (max-width: 768px) {
  .info-grid {
    grid-template-columns: 1fr;
  }
}

.info-item h4 {
  color: white;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.info-item p {
  color: #9ca3af;
  font-size: 0.875rem;
  line-height: 1.5;
}

/* Toggle Switch Styles */
.toggle-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem 0;
}

.toggle-label {
  color: #d1d5db;
  font-weight: 500;
}

.toggle-switch {
  position: relative;
  display: inline-flex;
  height: 1.5rem;
  width: 2.75rem;
  align-items: center;
  border-radius: 9999px;
  transition: background-color 0.2s ease;
  cursor: pointer;
  border: none;
}

.toggle-switch.enabled {
  background-color: #16a34a;
}

.toggle-switch:not(.enabled) {
  background-color: #4b5563;
}

.toggle-switch-knob {
  display: inline-block;
  height: 1rem;
  width: 1rem;
  border-radius: 9999px;
  background-color: white;
  transition: transform 0.2s ease;
}

.toggle-switch.enabled .toggle-switch-knob {
  transform: translateX(1.25rem);
}

.toggle-switch:not(.enabled) .toggle-switch-knob {
  transform: translateX(0.25rem);
}

/* Responsive Design */
@media (max-width: 768px) {
  .interface-settings-page {
    padding: 1rem;
  }

  .page-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .header-actions {
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .interface-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .interface-actions {
    width: 100%;
    justify-content: space-between;
  }

  .interface-details {
    grid-template-columns: 1fr;
  }

  .modal-content {
    margin: 1rem;
    max-width: calc(100% - 2rem);
  }

  .modal-actions {
    flex-direction: column;
  }

  .ip-mode-buttons {
    flex-direction: column;
  }

  .info-grid {
    grid-template-columns: 1fr;
  }
}

/* Animation for interface items */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.interface-item {
  animation: fadeInUp 0.3s ease-out;
}

/* Loading states */
.loading-shimmer {
  background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* Special input styles */
.form-input[type="number"] {
  -moz-appearance: textfield;
}

.form-input[type="number"]::-webkit-outer-spin-button,
.form-input[type="number"]::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* ICS Source Interface Select Styles */
.ics-source-select option {
  background: #1e293b;
  color: white;
  padding: 0.5rem;
}

.ics-source-select option:hover {
  background: #334155;
}

/* ICS Success Animation */
@keyframes icsGlow {
  0% {
    box-shadow: 0 0 5px rgba(34, 197, 94, 0.3);
  }
  50% {
    box-shadow: 0 0 20px rgba(34, 197, 94, 0.6);
  }
  100% {
    box-shadow: 0 0 5px rgba(34, 197, 94, 0.3);
  }
}

.ics-active-indicator {
  animation: icsGlow 2s infinite;
}

/* ICS Form Labels */
.ics-form-label {
  color: #bbf7d0;
  font-weight: 500;
  margin-bottom: 0.5rem;
  display: block;
}

/* ICS Input Styling */
.ics-form-input {
  background: rgba(34, 197, 94, 0.1);
  border: 1px solid rgba(34, 197, 94, 0.3);
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  width: 100%;
}

.ics-form-input:focus {
  outline: none;
  border-color: #22c55e;
  box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.2);
}

.ics-form-input::placeholder {
  color: rgba(187, 247, 208, 0.6);
}

/* ICS Help Text */
.ics-help-text {
  color: rgba(187, 247, 208, 0.7);
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

/* Enhanced ICS Badge for Interface List */
.interface-ics-badge {
  background: linear-gradient(135deg, rgba(34, 197, 94, 0.2), rgba(16, 185, 129, 0.2));
  border: 1px solid rgba(34, 197, 94, 0.4);
  color: #86efac;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 700;
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.interface-ics-icon {
  font-size: 0.625rem;
}

/* ICS Configuration Summary */
.ics-config-summary {
  background: rgba(34, 197, 94, 0.05);
  border: 1px solid rgba(34, 197, 94, 0.2);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-top: 1rem;
}

.ics-config-title {
  color: #bbf7d0;
  font-weight: 600;
  margin-bottom: 0.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.ics-config-details {
  color: rgba(187, 247, 208, 0.8);
  font-size: 0.875rem;
  line-height: 1.4;
}

/* ICS Status Indicator in Interface Cards */
.ics-status-indicator {
  position: absolute;
  top: 0.75rem;
  right: 0.75rem;
  width: 0.75rem;
  height: 0.75rem;
  background: #22c55e;
  border-radius: 50%;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
  }
}


================================================
File: src/pages/InterfaceSettings.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import {
  FaShieldAlt,
  FaServer,
  FaCog,
  FaClock,
  FaExclamationTriangle,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaDatabase,
  FaCheckCircle,
  FaPlus,
  FaTrash,
  FaEdit,
  FaTimes,
  FaSave,
  FaInfoCircle,
  FaWifi,
  FaEthernet
} from 'react-icons/fa';
import { interfaceService } from '../services/interfaceService';
import './InterfaceSettings.css';

console.log('🌐 [INTERFACE] InterfaceSettings component yüklendi');

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchDataStatus();
    const interval = setInterval(fetchDataStatus, 60000);
    return () => clearInterval(interval);
  }, []);

  const fetchDataStatus = async () => {
    try {
      const response = await interfaceService.getDataStatus();
      if (response.success) {
        setDataStatus(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Data status fetch error:', error);
      setIsLoading(false);
    }
  };

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    );
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`;
  };

  const isPersistent = dataStatus?.persistence?.enabled && dataStatus?.persistence?.dataCollection;

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus?.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus?.persistence?.systemUptime || 0)}
      </div>
    </div>
  );
};

const InterfaceSettings = () => {
  console.log('🌐 [INTERFACE] InterfaceSettings component render başladı');
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [activeMenu, setActiveMenu] = useState('interface-settings');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  // Interface Settings State
  const [interfaces, setInterfaces] = useState([]);
  const [availableInterfaces, setAvailableInterfaces] = useState([]);
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingInterface, setEditingInterface] = useState(null);

  // YENİ INTERFACE STATE - ICS ALANLARI DAHİL
  const [newInterface, setNewInterface] = useState({
    name: '',
    ipMode: 'static',
    ipAddress: '',
    subnetMask: '',
    gateway: '',
    primaryDns: '',
    secondaryDns: '',
    mtuSize: '1500',
    vlanId: '',
    enabled: true,
    // YENİ ICS ALANLARI
    icsEnabled: false,
    icsSourceInterface: '',
    dhcpRangeStart: '192.168.100.100',
    dhcpRangeEnd: '192.168.100.200',
    description: ''
  });

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCog },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ];

  useEffect(() => {
    console.log('🌐 [INTERFACE] useEffect başladı');
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    fetchInterfaces();
    fetchAvailableInterfaces();

    return () => {
      console.log('🌐 [INTERFACE] Component unmount, timer temizleniyor');
      clearInterval(timer);
    };
  }, []);

  const fetchInterfaces = async () => {
    try {
      console.log('🌐 [INTERFACE] Interfaces data fetch başladı');
      setIsLoading(true);
      const response = await interfaceService.getInterfaces();
      if (response.success) {
        console.log('🌐 [INTERFACE] Interfaces data başarıyla alındı:', response.data);
        setInterfaces(response.data || []);
      }
    } catch (error) {
      console.error('🌐 [INTERFACE] Interfaces data fetch error:', error);
      toast.error('Ağ arayüzleri alınamadı');
    } finally {
      setIsLoading(false);
    }
  };

  // YENİ FİZİKSEL INTERFACE'LERİ GETIRME FONKSİYONU
  const fetchAvailableInterfaces = async () => {
    try {
      // Fiziksel interface'leri al
      const response = await interfaceService.getPhysicalInterfaces();
      if (response.success) {
        setAvailableInterfaces(response.data || []);
      }
    } catch (error) {
      console.error('Interfaces fetch error:', error);
      // Fallback data
      setAvailableInterfaces([
        { name: 'eth0', display_name: 'Ethernet 1', description: 'Primary Ethernet Interface' },
        { name: 'eth1', display_name: 'Ethernet 2', description: 'Secondary Ethernet Interface' },
        { name: 'wlan0', display_name: 'Wi-Fi', description: 'Wireless Network Interface' }
      ]);
    }
  };

  const handleAddInterface = async () => {
    if (!validateInterface(newInterface)) {
      return;
    }
    try {
      console.log('🌐 [INTERFACE] Interface ekleniyor:', newInterface);
      setIsSaving(true);
      const response = await interfaceService.createInterface(newInterface);
      if (response.success) {
        setInterfaces(prev => [...prev, response.data]);
        toast.success('Ağ arayüzü başarıyla oluşturuldu');
        resetForm();
        setShowAddModal(false);
      }
    } catch (error) {
      console.error('Add interface error:', error);
      toast.error('Ağ arayüzü oluşturulurken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  // GÜNCELLENMİŞ EDIT FONKSİYONU - ICS ALANLARINI DAHIL EDER
  const handleEditInterface = (interfaceItem) => {
    setEditingInterface(interfaceItem);
    setNewInterface({
      name: interfaceItem.name,
      ipMode: interfaceItem.ipMode,
      ipAddress: interfaceItem.ipAddress,
      subnetMask: interfaceItem.subnetMask,
      gateway: interfaceItem.gateway,
      primaryDns: interfaceItem.primaryDns,
      secondaryDns: interfaceItem.secondaryDns,
      mtuSize: interfaceItem.mtuSize.toString(),
      vlanId: interfaceItem.vlanId.toString(),
      enabled: interfaceItem.enabled,
      // YENİ ICS ALANLARI
      icsEnabled: interfaceItem.icsEnabled || false,
      icsSourceInterface: interfaceItem.icsSourceInterface || '',
      dhcpRangeStart: interfaceItem.dhcpRangeStart || '192.168.100.100',
      dhcpRangeEnd: interfaceItem.dhcpRangeEnd || '192.168.100.200',
      description: interfaceItem.description || ''
    });
    setShowAddModal(true);
  };

  const handleUpdateInterface = async () => {
    if (!validateInterface(newInterface)) {
      return;
    }
    try {
      console.log('🌐 [INTERFACE] Interface güncelleniyor:', editingInterface.id, newInterface);
      setIsSaving(true);
      const response = await interfaceService.updateInterface(editingInterface.id, newInterface);
      if (response.success) {
        setInterfaces(prev => prev.map(iface =>
          iface.id === editingInterface.id
            ? { ...iface, ...newInterface, mtuSize: parseInt(newInterface.mtuSize), vlanId: parseInt(newInterface.vlanId) || null }
            : iface
        ));
        toast.success('Ağ arayüzü başarıyla güncellendi');
        resetForm();
        setShowAddModal(false);
        setEditingInterface(null);
      }
    } catch (error) {
      console.error('Update interface error:', error);
      toast.error('Ağ arayüzü güncellenirken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleDeleteInterface = async (interfaceId) => {
    if (!window.confirm('Bu ağ arayüzünü silmek istediğinizden emin misiniz?')) {
      return;
    }
    try {
      console.log('🌐 [INTERFACE] Interface siliniyor:', interfaceId);
      const response = await interfaceService.deleteInterface(interfaceId);
      if (response.success) {
        setInterfaces(prev => prev.filter(iface => iface.id !== interfaceId));
        toast.success('Ağ arayüzü başarıyla silindi');
      }
    } catch (error) {
      console.error('Delete interface error:', error);
      toast.error('Ağ arayüzü silinirken hata oluştu');
    }
  };

  const handleToggleInterface = async (interfaceId, enabled) => {
    try {
      const response = await interfaceService.toggleInterface(interfaceId, enabled);
      if (response.success) {
        setInterfaces(prev => prev.map(iface =>
          iface.id === interfaceId ? { ...iface, enabled } : iface
        ));
        toast.success(`Ağ arayüzü ${enabled ? 'etkinleştirildi' : 'devre dışı bırakıldı'}`);
      }
    } catch (error) {
      console.error('Toggle interface error:', error);
      toast.error('Ağ arayüzü durumu değiştirilemedi');
    }
  };

  // GÜNCELLENMİŞ VALİDASYON FONKSİYONU - ICS VALİDASYONU DAHİL
  const validateInterface = (iface) => {
    if (!iface.name.trim()) {
      toast.error('Arayüz adı gerekli');
      return false;
    }

    if (iface.ipMode === 'static') {
      if (!iface.ipAddress.trim()) {
        toast.error('IP adresi gerekli');
        return false;
      }
      if (!iface.subnetMask.trim()) {
        toast.error('Alt ağ maskesi gerekli');
        return false;
      }

      // IP format validation
      const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
      if (!ipRegex.test(iface.ipAddress)) {
        toast.error('Geçersiz IP adresi formatı');
        return false;
      }
      if (!ipRegex.test(iface.subnetMask)) {
        toast.error('Geçersiz alt ağ maskesi formatı');
        return false;
      }
      if (iface.gateway && !ipRegex.test(iface.gateway)) {
        toast.error('Geçersiz ağ geçidi formatı');
        return false;
      }
      if (iface.primaryDns && !ipRegex.test(iface.primaryDns)) {
        toast.error('Geçersiz birincil DNS formatı');
        return false;
      }
      if (iface.secondaryDns && !ipRegex.test(iface.secondaryDns)) {
        toast.error('Geçersiz ikincil DNS formatı');
        return false;
      }
    }

    // ICS Validation
    if (iface.icsEnabled) {
      if (!iface.icsSourceInterface.trim()) {
        toast.error('ICS için kaynak interface seçilmeli');
        return false;
      }
      if (!iface.dhcpRangeStart.trim()) {
        toast.error('DHCP aralığı başlangıç IP adresi gerekli');
        return false;
      }
      if (!iface.dhcpRangeEnd.trim()) {
        toast.error('DHCP aralığı bitiş IP adresi gerekli');
        return false;
      }
      // DHCP range IP validation
      const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
      if (!ipRegex.test(iface.dhcpRangeStart)) {
        toast.error('Geçersiz DHCP başlangıç IP formatı');
        return false;
      }
      if (!ipRegex.test(iface.dhcpRangeEnd)) {
        toast.error('Geçersiz DHCP bitiş IP formatı');
        return false;
      }
    }

    return true;
  };

  // GÜNCELLENMİŞ RESET FORM FONKSİYONU
  const resetForm = () => {
    setNewInterface({
      name: '',
      ipMode: 'static',
      ipAddress: '',
      subnetMask: '',
      gateway: '',
      primaryDns: '',
      secondaryDns: '',
      mtuSize: '1500',
      vlanId: '',
      enabled: true,
      // YENİ ALANLAR
      icsEnabled: false,
      icsSourceInterface: '',
      dhcpRangeStart: '192.168.100.100',
      dhcpRangeEnd: '192.168.100.200',
      description: ''
    });
    setEditingInterface(null);
  };

  const handleLogout = async () => {
    try {
      console.log('🌐 [INTERFACE] Logout başladı');
      await logout();
      toast.success('Başarıyla çıkış yapıldı');
    } catch (error) {
      console.error('Logout error:', error);
      toast.error('Çıkış yapılırken hata oluştu');
    }
  };

  const handleMenuClick = (menuId) => {
    console.log('🌐 [INTERFACE] Menu tıklandı:', menuId);
    if (menuId === 'interface-settings') {
      console.log('🌐 [INTERFACE] Interface Settings seçildi, activeMenu güncelleniyor');
      setActiveMenu(menuId);
      return;
    }

    // Diğer sayfalara yönlendirmeler
    if (menuId === 'home') {
      console.log('🌐 [INTERFACE] Ana sayfaya yönlendiriliyor');
      navigate('/dashboard');
    } else if (menuId === 'updates') {
      console.log('🌐 [INTERFACE] Updates sayfasına yönlendiriliyor');
      navigate('/updates');
    } else if (menuId === 'reports') {
      console.log('🌐 [INTERFACE] Reports sayfasına yönlendiriliyor');
      navigate('/reports');
    } else if (menuId === 'settings') {
      console.log('🌐 [INTERFACE] Settings sayfasına yönlendiriliyor');
      navigate('/settings');
    } else if (menuId === 'nat-settings') {
      console.log('🌐 [INTERFACE] NAT Settings sayfasına yönlendiriliyor');
      navigate('/nat-settings');
    } else if (menuId === 'dns-management') {
      console.log('🌐 [INTERFACE] DNS Management sayfasına yönlendiriliyor');
      navigate('/dns-management');
    } else if (menuId === 'routes') {
      console.log('🌐 [INTERFACE] Routes sayfasına yönlendiriliyor');
      navigate('/routes');
    } else if (menuId === 'rule-groups') {
      console.log('🌐 [INTERFACE] Rule Groups sayfasına yönlendiriliyor');
      navigate('/rule-groups');
    } else if (menuId === 'logs') {
      console.log('🌐 [INTERFACE] Logs sayfasına yönlendiriliyor');
      navigate('/logs');
    } else if (menuId === 'security-rules') {
      console.log('🌐 [INTERFACE] Security Rules sayfasına yönlendiriliyor');
      navigate('/security-rules');
    } else {
      // Diğer menüler için dashboard'a git
      console.log('🌐 [INTERFACE] Dashboard\'a yönlendiriliyor');
      navigate('/dashboard');
    }
  };

  const StatCard = ({ title, value, icon, color }) => {
    return (
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4 hover:bg-slate-800/70 transition-all duration-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
            <p className="font-bold text-2xl text-white">{value}</p>
          </div>
          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${color}`}>
            {icon}
          </div>
        </div>
      </div>
    );
  };

  const getInterfaceIcon = (type) => {
    switch (type) {
      case 'ethernet':
        return <FaEthernet className="text-blue-400" />;
      case 'wireless':
        return <FaWifi className="text-green-400" />;
      default:
        return <FaNetworkWired className="text-gray-400" />;
    }
  };

  console.log('🌐 [INTERFACE] Component render ediliyor, state:', {
    activeMenu,
    isLoading,
    interfacesCount: interfaces.length
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Ağ Arayüzleri</h2>
                <span className="text-gray-400 text-sm">Network interface yapılandırması ve yönetimi</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    resetForm();
                    setShowAddModal(true);
                  }}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <FaPlus className="text-sm" />
                  <span>Yeni Arayüz</span>
                </button>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">Hoş geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <StatCard
              title="Mevcut Ağ Arayüzleri"
              value={interfaces.length}
              icon={<FaNetworkWired />}
              color="text-blue-400 bg-blue-500/10"
            />
            <StatCard
              title="Aktif Arayüzler"
              value={interfaces.filter(i => i.enabled).length}
              icon={<FaCheckCircle />}
              color="text-green-400 bg-green-500/10"
            />
            <StatCard
              title="Statik IP'ler"
              value={interfaces.filter(i => i.ipMode === 'static').length}
              icon={<FaServer />}
              color="text-purple-400 bg-purple-500/10"
            />
          </div>

          {/* Interfaces List */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <FaNetworkWired className="text-blue-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">Mevcut Ağ Arayüzleri</h3>
                <span className="bg-blue-500/20 text-blue-300 px-2 py-1 rounded-full text-xs font-medium">
                  {interfaces.length} adet
                </span>
              </div>
            </div>

            {/* Interfaces Grid */}
            <div className="space-y-4">
              {interfaces.length > 0 ? (
                interfaces.map((iface) => (
                  <div key={iface.id} className={`bg-slate-900/40 rounded-xl p-6 border border-slate-700/30 hover:bg-slate-900/60 transition-colors ${iface.icsEnabled ? 'interface-card-ics' : ''}`}>
                    <div className="flex items-start justify-between">
                      <div className="flex items-start space-x-4">
                        <div className="w-12 h-12 bg-slate-700/50 rounded-lg flex items-center justify-center">
                          {getInterfaceIcon(iface.type)}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <h4 className="text-white font-semibold text-lg">{iface.name}</h4>
                            <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                              iface.enabled
                                ? 'bg-green-500/20 text-green-300 border border-green-500/30'
                                : 'bg-red-500/20 text-red-300 border border-red-500/30'
                            }`}>
                              {iface.enabled ? 'UP' : 'DOWN'}
                            </span>
                            <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                              iface.ipMode === 'static'
                                ? 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
                                : 'bg-orange-500/20 text-orange-300 border border-orange-500/30'
                            }`}>
                              {iface.ipMode === 'static' ? 'Statik IP' : 'DHCP'}
                            </span>
                            {/* ICS Badge */}
                            {iface.icsEnabled && (
                              <span className="px-3 py-1 rounded-full text-xs font-bold bg-green-500/20 text-green-300 border border-green-500/30">
                                ICS Aktif
                              </span>
                            )}
                          </div>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                            <div>
                              <span className="text-gray-400">IP Adresi:</span>
                              <p className="text-white font-medium">{iface.ipAddress || 'N/A'}</p>
                            </div>
                            <div>
                              <span className="text-gray-400">Alt Ağ Maskesi:</span>
                              <p className="text-white font-medium">{iface.subnetMask || 'N/A'}</p>
                            </div>
                            <div>
                              <span className="text-gray-400">Ağ Geçidi:</span>
                              <p className="text-white font-medium">{iface.gateway || 'N/A'}</p>
                            </div>
                            <div>
                              <span className="text-gray-400">MTU:</span>
                              <p className="text-white font-medium">{iface.mtuSize || 1500}</p>
                            </div>
                          </div>
                          {iface.vlanId && (
                            <div className="mt-2">
                              <span className="text-gray-400 text-sm">VLAN ID: </span>
                              <span className="text-yellow-300 font-medium">{iface.vlanId}</span>
                            </div>
                          )}
                          {/* ICS Info */}
                          {iface.icsEnabled && (
                            <div className="mt-3 p-3 bg-green-500/10 border border-green-500/20 rounded-lg">
                              <p className="text-green-300 text-sm">
                                <strong>Internet Paylaşımı Aktif:</strong> Kaynak {iface.icsSourceInterface} → DHCP {iface.dhcpRangeStart} - {iface.dhcpRangeEnd}
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center space-x-3">
                        <button
                          onClick={() => handleToggleInterface(iface.id, !iface.enabled)}
                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                            iface.enabled ? 'bg-green-600' : 'bg-gray-600'
                          }`}
                        >
                          <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                              iface.enabled ? 'translate-x-6' : 'translate-x-1'
                            }`}
                          />
                        </button>
                        <button
                          onClick={() => handleEditInterface(iface)}
                          className="text-blue-400 hover:text-blue-300 p-2 rounded transition-colors"
                          title="Düzenle"
                        >
                          <FaEdit className="text-sm" />
                        </button>
                        <button
                          onClick={() => handleDeleteInterface(iface.id)}
                          className="text-red-400 hover:text-red-300 p-2 rounded transition-colors"
                          title="Sil"
                        >
                          <FaTrash className="text-sm" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-12">
                  <FaNetworkWired className="text-gray-500 text-4xl mb-4 mx-auto" />
                  <h4 className="text-white font-medium mb-2">Henüz Ağ Arayüzü Yok</h4>
                  <p className="text-gray-400 text-sm mb-6">İlk arayüzünü oluştur</p>
                  <button
                    onClick={() => {
                      resetForm();
                      setShowAddModal(true);
                    }}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 mx-auto"
                  >
                    <FaPlus className="text-sm" />
                    <span>İlk Arayüzünü Oluştur</span>
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Interface Information */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="flex items-center space-x-3 mb-6">
              <FaInfoCircle className="text-blue-400 text-xl" />
              <h3 className="text-white font-semibold text-lg">Ağ Arayüzleri Hakkında</h3>
            </div>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-white font-medium mb-2">Ağ Arayüzleri:</h4>
                  <p className="text-gray-400 text-sm">Ağ bağlantılarını yönetmek ve yapılandırmak için kullanılır. Her arayüz farklı ağ segmentlerine bağlanabilir.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">IP Yapılandırması:</h4>
                  <p className="text-gray-400 text-sm">Statik IP veya DHCP kullanarak ağ adreslemesi yapabilirsiniz. Statik IP sabit adres, DHCP otomatik adres atar.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">VLAN Desteği:</h4>
                  <p className="text-gray-400 text-sm">VLAN ID belirterek sanal ağ segmentleri oluşturabilir ve ağ trafiğini izole edebilirsiniz.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Internet Connection Sharing (ICS):</h4>
                  <p className="text-gray-400 text-sm">Bir interface'den gelen internet bağlantısını diğer cihazlara DHCP ile paylaştırabilirsiniz. NAT ve DHCP server otomatik kurulur.</p>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* Add/Edit Interface Modal */}
      {showAddModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => {
              setShowAddModal(false);
              resetForm();
            }} />
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block w-full max-w-2xl transform overflow-hidden rounded-lg bg-slate-800 text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle">
              <div className="bg-slate-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-white">
                    {editingInterface ? 'Arayüz Düzenle' : 'Yeni Arayüz Ekle'}
                  </h3>
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      resetForm();
                    }}
                    className="rounded-md bg-slate-800 text-gray-400 hover:text-gray-300 focus:outline-none"
                  >
                    <FaTimes />
                  </button>
                </div>
                <div className="space-y-6">
                  {/* Arayüz Adı */}
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Arayüz Adı</label>
                    <input
                      type="text"
                      value={newInterface.name}
                      onChange={(e) => setNewInterface(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Ethernet"
                    />
                  </div>

                  {/* Açıklama */}
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Açıklama</label>
                    <input
                      type="text"
                      value={newInterface.description}
                      onChange={(e) => setNewInterface(prev => ({ ...prev, description: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Bu arayüzün açıklaması"
                    />
                  </div>

                  {/* IP Yapılandırma Modu */}
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">IP Yapılandırma Modu</label>
                    <div className="flex space-x-4">
                      <button
                        onClick={() => setNewInterface(prev => ({ ...prev, ipMode: 'static' }))}
                        className={`flex-1 p-3 rounded-lg border transition-colors ${
                          newInterface.ipMode === 'static'
                            ? 'bg-blue-600 border-blue-500 text-white'
                            : 'bg-slate-700/50 border-slate-600 text-gray-300 hover:bg-slate-700'
                        }`}
                      >
                        Statik IP
                      </button>
                      <button
                        onClick={() => setNewInterface(prev => ({ ...prev, ipMode: 'dhcp' }))}
                        className={`flex-1 p-3 rounded-lg border transition-colors ${
                          newInterface.ipMode === 'dhcp'
                            ? 'bg-orange-600 border-orange-500 text-white'
                            : 'bg-slate-700/50 border-slate-600 text-gray-300 hover:bg-slate-700'
                        }`}
                      >
                        DHCP
                      </button>
                    </div>
                  </div>

                  {/* Statik IP Ayarları */}
                  {newInterface.ipMode === 'static' && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-gray-300 font-medium mb-2">IP Adresi</label>
                        <input
                          type="text"
                          value={newInterface.ipAddress}
                          onChange={(e) => setNewInterface(prev => ({ ...prev, ipAddress: e.target.value }))}
                          className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="192.168.1.10"
                        />
                      </div>
                      <div>
                        <label className="block text-gray-300 font-medium mb-2">Alt Ağ Maskesi</label>
                        <input
                          type="text"
                          value={newInterface.subnetMask}
                          onChange={(e) => setNewInterface(prev => ({ ...prev, subnetMask: e.target.value }))}
                          className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="255.255.255.0"
                        />
                      </div>
                      <div>
                        <label className="block text-gray-300 font-medium mb-2">Ağ Geçidi</label>
                        <input
                          type="text"
                          value={newInterface.gateway}
                          onChange={(e) => setNewInterface(prev => ({ ...prev, gateway: e.target.value }))}
                          className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="192.168.1.1"
                        />
                      </div>
                      <div>
                        <label className="block text-gray-300 font-medium mb-2">Birincil DNS</label>
                        <input
                          type="text"
                          value={newInterface.primaryDns}
                          onChange={(e) => setNewInterface(prev => ({ ...prev, primaryDns: e.target.value }))}
                          className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="8.8.8.8"
                        />
                      </div>
                      <div>
                        <label className="block text-gray-300 font-medium mb-2">İkincil DNS</label>
                        <input
                          type="text"
                          value={newInterface.secondaryDns}
                          onChange={(e) => setNewInterface(prev => ({ ...prev, secondaryDns: e.target.value }))}
                          className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="8.8.4.4"
                        />
                      </div>
                    </div>
                  )}

                  {/* Gelişmiş Ayarlar */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-gray-300 font-medium mb-2">MTU Boyutu</label>
                      <input
                        type="number"
                        min="576"
                        max="9000"
                        value={newInterface.mtuSize}
                        onChange={(e) => setNewInterface(prev => ({ ...prev, mtuSize: e.target.value }))}
                        className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="1500"
                      />
                      <p className="text-gray-500 text-xs mt-1">576-9000 arası değer girin</p>
                    </div>
                    <div>
                      <label className="block text-gray-300 font-medium mb-2">VLAN ID</label>
                      <input
                        type="number"
                        min="1"
                        max="4094"
                        value={newInterface.vlanId}
                        onChange={(e) => setNewInterface(prev => ({ ...prev, vlanId: e.target.value }))}
                        className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="100"
                      />
                      <p className="text-gray-500 text-xs mt-1">İsteğe bağlı, 1-4094 arası</p>
                    </div>
                  </div>

                  {/* Internet Connection Sharing (ICS) */}
                  {newInterface.ipMode === 'static' && (
                    <div className="border-t border-slate-600 pt-6">
                      <h4 className="text-white font-medium mb-4">Internet Connection Sharing (ICS)</h4>
                      <div className="space-y-4">
                        <div className="flex items-center space-x-3">
                          <label className="flex items-center cursor-pointer">
                            <input
                              type="checkbox"
                              checked={newInterface.icsEnabled}
                              onChange={(e) => setNewInterface(prev => ({ ...prev, icsEnabled: e.target.checked }))}
                              className="sr-only"
                            />
                            <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                              newInterface.icsEnabled ? 'bg-green-600' : 'bg-gray-600'
                            }`}>
                              <span
                                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                  newInterface.icsEnabled ? 'translate-x-6' : 'translate-x-1'
                                }`}
                              />
                            </div>
                            <span className="ml-3 text-gray-300 font-medium">Internet Paylaşımını Etkinleştir</span>
                          </label>
                        </div>
                        {newInterface.icsEnabled && (
                          <>
                            <div>
                              <label className="block text-gray-300 font-medium mb-2">Kaynak Interface (İnternet)</label>
                              <select
                                value={newInterface.icsSourceInterface}
                                onChange={(e) => setNewInterface(prev => ({ ...prev, icsSourceInterface: e.target.value }))}
                                className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              >
                                <option value="">İnternet bağlantısı olan interface'i seçin</option>
                                {availableInterfaces.map((iface) => (
                                  <option key={iface.name} value={iface.name}>
                                    {iface.display_name} ({iface.name})
                                  </option>
                                ))}
                              </select>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <label className="block text-gray-300 font-medium mb-2">DHCP Aralığı Başlangıç</label>
                                <input
                                  type="text"
                                  value={newInterface.dhcpRangeStart}
                                  onChange={(e) => setNewInterface(prev => ({ ...prev, dhcpRangeStart: e.target.value }))}
                                  className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                  placeholder="192.168.100.100"
                                />
                              </div>
                              <div>
                                <label className="block text-gray-300 font-medium mb-2">DHCP Aralığı Bitiş</label>
                                <input
                                  type="text"
                                  value={newInterface.dhcpRangeEnd}
                                  onChange={(e) => setNewInterface(prev => ({ ...prev, dhcpRangeEnd: e.target.value }))}
                                  className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                  placeholder="192.168.100.200"
                                />
                              </div>
                            </div>
                          </>
                        )}
                      </div>
                    </div>
                  )}

                  {/* ICS Bilgilendirmesi */}
                  {newInterface.icsEnabled && (
                    <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
                      <div className="flex items-start space-x-3">
                        <FaInfoCircle className="text-green-400 text-lg mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-green-200 font-medium mb-1">Internet Paylaşımı Aktif</p>
                          <p className="text-green-200/80 text-sm">
                            Bu interface diğer cihazlara internet erişimi sağlayacak. Kaynak interface'den gelen internet bağlantısı
                            bu interface üzerinden DHCP ile paylaşılacak. Bu işlem NAT kuralları ve DHCP server kurulumu gerektirir.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Arayüz Etkinleştir */}
                  <div className="flex items-center justify-between">
                    <span className="text-gray-300 font-medium">Arayüz Etkinleştir (UP/DOWN Durumu)</span>
                    <button
                      onClick={() => setNewInterface(prev => ({ ...prev, enabled: !prev.enabled }))}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        newInterface.enabled ? 'bg-green-600' : 'bg-gray-600'
                      }`}
                    >
                      <span
                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                          newInterface.enabled ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>
                </div>

                {/* Arayüz Bilgilendirmesi */}
                <div className="mt-6 bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                  <div className="flex items-start space-x-3">
                    <FaInfoCircle className="text-blue-400 text-lg mt-0.5 flex-shrink-0" />
                    <div>
                      <p className="text-blue-200 font-medium mb-1">Ağ Arayüzü Bilgilendirmesi</p>
                      <p className="text-blue-200/80 text-sm">
                        Statik IP yapılandırması manuel ayarlar gerektirir. DHCP otomatik IP atar. VLAN ID sanal ağ segmentleri için kullanılır.
                        ICS özelliği ile internet bağlantınızı diğer cihazlarla paylaşabilirsiniz.
                      </p>
                    </div>
                  </div>
                </div>

                <div className="mt-6 flex space-x-3">
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      resetForm();
                    }}
                    className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    İptal
                  </button>
                  <button
                    onClick={editingInterface ? handleUpdateInterface : handleAddInterface}
                    disabled={isSaving}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors disabled:opacity-50 flex items-center justify-center space-x-2"
                  >
                    {isSaving ? (
                      <>
                        <FaSync className="animate-spin" />
                        <span>{editingInterface ? 'Güncelleniyor...' : 'Oluşturuluyor...'}</span>
                      </>
                    ) : (
                      <>
                        <FaSave />
                        <span>Kaydet</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InterfaceSettings;


================================================
File: src/pages/Login.jsx
================================================
import React, { useState, useEffect } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { toast } from 'react-hot-toast'
import { useAuth } from '../contexts/AuthContext'

console.log('🔑 [LOGIN] Login component dosyası yüklendi')

const Login = () => {
  console.log('🔑 [LOGIN] Login component render başladı')

  const [formData, setFormData] = useState({
    username: '',
    password: ''
  })
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [rememberMe, setRememberMe] = useState(false)

  const navigate = useNavigate()
  const location = useLocation()

  // Auth hook'u güvenli şekilde kullan
  let authHook
  try {
    authHook = useAuth()
    console.log('✅ [LOGIN] useAuth hook başarılı')
  } catch (error) {
    console.error('❌ [LOGIN] useAuth hook hatası:', error)
    authHook = {
      login: async () => ({ success: false, error: 'Auth context hatası' }),
      isAuthenticated: false,
      isLoading: false
    }
  }

  const { login, isAuthenticated, isLoading: authLoading } = authHook

  console.log('🔑 [LOGIN] Auth state:', { isAuthenticated, authLoading })

  // Redirect if already authenticated
  useEffect(() => {
    console.log('🔄 [LOGIN] useEffect - auth redirect kontrolü')
    if (isAuthenticated && !authLoading) {
      const from = location.state?.from?.pathname || '/dashboard'
      console.log('✅ [LOGIN] Already authenticated, redirecting to:', from)
      navigate(from, { replace: true })
    }
  }, [isAuthenticated, authLoading, navigate, location])

  // Remember me durumunu kontrol et
  useEffect(() => {
    const savedRememberMe = localStorage.getItem('rememberMe')
    const savedUsername = localStorage.getItem('savedUsername')

    if (savedRememberMe === 'true' && savedUsername) {
      setRememberMe(true)
      setFormData(prev => ({
        ...prev,
        username: savedUsername
      }))
      console.log('🔄 [LOGIN] Remember me data restored')
    }
  }, [])

  // Show loading while checking auth status
  if (authLoading) {
    console.log('⏳ [LOGIN] Auth loading state')
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <div className="relative mb-6">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full shadow-2xl">
              <div className="w-8 h-8 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
            </div>
            <div className="absolute inset-0 rounded-full border-4 border-blue-500/30 animate-ping"></div>
          </div>
          <div className="flex items-center justify-center space-x-3 mb-4">
            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
            <span className="text-white text-lg font-medium">Giriş durumu kontrol ediliyor...</span>
            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
          </div>
        </div>
      </div>
    )
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    console.log('📝 [LOGIN] Form data changed:', { [name]: '***' })
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    console.log('🚀 [LOGIN] Form submit')

    if (!formData.username.trim() || !formData.password.trim()) {
      console.log('❌ [LOGIN] Validation failed')
      toast.error('Kullanıcı adı ve parola gerekli')
      return
    }

    setIsLoading(true)
    console.log('🔄 [LOGIN] Loading state true')

    try {
      console.log('📤 [LOGIN] Login çağrısı yapılıyor...')
      const result = await login({
        username: formData.username.trim(),
        password: formData.password,
        rememberMe
      })

      console.log('📨 [LOGIN] Login result:', { success: result.success })

      if (result.success) {
        // Remember me işlemi
        if (rememberMe) {
          localStorage.setItem('rememberMe', 'true')
          localStorage.setItem('savedUsername', formData.username.trim())
          console.log('💾 [LOGIN] Remember me data saved')
        } else {
          localStorage.removeItem('rememberMe')
          localStorage.removeItem('savedUsername')
          console.log('🗑️ [LOGIN] Remember me data cleared')
        }

        toast.success('Giriş başarılı! Yönlendiriliyorsunuz...')
        const from = location.state?.from?.pathname || '/dashboard'
        console.log('✅ [LOGIN] Login successful, navigating to:', from)
        navigate(from, { replace: true })
      } else {
        console.log('❌ [LOGIN] Login failed:', result.error)
        toast.error(result.error || 'Giriş yapılırken bir hata oluştu')
      }
    } catch (error) {
      console.error('❌ [LOGIN] Login exception:', error)
      toast.error('Giriş yapılırken bir hata oluştu')
    } finally {
      console.log('🔄 [LOGIN] Loading state false')
      setIsLoading(false)
    }
  }

  console.log('🎨 [LOGIN] Rendering form')

  return (
    <div className="login-container min-h-screen flex items-center justify-center relative overflow-hidden">
      {/* Debug info - sadece development */}
      {process.env.NODE_ENV === 'development' && (
        <div className="absolute top-4 left-4 text-xs text-gray-500 bg-black/20 p-2 rounded">
          <div>Debug: {new Date().toLocaleTimeString()}</div>
          <div>Auth: {isAuthenticated ? 'Yes' : 'No'}</div>
          <div>Loading: {authLoading ? 'Yes' : 'No'}</div>
        </div>
      )}

      {/* Backend Status */}
      <div className="absolute top-6 right-6 flex items-center space-x-2">
        <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
        <span className="text-gray-300 text-sm font-medium">Backend: Port 8000</span>
      </div>

      {/* Main Login Container */}
      <div className="relative z-10 w-full max-w-md mx-4">
        {/* Logo and Title */}
        <div className="text-center mb-8">
          {/* NetGate Logo - Düzeltilmiş firewall/shield icon */}
          <div className="login-logo inline-flex items-center justify-center w-20 h-20 rounded-xl mb-6 shadow-2xl">
            <svg
              className="w-10 h-10 text-white"
              fill="currentColor"
              viewBox="0 0 24 24"
            >
              <path d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M12,7C13.4,7 14.8,8.6 14.8,10.5V11.5C15.4,11.5 16,12.4 16,13V16C16,17.4 15.4,18 14.8,18H9.2C8.6,18 8,17.4 8,16V13C8,12.4 8.6,11.5 9.2,11.5V10.5C9.2,8.6 10.6,7 12,7M12,8.2C11.2,8.2 10.5,8.7 10.5,10.5V11.5H13.5V10.5C13.5,8.7 12.8,8.2 12,8.2Z"/>
            </svg>
          </div>

          {/* Başlık ve spacing düzeltmesi */}
          <h1 className="text-3xl font-bold text-white mb-2">NetGate</h1>
          <p className="text-gray-400 text-sm mb-6">Güvenlik Duvarı Yönetim Paneli</p>
        </div>

        {/* Login Form */}
        <div className="login-form rounded-2xl shadow-2xl p-8">
          <div className="mb-6">
            <h2 className="text-xl font-semibold text-white mb-2">Giriş Yap</h2>
            <p className="text-gray-400 text-sm">Sisteme erişim için bilgilerinizi girin</p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Username Field */}
            <div>
              <label className="block text-gray-300 text-sm font-medium mb-2">
                Kullanıcı Adı
              </label>
              <input
                type="text"
                name="username"
                value={formData.username}
                onChange={handleInputChange}
                className="login-input w-full px-4 py-3 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                placeholder="Kullanıcı adınızı girin"
                disabled={isLoading}
                required
                maxLength={50}
                autoComplete="username"
              />
            </div>

            {/* Password Field */}
            <div>
              <label className="block text-gray-300 text-sm font-medium mb-2">
                Parola
              </label>
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  name="password"
                  value={formData.password}
                  onChange={handleInputChange}
                  className="login-input w-full px-4 py-3 pr-12 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                  placeholder="Parolanızı girin"
                  disabled={isLoading}
                  required
                  maxLength={128}
                  autoComplete="current-password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-300 transition-colors"
                  disabled={isLoading}
                  aria-label={showPassword ? 'Parolayı gizle' : 'Parolayı göster'}
                >
                  {showPassword ? '🙈' : '👁️'}
                </button>
              </div>
            </div>

            {/* Remember Me */}
            <div className="flex items-center">
              <label className="flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={rememberMe}
                  onChange={(e) => setRememberMe(e.target.checked)}
                  className="remember-me-checkbox w-4 h-4 text-blue-600 bg-slate-700 border-slate-600 rounded focus:ring-blue-500 focus:ring-2"
                  disabled={isLoading}
                />
                <span className="ml-2 text-sm text-gray-300">Beni hatırla</span>
              </label>
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              disabled={isLoading || !formData.username.trim() || !formData.password.trim()}
              className="login-button w-full text-white font-semibold py-3 px-4 rounded-lg flex items-center justify-center space-x-2 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <>
                  <div className="login-spinner w-4 h-4 rounded-full"></div>
                  <span>Giriş yapılıyor...</span>
                </>
              ) : (
                <span>Giriş Yap</span>
              )}
            </button>
          </form>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-gray-500 text-sm">NetGate Güvenlik Duvarı v2.0</p>
          <p className="text-gray-600 text-xs mt-1">© 2024 NetGate Security Solutions</p>
        </div>
      </div>
    </div>
  )
}

export default Login


================================================
File: src/pages/Logs.css
================================================
.logs-page {
  padding: 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.logs-icon {
  font-size: 2rem;
}

.page-title h1 {
  color: white;
  font-size: 1.75rem;
  font-weight: 500;
  margin: 0;
}

.page-title p {
  color: #6c757d;
  margin: 0;
  font-size: 0.875rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  transition: all 0.2s ease;
}

.stat-card:hover {
  background: rgba(30, 41, 59, 0.7);
}

.filters-panel {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 2rem;
}

.filters-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.logs-list-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 2rem;
}

.logs-table {
  width: 100%;
  border-collapse: collapse;
}

.logs-table th {
  text-align: left;
  padding: 0.75rem 1rem;
  color: #9ca3af;
  font-weight: 500;
  border-bottom: 1px solid rgba(71, 85, 105, 0.3);
  cursor: pointer;
  user-select: none;
}

.logs-table th:hover {
  color: white;
}

.logs-table td {
  padding: 0.75rem 1rem;
  border-bottom: 1px solid rgba(71, 85, 105, 0.2);
}

.log-row {
  transition: background-color 0.2s ease;
}

.log-row:hover {
  background: rgba(71, 85, 105, 0.2);
}

.log-level-badge {
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 700;
  border: 1px solid;
}

.log-level-allow {
  background: rgba(34, 197, 94, 0.2);
  color: #86efac;
  border-color: rgba(34, 197, 94, 0.3);
}

.log-level-block,
.log-level-deny,
.log-level-drop,
.log-level-reject {
  background: rgba(239, 68, 68, 0.2);
  color: #fca5a5;
  border-color: rgba(239, 68, 68, 0.3);
}

.log-level-warning {
  background: rgba(245, 158, 11, 0.2);
  color: #fcd34d;
  border-color: rgba(245, 158, 11, 0.3);
}

.log-level-error,
.log-level-critical {
  background: rgba(239, 68, 68, 0.2);
  color: #fca5a5;
  border-color: rgba(239, 68, 68, 0.3);
}

.log-level-info {
  background: rgba(59, 130, 246, 0.2);
  color: #93c5fd;
  border-color: rgba(59, 130, 246, 0.3);
}

.log-level-debug {
  background: rgba(107, 114, 128, 0.2);
  color: #d1d5db;
  border-color: rgba(107, 114, 128, 0.3);
}

.empty-state {
  text-align: center;
  padding: 3rem;
}

.empty-state-icon {
  color: #6b7280;
  font-size: 3rem;
  margin-bottom: 1rem;
}

.pagination {
  display: flex;
  align-items: center;
  justify-content: between;
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid rgba(71, 85, 105, 0.3);
}

.pagination-info {
  color: #9ca3af;
  font-size: 0.875rem;
}

.pagination-controls {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.pagination-button {
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  border: 1px solid rgba(71, 85, 105, 0.3);
  background: rgba(71, 85, 105, 0.5);
  color: white;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.pagination-button:hover:not(:disabled) {
  background: rgba(71, 85, 105, 0.7);
}

.pagination-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.pagination-button.active {
  background: #3b82f6;
  border-color: #3b82f6;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  inset: 0;
  z-index: 50;
  background: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background: #1e293b;
  border-radius: 0.75rem;
  padding: 1.5rem;
  width: 100%;
  max-width: 56rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  max-height: 90vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.modal-title {
  color: white;
  font-size: 1.125rem;
  font-weight: 500;
}

.modal-close {
  color: #9ca3af;
  background: transparent;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  border-radius: 0.375rem;
  transition: color 0.2s ease;
}

.modal-close:hover {
  color: #d1d5db;
}

.log-detail-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

@media (max-width: 768px) {
  .log-detail-grid {
    grid-template-columns: 1fr;
  }
}

.log-detail-item {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.log-detail-label {
  color: #9ca3af;
  font-size: 0.875rem;
}

.log-detail-value {
  color: white;
  font-weight: 500;
}

.log-json-viewer {
  background: rgba(15, 23, 42, 0.5);
  border-radius: 0.5rem;
  padding: 1rem;
  max-height: 16rem;
  overflow-y: auto;
  margin-top: 0.5rem;
}

.log-json-code {
  color: #d1d5db;
  font-size: 0.75rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  white-space: pre-wrap;
  word-break: break-all;
}

/* Search Input */
.search-input-container {
  position: relative;
}

.search-input {
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem 0.75rem 0.75rem 2.5rem;
  color: white;
  font-size: 0.875rem;
  width: 100%;
}

.search-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.search-icon {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  color: #9ca3af;
  font-size: 0.875rem;
}

/* Action buttons */
.action-button {
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.action-button.primary {
  background: #3b82f6;
  color: white;
}

.action-button.primary:hover {
  background: #2563eb;
}

.action-button.secondary {
  background: #4b5563;
  color: white;
}

.action-button.secondary:hover {
  background: #374151;
}

.action-button.danger {
  background: #ef4444;
  color: white;
}

.action-button.danger:hover {
  background: #dc2626;
}

.action-button.success {
  background: #10b981;
  color: white;
}

.action-button.success:hover {
  background: #059669;
}

.action-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 768px) {
  .logs-page {
    padding: 1rem;
  }

  .filters-grid {
    grid-template-columns: 1fr;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .logs-table {
    font-size: 0.875rem;
  }

  .logs-table th,
  .logs-table td {
    padding: 0.5rem;
  }

  .modal-content {
    margin: 1rem;
    max-width: calc(100% - 2rem);
  }

  .pagination {
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .pagination-controls {
    flex-wrap: wrap;
    justify-content: center;
  }
}

/* Animation for log items */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.log-row {
  animation: fadeInUp 0.3s ease-out;
}

/* Loading states */
.loading-shimmer {
  background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* Checkbox styling */
input[type="checkbox"] {
  appearance: none;
  background-color: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.25rem;
  width: 1rem;
  height: 1rem;
  cursor: pointer;
  position: relative;
  transition: all 0.2s ease;
}

input[type="checkbox"]:checked {
  background-color: #3b82f6;
  border-color: #3b82f6;
}

input[type="checkbox"]:checked::after {
  content: 'âœ“';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  font-size: 0.75rem;
  font-weight: bold;
}

input[type="checkbox"]:focus {
  outline: none;
  ring: 2px;
  ring-color: rgba(59, 130, 246, 0.5);
}

/* Sort indicators */
.sort-indicator {
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
}

.sort-icon {
  font-size: 0.75rem;
  opacity: 0.7;
}

/* Filter badges */
.filter-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  background: rgba(59, 130, 246, 0.2);
  color: #93c5fd;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 500;
}

.filter-badge-remove {
  cursor: pointer;
  opacity: 0.7;
  transition: opacity 0.2s ease;
}

.filter-badge-remove:hover {
  opacity: 1;
}

/* Info card */
.info-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
}

.info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

@media (max-width: 768px) {
  .info-grid {
    grid-template-columns: 1fr;
  }
}

.info-item h4 {
  color: white;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.info-item p {
  color: #9ca3af;
  font-size: 0.875rem;
  line-height: 1.5;
}


================================================
File: src/pages/Logs.jsx
================================================
import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import {
  FaShieldAlt,
  FaServer,
  FaCog,
  FaClock,
  FaExclamationTriangle,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaDatabase,
  FaCheckCircle,
  FaSearch,
  FaDownload,
  FaTrash,
  FaEye,
  FaFilter,
  FaTimes,
  FaCalendarAlt,
  FaInfoCircle,
  FaBan,
  FaPlay,
  FaExclamationCircle,
  FaChevronUp,
  FaChevronDown,
  FaStop,
  FaWifi,
  FaDesktop,
  FaGlobe as FaInternet,
  FaPlug
} from 'react-icons/fa';
import { logsService } from '../services/logsService';
import { webSocketService } from '../services/websocketService';
import DataPersistenceIndicator from '../components/DataPersistenceIndicator';
import RealTimeIndicator from '../components/RealTimeIndicator';
import './Logs.css';

console.log('ğŸ“Š [LOGS] Enhanced Logs component yÃ¼klendi');

const Logs = () => {
  console.log('ğŸ“Š [LOGS] Enhanced Logs component render baÅŸladÄ±');
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  // ===========================================
  // UI STATE
  // ===========================================
  const [activeMenu, setActiveMenu] = useState('logs');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [isExporting, setIsExporting] = useState(false);

  // ===========================================
  // LOGS STATE
  // ===========================================
  const [logs, setLogs] = useState([]);
  const [totalLogs, setTotalLogs] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(50);

  // ===========================================
  // FILTER STATE
  // ===========================================
  const [filters, setFilters] = useState({
    keyword: '',
    level: 'TÃ¼mÃ¼',
    startDate: '',
    endDate: '',
    sourceIp: '',
    deviceIp: ''
  });

  // ===========================================
  // UI STATE
  // ===========================================
  const [showFilters, setShowFilters] = useState(false);
  const [selectedLogs, setSelectedLogs] = useState([]);
  const [showLogDetail, setShowLogDetail] = useState(false);
  const [selectedLog, setSelectedLog] = useState(null);
  const [sortBy, setSortBy] = useState('timestamp');
  const [sortOrder, setSortOrder] = useState('desc');

  // ===========================================
  // TRAFFIC MONITORING STATE
  // ===========================================
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [monitoringStatus, setMonitoringStatus] = useState(null);
  const [icsInfo, setIcsInfo] = useState(null);

  // ===========================================
  // REAL-TIME STATE
  // ===========================================
  const [realTimeConnection, setRealTimeConnection] = useState(false);
  const [realtimeLogs, setRealtimeLogs] = useState([]);
  const [newLogsCount, setNewLogsCount] = useState(0);

  // ===========================================
  // DASHBOARD STATS STATE
  // ===========================================
  const [dashboardStats, setDashboardStats] = useState({
    total_logs: 0,
    blocked_requests: 0,
    allowed_requests: 0,
    system_warnings: 0,
    connected_devices: 0,
    threats_detected: 0,
    last_updated: null
  });

  // ===========================================
  // DEVICE MANAGEMENT STATE
  // ===========================================
  const [connectedDevices, setConnectedDevices] = useState([]);
  const [selectedDevice, setSelectedDevice] = useState(null);

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'GÃ¼venlik KurallarÄ±', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural GruplarÄ±', icon: FaCog },
    { id: 'interface-settings', label: 'Ä°nterface AyarlarÄ±', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT AyarlarÄ±', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS YÃ¶netimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'GÃ¼ncellemeler', icon: FaSync }
  ];

  const logLevels = [
    'TÃ¼mÃ¼',
    'ALLOW',
    'BLOCK',
    'DENY',
    'DROP',
    'REJECT',
    'INFO',
    'WARNING',
    'ERROR',
    'CRITICAL',
    'DEBUG'
  ];

  // ===========================================
  // EFFECTS
  // ===========================================
  useEffect(() => {
    console.log('ğŸ“Š [LOGS] Main useEffect baÅŸladÄ±');
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    // Initialize all services
    initializeServices();

    // Auto refresh interval
    const refreshInterval = setInterval(() => {
      if (!isLoading) {
        fetchDashboardStats();
        fetchMonitoringStatus();
      }
    }, 30000);

    return () => {
      console.log('ğŸ“Š [LOGS] Component unmount, cleanup yapÄ±lÄ±yor');
      clearInterval(timer);
      clearInterval(refreshInterval);
      webSocketService.disconnect();
    };
  }, []);

  // Fetch logs when filters or pagination changes
  useEffect(() => {
    fetchLogs();
  }, [currentPage, filters, sortBy, sortOrder]);

  // ===========================================
  // INITIALIZATION
  // ===========================================
  const initializeServices = async () => {
    try {
      console.log('ğŸ“Š [LOGS] Services initialize ediliyor');
      // Fetch initial data
      await Promise.all([
        fetchDashboardStats(),
        fetchMonitoringStatus(),
        fetchConnectedDevices(),
        detectICS()
      ]);

      // Setup WebSocket
      setupWebSocket();
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Services initialization error:', error);
    }
  };

  const setupWebSocket = () => {
    try {
      console.log('ğŸ“Š [LOGS] WebSocket setup baÅŸlÄ±yor');

      // WebSocket event listeners
      webSocketService.onNewLog((logData) => {
        console.log('ğŸ“Š [LOGS] Yeni log alÄ±ndÄ±:', logData);
        // Add to realtime buffer
        setRealtimeLogs(prev => [logData, ...prev.slice(0, 99)]);
        setNewLogsCount(prev => prev + 1);

        // If on first page, add to main logs
        if (currentPage === 1) {
          setLogs(prev => [logData, ...prev.slice(0, pageSize - 1)]);
          setTotalLogs(prev => prev + 1);
        }
      });

      webSocketService.onStatsUpdate((statsData) => {
        console.log('ğŸ“Š [LOGS] Stats update alÄ±ndÄ±:', statsData);
        setDashboardStats(statsData);
      });

      webSocketService.onConnectionChange((connected, quality) => {
        console.log('ğŸ“Š [LOGS] WebSocket connection change:', connected, quality);
        setRealTimeConnection(connected);
      });

      webSocketService.onError((error) => {
        console.error('ğŸ“Š [LOGS] WebSocket error:', error);
        toast.error(`Real-time baÄŸlantÄ± hatasÄ±: ${error}`);
      });

      webSocketService.onReconnect((attempts) => {
        console.log('ğŸ“Š [LOGS] WebSocket reconnect attempt:', attempts);
        toast.info(`Real-time baÄŸlantÄ± yeniden kuruluyor... (${attempts}/10)`);
      });

      webSocketService.onMonitoringStatusChange((statusData) => {
        console.log('ğŸ“Š [LOGS] Monitoring status change:', statusData);
        setMonitoringStatus(statusData);
        setIsMonitoring(statusData.is_monitoring || false);
      });

      // Connect
      webSocketService.connect();
    } catch (error) {
      console.error('ğŸ“Š [LOGS] WebSocket setup error:', error);
    }
  };

  // ===========================================
  // DATA FETCHING
  // ===========================================
  const fetchLogs = useCallback(async () => {
    try {
      console.log('ğŸ“Š [LOGS] Logs data fetch baÅŸladÄ±');
      setIsLoading(true);

      const params = {
        page: currentPage,
        limit: pageSize,
        keyword: filters.keyword || undefined,
        level: filters.level !== 'TÃ¼mÃ¼' ? filters.level : undefined,
        device_ip: filters.deviceIp || undefined,
        start_date: filters.startDate || undefined,
        end_date: filters.endDate || undefined
      };

      const response = await logsService.getLogs(params);

      if (response.success) {
        console.log('ğŸ“Š [LOGS] Logs data baÅŸarÄ±yla alÄ±ndÄ±:', response.data);
        setLogs(response.data.logs || []);
        setTotalLogs(response.data.pagination?.total_count || 0);

        // Reset new logs count when data is refreshed
        if (currentPage === 1) {
          setNewLogsCount(0);
        }
      } else {
        console.error('ğŸ“Š [LOGS] Logs fetch failed:', response.error);
        toast.error(response.error);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Logs data fetch error:', error);
      toast.error('Log verileri alÄ±namadÄ±');
    } finally {
      setIsLoading(false);
    }
  }, [currentPage, pageSize, filters]);

  const fetchDashboardStats = useCallback(async () => {
    try {
      const response = await logsService.getDashboardStats();
      if (response.success) {
        setDashboardStats(response.data);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Dashboard stats fetch error:', error);
    }
  }, []);

  const fetchMonitoringStatus = useCallback(async () => {
    try {
      const response = await logsService.getTrafficMonitoringStatus();
      if (response.success) {
        setMonitoringStatus(response.data);
        setIsMonitoring(response.data.is_monitoring || false);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Monitoring status fetch error:', error);
    }
  }, []);

  const fetchConnectedDevices = useCallback(async () => {
    try {
      const response = await logsService.getConnectedDevices();
      if (response.success) {
        setConnectedDevices(response.data);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Connected devices fetch error:', error);
    }
  }, []);

  const detectICS = useCallback(async () => {
    try {
      const response = await logsService.detectICS();
      if (response.success) {
        setIcsInfo(response.data);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] ICS detection error:', error);
    }
  }, []);

  // ===========================================
  // TRAFFIC MONITORING CONTROLS
  // ===========================================
  const handleStartMonitoring = async () => {
    try {
      setIsLoading(true);
      const response = await logsService.startTrafficMonitoring();

      if (response.success) {
        setIsMonitoring(true);
        toast.success(response.message || 'Traffic monitoring baÅŸlatÄ±ldÄ±');

        // Refresh status after a short delay
        setTimeout(() => {
          fetchMonitoringStatus();
          fetchDashboardStats();
        }, 2000);
      } else {
        toast.error(response.error);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Start monitoring error:', error);
      toast.error('Monitoring baÅŸlatÄ±lamadÄ±');
    } finally {
      setIsLoading(false);
    }
  };

  const handleStopMonitoring = async () => {
    try {
      setIsLoading(true);
      const response = await logsService.stopTrafficMonitoring();

      if (response.success) {
        setIsMonitoring(false);
        toast.success(response.message || 'Traffic monitoring durduruldu');

        // Refresh status after a short delay
        setTimeout(() => {
          fetchMonitoringStatus();
        }, 2000);
      } else {
        toast.error(response.error);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Stop monitoring error:', error);
      toast.error('Monitoring durdurulamadÄ±');
    } finally {
      setIsLoading(false);
    }
  };

  // ===========================================
  // FILTER HANDLING
  // ===========================================
  const handleFilterChange = useCallback((key, value) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }));
    setCurrentPage(1); // Reset to first page when filtering
  }, []);

  const handleClearFilters = useCallback(() => {
    setFilters({
      keyword: '',
      level: 'TÃ¼mÃ¼',
      startDate: '',
      endDate: '',
      sourceIp: '',
      deviceIp: ''
    });
    setCurrentPage(1);
    setNewLogsCount(0);
  }, []);

  // ===========================================
  // EXPORT HANDLING
  // ===========================================
  const handleExport = async (format) => {
    try {
      setIsExporting(true);

      const params = {
        keyword: filters.keyword || undefined,
        level: filters.level !== 'TÃ¼mÃ¼' ? filters.level : undefined,
        device_ip: filters.deviceIp || undefined,
        start_date: filters.startDate || undefined,
        end_date: filters.endDate || undefined,
        limit: 50000
      };

      const response = await logsService.exportLogs(format, params);

      if (response.success) {
        toast.success(response.message || `${format.toUpperCase()} dosyasÄ± baÅŸarÄ±yla indirildi`);
      } else {
        toast.error(response.error);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Export error:', error);
      toast.error('DÄ±ÅŸa aktarma iÅŸlemi baÅŸarÄ±sÄ±z');
    } finally {
      setIsExporting(false);
    }
  };

  // ===========================================
  // LOG MANAGEMENT
  // ===========================================
  const handleClearLogs = async () => {
    if (!window.confirm('TÃ¼m loglarÄ± silmek istediÄŸinizden emin misiniz? Bu iÅŸlem geri alÄ±namaz!')) {
      return;
    }

    try {
      const response = await logsService.clearLogs();

      if (response.success) {
        setLogs([]);
        setTotalLogs(0);
        setCurrentPage(1);
        setRealtimeLogs([]);
        setNewLogsCount(0);
        toast.success(response.message || 'Loglar baÅŸarÄ±yla temizlendi');

        // Refresh stats
        fetchDashboardStats();
      } else {
        toast.error(response.error);
      }
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Clear logs error:', error);
      toast.error('Loglar temizlenirken hata oluÅŸtu');
    }
  };

  const handleLogSelect = useCallback((logId) => {
    setSelectedLogs(prev =>
      prev.includes(logId)
        ? prev.filter(id => id !== logId)
        : [...prev, logId]
    );
  }, []);

  const handleSelectAll = useCallback(() => {
    if (selectedLogs.length === logs.length) {
      setSelectedLogs([]);
    } else {
      setSelectedLogs(logs.map(log => log.id));
    }
  }, [selectedLogs.length, logs]);

  const handleViewLogDetail = async (log) => {
    try {
      // Try to get detailed info from backend
      if (log.id) {
        const response = await logsService.getLogDetail(log.id);
        if (response.success) {
          setSelectedLog(response.data);
        } else {
          setSelectedLog(log); // Fallback to existing data
        }
      } else {
        setSelectedLog(log);
      }
      setShowLogDetail(true);
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Log detail fetch error:', error);
      setSelectedLog(log); // Fallback to existing data
      setShowLogDetail(true);
    }
  };

  // ===========================================
  // SORTING
  // ===========================================
  const handleSort = useCallback((column) => {
    if (sortBy === column) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(column);
      setSortOrder('desc');
    }
  }, [sortBy, sortOrder]);

  // ===========================================
  // NAVIGATION
  // ===========================================
  const handleLogout = async () => {
    try {
      console.log('ğŸ“Š [LOGS] Logout baÅŸladÄ±');
      await logout();
      toast.success('BaÅŸarÄ±yla Ã§Ä±kÄ±ÅŸ yapÄ±ldÄ±');
    } catch (error) {
      console.error('ğŸ“Š [LOGS] Logout error:', error);
      toast.error('Ã‡Ä±kÄ±ÅŸ yapÄ±lÄ±rken hata oluÅŸtu');
    }
  };

  const handleMenuClick = useCallback((menuId) => {
    console.log('ğŸ“Š [LOGS] Menu tÄ±klandÄ±:', menuId);
    if (menuId === 'logs') {
      setActiveMenu(menuId);
      return;
    }

    // Navigation
    const routes = {
      'home': '/dashboard',
      'updates': '/updates',
      'reports': '/reports',
      'settings': '/settings',
      'nat-settings': '/nat-settings',
      'dns-management': '/dns-management',
      'routes': '/routes',
      'rule-groups': '/rule-groups',
      'security-rules': '/security-rules',
      'interface-settings': '/interface-settings'
    };

    navigate(routes[menuId] || '/dashboard');
  }, [navigate]);

  // ===========================================
  // UTILITY FUNCTIONS
  // ===========================================
  const getLogLevelColor = useCallback((level) => {
    const colors = {
      'ALLOW': 'text-green-400 bg-green-500/10 border-green-500/30',
      'BLOCK': 'text-red-400 bg-red-500/10 border-red-500/30',
      'DENY': 'text-red-400 bg-red-500/10 border-red-500/30',
      'DROP': 'text-orange-400 bg-orange-500/10 border-orange-500/30',
      'REJECT': 'text-red-400 bg-red-500/10 border-red-500/30',
      'INFO': 'text-blue-400 bg-blue-500/10 border-blue-500/30',
      'WARNING': 'text-yellow-400 bg-yellow-500/10 border-yellow-500/30',
      'ERROR': 'text-red-400 bg-red-500/10 border-red-500/30',
      'CRITICAL': 'text-purple-400 bg-purple-500/10 border-purple-500/30',
      'DEBUG': 'text-gray-400 bg-gray-500/10 border-gray-500/30'
    };
    return colors[level] || 'text-gray-400 bg-gray-500/10 border-gray-500/30';
  }, []);

  const formatTimestamp = useCallback((timestamp) => {
    return new Date(timestamp).toLocaleString('tr-TR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }, []);

  const formatBytes = useCallback((bytes) => {
    if (!bytes || bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }, []);

  // ===========================================
  // MEMOIZED COMPONENTS
  // ===========================================
  const StatCard = React.memo(({ title, value, icon, color, subtitle }) => (
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4 hover:bg-slate-800/70 transition-all duration-200">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
          <p className="font-bold text-2xl text-white">{value}</p>
          {subtitle && <p className="text-gray-500 text-xs mt-1">{subtitle}</p>}
        </div>
        <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${color}`}>
          {icon}
        </div>
      </div>
    </div>
  ));

  const totalPages = Math.ceil(totalLogs / pageSize);

  console.log('ğŸ“Š [LOGS] Component render ediliyor, state:', {
    activeMenu,
    isLoading,
    logsCount: logs.length,
    totalLogs,
    currentPage,
    isMonitoring,
    realTimeConnection
  });

  // ===========================================
  // RENDER
  // ===========================================
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Ã‡Ä±kÄ±ÅŸ Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Ã‡Ä±kÄ±ÅŸ Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Sistem GÃ¼nlÃ¼kleri</h2>
                <span className="text-gray-400 text-sm">GÃ¼venlik duvarÄ± etkinlikleri izleyin ve analiz edin</span>
                <DataPersistenceIndicator />
                <RealTimeIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                    showFilters ? 'bg-blue-600 text-white' : 'bg-slate-700 text-gray-300 hover:bg-slate-600'
                  }`}
                >
                  <FaFilter className="text-sm" />
                  <span>Filtreler ve DÄ±ÅŸa AktarÄ±m</span>
                </button>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">HoÅŸ geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <StatCard
              title="Toplam Log SayÄ±sÄ±"
              value={dashboardStats.total_logs?.toLocaleString() || '0'}
              icon={<FaDatabase />}
              color="text-blue-400 bg-blue-500/10"
              subtitle={`Son gÃ¼ncelleme: ${dashboardStats.last_updated ? new Date(dashboardStats.last_updated).toLocaleTimeString('tr-TR') : 'Bilinmiyor'}`}
            />
            <StatCard
              title="Engellenen Ä°stekler"
              value={dashboardStats.blocked_requests?.toLocaleString() || '0'}
              icon={<FaBan />}
              color="text-red-400 bg-red-500/10"
            />
            <StatCard
              title="Ä°zin Verilen Ä°stekler"
              value={dashboardStats.allowed_requests?.toLocaleString() || '0'}
              icon={<FaCheckCircle />}
              color="text-green-400 bg-green-500/10"
            />
            <StatCard
              title="Sistem UyarÄ±larÄ±"
              value={dashboardStats.system_warnings?.toLocaleString() || '0'}
              icon={<FaExclamationTriangle />}
              color="text-yellow-400 bg-yellow-500/10"
            />
          </div>

          {/* Traffic Monitoring Control Panel */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <FaNetworkWired className="text-blue-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">Traffic Monitoring</h3>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                  isMonitoring
                    ? 'bg-green-500/20 text-green-300'
                    : 'bg-red-500/20 text-red-300'
                }`}>
                  {isMonitoring ? 'Aktif' : 'Devre DÄ±ÅŸÄ±'}
                </span>
                {realTimeConnection && (
                  <span className="flex items-center space-x-1 text-green-400 text-sm">
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                    <span>CanlÄ± BaÄŸlantÄ±</span>
                  </span>
                )}
              </div>
              <div className="flex items-center space-x-3">
                {!isMonitoring ? (
                  <button
                    onClick={handleStartMonitoring}
                    disabled={isLoading}
                    className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <FaPlay className="text-sm" />
                    <span>Monitoring BaÅŸlat</span>
                  </button>
                ) : (
                  <button
                    onClick={handleStopMonitoring}
                    disabled={isLoading}
                    className="flex items-center space-x-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <FaStop className="text-sm" />
                    <span>Monitoring Durdur</span>
                  </button>
                )}
              </div>
            </div>

            {/* Monitoring Status Grid */}
            {monitoringStatus && (
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="bg-slate-900/40 rounded-lg p-4">
                  <p className="text-gray-400 text-sm">Platform</p>
                  <p className="text-white font-medium">{monitoringStatus.platform || 'N/A'}</p>
                </div>
                <div className="bg-slate-900/40 rounded-lg p-4">
                  <p className="text-gray-400 text-sm">Interface</p>
                  <p className="text-white font-medium">{monitoringStatus.interface || 'N/A'}</p>
                </div>
                <div className="bg-slate-900/40 rounded-lg p-4">
                  <p className="text-gray-400 text-sm">Yakalanan Paket</p>
                  <p className="text-white font-medium">{monitoringStatus.packets_captured?.toLocaleString() || '0'}</p>
                </div>
                <div className="bg-slate-900/40 rounded-lg p-4">
                  <p className="text-gray-400 text-sm">Ä°ÅŸlenen Paket</p>
                  <p className="text-white font-medium">{monitoringStatus.packets_processed?.toLocaleString() || '0'}</p>
                </div>
              </div>
            )}

            {/* ICS Information */}
            {icsInfo && (
              <div className="mt-4 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg">
                <div className="flex items-start space-x-3">
                  <FaInfoCircle className="text-blue-400 text-lg mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="text-blue-200 font-medium mb-1">ICS Kurulum Bilgisi</p>
                    <p className="text-blue-200/80 text-sm">
                      Platform: {icsInfo.platform} |
                      WAN: {icsInfo.wan_interface || 'BulunamadÄ±'} |
                      LAN: {icsInfo.lan_interface || 'BulunamadÄ±'}
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Filters Panel */}
          {showFilters && (
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-white font-semibold text-lg">Filtreler ve DÄ±ÅŸa AktarÄ±m</h3>
                <button
                  onClick={() => setShowFilters(false)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <FaTimes />
                </button>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                {/* Anahtar Kelime */}
                <div>
                  <label className="block text-gray-300 font-medium mb-2">Anahtar Kelime</label>
                  <div className="relative">
                    <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm" />
                    <input
                      type="text"
                      value={filters.keyword}
                      onChange={(e) => handleFilterChange('keyword', e.target.value)}
                      placeholder="IP, mesaj aramasÄ±..."
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-10 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>

                {/* Log Seviyesi */}
                <div>
                  <label className="block text-gray-300 font-medium mb-2">Log Seviyesi</label>
                  <select
                    value={filters.level}
                    onChange={(e) => handleFilterChange('level', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {logLevels.map((level) => (
                      <option key={level} value={level}>{level}</option>
                    ))}
                  </select>
                </div>

                {/* BaÅŸlangÄ±Ã§ Tarihi */}
                <div>
                  <label className="block text-gray-300 font-medium mb-2">BaÅŸlangÄ±Ã§ Tarihi</label>
                  <input
                    type="datetime-local"
                    value={filters.startDate}
                    onChange={(e) => handleFilterChange('startDate', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                {/* BitiÅŸ Tarihi */}
                <div>
                  <label className="block text-gray-300 font-medium mb-2">BitiÅŸ Tarihi</label>
                  <input
                    type="datetime-local"
                    value={filters.endDate}
                    onChange={(e) => handleFilterChange('endDate', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>

              <div className="flex items-center justify-between">
                <button
                  onClick={handleClearFilters}
                  className="flex items-center space-x-2 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <FaTimes className="text-sm" />
                  <span>Temizle</span>
                </button>

                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => handleExport('csv')}
                    disabled={isExporting}
                    className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <FaDownload className="text-sm" />
                    <span>CSV</span>
                  </button>

                  <button
                    onClick={() => handleExport('json')}
                    disabled={isExporting}
                    className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <FaDownload className="text-sm" />
                    <span>JSON</span>
                  </button>

                  <button
                    onClick={() => handleExport('pdf')}
                    disabled={isExporting}
                    className="flex items-center space-x-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <FaDownload className="text-sm" />
                    <span>PDF</span>
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Real-time Notification */}
          {newLogsCount > 0 && currentPage === 1 && (
            <div className="mb-4 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                  <span className="text-blue-300 text-sm font-medium">
                    {newLogsCount} yeni log alÄ±ndÄ± ve tabloya eklendi
                  </span>
                </div>
                <button
                  onClick={() => setNewLogsCount(0)}
                  className="text-blue-400 hover:text-blue-300"
                >
                  <FaTimes className="text-sm" />
                </button>
              </div>
            </div>
          )}

          {/* Son Etkinlikler */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <FaChartBar className="text-blue-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">Son Etkinlikler ({pageSize} SonuÃ§)</h3>
                <span className="bg-blue-500/20 text-blue-300 px-2 py-1 rounded-full text-xs font-medium">
                  {totalLogs.toLocaleString()} toplam kayÄ±t
                </span>
                {realTimeConnection && (
                  <span className="bg-green-500/20 text-green-300 px-2 py-1 rounded-full text-xs font-medium flex items-center space-x-1">
                    <FaWifi className="text-xs" />
                    <span>CanlÄ±</span>
                  </span>
                )}
              </div>
              <div className="flex items-center space-x-3">
                <button
                  onClick={fetchLogs}
                  disabled={isLoading}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
                >
                  <FaSync className={`text-sm ${isLoading ? 'animate-spin' : ''}`} />
                  <span>Yenile</span>
                </button>
                <button
                  onClick={handleClearLogs}
                  className="flex items-center space-x-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <FaTrash className="text-sm" />
                  <span>LoglarÄ± Temizle</span>
                </button>
              </div>
            </div>

            {/* Logs Table */}
            <div className="overflow-x-auto">
              {logs.length > 0 ? (
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-slate-700/50">
                      <th className="text-left py-3 px-4">
                        <input
                          type="checkbox"
                          checked={selectedLogs.length === logs.length && logs.length > 0}
                          onChange={handleSelectAll}
                          className="w-4 h-4 text-blue-600 bg-slate-700 border-slate-600 rounded focus:ring-blue-500"
                        />
                      </th>
                      <th
                        className="text-left py-3 px-4 text-gray-400 font-medium cursor-pointer hover:text-white transition-colors"
                        onClick={() => handleSort('timestamp')}
                      >
                        <div className="flex items-center space-x-1">
                          <span>Tarih/Saat</span>
                          {sortBy === 'timestamp' && (
                            sortOrder === 'asc' ? <FaChevronUp className="text-xs" /> : <FaChevronDown className="text-xs" />
                          )}
                        </div>
                      </th>
                      <th
                        className="text-left py-3 px-4 text-gray-400 font-medium cursor-pointer hover:text-white transition-colors"
                        onClick={() => handleSort('source_ip')}
                      >
                        <div className="flex items-center space-x-1">
                          <span>Kaynak IP</span>
                          {sortBy === 'source_ip' && (
                            sortOrder === 'asc' ? <FaChevronUp className="text-xs" /> : <FaChevronDown className="text-xs" />
                          )}
                        </div>
                      </th>
                      <th
                        className="text-left py-3 px-4 text-gray-400 font-medium cursor-pointer hover:text-white transition-colors"
                        onClick={() => handleSort('destination_ip')}
                      >
                        <div className="flex items-center space-x-1">
                          <span>Hedef IP</span>
                          {sortBy === 'destination_ip' && (
                            sortOrder === 'asc' ? <FaChevronUp className="text-xs" /> : <FaChevronDown className="text-xs" />
                          )}
                        </div>
                      </th>
                      <th
                        className="text-left py-3 px-4 text-gray-400 font-medium cursor-pointer hover:text-white transition-colors"
                        onClick={() => handleSort('level')}
                      >
                        <div className="flex items-center space-x-1">
                          <span>Seviye</span>
                          {sortBy === 'level' && (
                            sortOrder === 'asc' ? <FaChevronUp className="text-xs" /> : <FaChevronDown className="text-xs" />
                          )}
                        </div>
                      </th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Mesaj</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Ä°ÅŸlem</th>
                    </tr>
                  </thead>
                  <tbody>
                    {logs.map((log, index) => (
                      <tr key={log.id || index} className="border-b border-slate-700/30 hover:bg-slate-700/20 transition-colors">
                        <td className="py-3 px-4">
                          <input
                            type="checkbox"
                            checked={selectedLogs.includes(log.id)}
                            onChange={() => handleLogSelect(log.id)}
                            className="w-4 h-4 text-blue-600 bg-slate-700 border-slate-600 rounded focus:ring-blue-500"
                          />
                        </td>
                        <td className="py-3 px-4 text-gray-300 text-sm font-mono">
                          <div>{formatTimestamp(log.timestamp)}</div>
                          <div className="text-gray-500 text-xs">{log.timezone || 'UTC+3'}</div>
                        </td>
                        <td className="py-3 px-4">
                          <div className="text-white font-medium">{log.source_ip}</div>
                          {log.source_port && (
                            <div className="text-gray-400 text-xs">Port: {log.source_port}</div>
                          )}
                        </td>
                        <td className="py-3 px-4">
                          <div className="text-white font-medium">{log.destination_ip}</div>
                          {log.destination_port && (
                            <div className="text-gray-400 text-xs">Port: {log.destination_port}</div>
                          )}
                        </td>
                        <td className="py-3 px-4">
                          <span className={`px-3 py-1 rounded-full text-xs font-bold border ${getLogLevelColor(log.level)}`}>
                            {log.level}
                          </span>
                        </td>
                        <td className="py-3 px-4">
                          <div className="text-white max-w-md truncate" title={log.message}>
                            {log.message}
                          </div>
                          {log.application && log.application !== 'UNKNOWN' && (
                            <div className="text-gray-400 text-xs mt-1">
                              {log.protocol}: {log.application}
                            </div>
                          )}
                          {log.blocked && (
                            <div className="text-red-400 text-xs mt-1 flex items-center space-x-1">
                              <FaBan className="text-xs" />
                              <span>Engellendi</span>
                            </div>
                          )}
                          {log.threat_detected && (
                            <div className="text-orange-400 text-xs mt-1 flex items-center space-x-1">
                              <FaExclamationTriangle className="text-xs" />
                              <span>Tehdit Tespit Edildi</span>
                            </div>
                          )}
                        </td>
                        <td className="py-3 px-4">
                          <button
                            onClick={() => handleViewLogDetail(log)}
                            className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm transition-colors"
                          >
                            <FaEye className="text-xs" />
                            <span>Ä°ncele</span>
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <div className="text-center py-12">
                  <FaDatabase className="text-gray-500 text-4xl mb-4 mx-auto" />
                  <h4 className="text-white font-medium mb-2">
                    {isLoading ? 'Loglar yÃ¼kleniyor...' : 'HenÃ¼z log kaydÄ± yok'}
                  </h4>
                  <p className="text-gray-400 text-sm mb-6">
                    {isLoading ? 'LÃ¼tfen bekleyin...' : isMonitoring ? 'Traffic monitoring aktif, loglar yakÄ±nda gÃ¶rÃ¼necek' : 'Traffic monitoring baÅŸlatarak log toplamaya baÅŸlayÄ±n'}
                  </p>
                  {!isMonitoring && !isLoading && (
                    <button
                      onClick={handleStartMonitoring}
                      className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 mx-auto"
                    >
                      <FaPlay className="text-sm" />
                      <span>Traffic Monitoring BaÅŸlat</span>
                    </button>
                  )}
                </div>
              )}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center justify-between mt-6 pt-6 border-t border-slate-700/50">
                <div className="text-gray-400 text-sm">
                  Sayfa {currentPage} / {totalPages} ({totalLogs.toLocaleString()} toplam kayÄ±t)
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="flex items-center space-x-2 bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <FaChevronLeft className="text-sm" />
                    <span>Ã–nceki</span>
                  </button>
                  <div className="flex items-center space-x-1">
                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                      let pageNum;
                      if (totalPages <= 5) {
                        pageNum = i + 1;
                      } else if (currentPage <= 3) {
                        pageNum = i + 1;
                      } else if (currentPage >= totalPages - 2) {
                        pageNum = totalPages - 4 + i;
                      } else {
                        pageNum = currentPage - 2 + i;
                      }
                      return (
                        <button
                          key={pageNum}
                          onClick={() => setCurrentPage(pageNum)}
                          className={`w-10 h-10 rounded-lg text-sm font-medium transition-colors ${
                            currentPage === pageNum
                              ? 'bg-blue-600 text-white'
                              : 'bg-slate-700 text-gray-300 hover:bg-slate-600'
                          }`}
                        >
                          {pageNum}
                        </button>
                      );
                    })}
                  </div>
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="flex items-center space-x-2 bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <span>Sonraki</span>
                    <FaChevronRight className="text-sm" />
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Connected Devices Panel */}
          {connectedDevices.length > 0 && (
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
              <div className="flex items-center space-x-3 mb-6">
                <FaDesktop className="text-green-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">BaÄŸlÄ± Cihazlar</h3>
                <span className="bg-green-500/20 text-green-300 px-2 py-1 rounded-full text-xs font-medium">
                  {connectedDevices.length} aktif cihaz
                </span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {connectedDevices.slice(0, 6).map((device, index) => (
                  <div key={device.device_ip || index} className="bg-slate-900/40 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-white font-medium">{device.device_ip}</span>
                      <span className={`w-2 h-2 rounded-full ${device.is_online ? 'bg-green-400' : 'bg-red-400'}`}></span>
                    </div>
                    <div className="text-gray-400 text-sm">
                      <div>Hostname: {device.hostname || 'N/A'}</div>
                      <div>Paket: {device.total_packets?.toLocaleString() || '0'}</div>
                      <div>Veri: {formatBytes(device.total_bytes || 0)}</div>
                    </div>
                  </div>
                ))}
              </div>
              {connectedDevices.length > 6 && (
                <div className="text-center mt-4">
                  <span className="text-gray-400 text-sm">
                    +{connectedDevices.length - 6} daha fazla cihaz
                  </span>
                </div>
              )}
            </div>
          )}

          {/* Log Information */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="flex items-center space-x-3 mb-6">
              <FaInfoCircle className="text-blue-400 text-xl" />
              <h3 className="text-white font-semibold text-lg">Sistem GÃ¼nlÃ¼kleri HakkÄ±nda</h3>
            </div>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-white font-medium mb-2">Log Seviyeleri:</h4>
                  <p className="text-gray-400 text-sm">ALLOW (Ä°zin), BLOCK/DENY/DROP/REJECT (Engelleme), WARNING (UyarÄ±), ERROR (Hata), CRITICAL (Kritik), INFO (Bilgi), DEBUG (Hata AyÄ±klama)</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">GerÃ§ek ZamanlÄ± Ä°zleme:</h4>
                  <p className="text-gray-400 text-sm">Loglar WebSocket ile anlÄ±k olarak gÃ¼ncellenir. BaÄŸlantÄ± durumu Ã¼st menÃ¼de gÃ¶sterilir.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Traffic Monitoring:</h4>
                  <p className="text-gray-400 text-sm">ICS (Internet Connection Sharing) trafiÄŸini yakalayarak tÃ¼m aÄŸ etkinliklerini izler.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">DÄ±ÅŸa AktarÄ±m:</h4>
                  <p className="text-gray-400 text-sm">LoglarÄ± CSV, JSON veya PDF formatÄ±nda dÄ±ÅŸa aktarabilir, analiz iÃ§in kullanabilirsiniz.</p>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* Log Detail Modal */}
      {showLogDetail && selectedLog && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowLogDetail(false)} />
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block w-full max-w-4xl transform overflow-hidden rounded-lg bg-slate-800 text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle">
              <div className="bg-slate-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-white">Log DetaylarÄ±</h3>
                  <button
                    onClick={() => setShowLogDetail(false)}
                    className="rounded-md bg-slate-800 text-gray-400 hover:text-gray-300 focus:outline-none"
                  >
                    <FaTimes />
                  </button>
                </div>
                <div className="space-y-6">
                  {/* Temel Bilgiler */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-gray-400 text-sm">Zaman DamgasÄ±</label>
                      <p className="text-white font-medium">{formatTimestamp(selectedLog.timestamp)}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Log Seviyesi</label>
                      <div>
                        <span className={`px-3 py-1 rounded-full text-xs font-bold border ${getLogLevelColor(selectedLog.level)}`}>
                          {selectedLog.level}
                        </span>
                      </div>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Kaynak IP</label>
                      <p className="text-white font-medium">{selectedLog.source_ip}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Kaynak Port</label>
                      <p className="text-white font-medium">{selectedLog.source_port || 'N/A'}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Hedef IP</label>
                      <p className="text-white font-medium">{selectedLog.destination_ip}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Hedef Port</label>
                      <p className="text-white font-medium">{selectedLog.destination_port || 'N/A'}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Protokol</label>
                      <p className="text-white font-medium">{selectedLog.protocol || 'N/A'}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Uygulama</label>
                      <p className="text-white font-medium">{selectedLog.application || 'N/A'}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Cihaz IP</label>
                      <p className="text-white font-medium">{selectedLog.device_ip || 'N/A'}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Veri Boyutu</label>
                      <p className="text-white font-medium">{formatBytes(selectedLog.bytes_transferred || 0)}</p>
                    </div>
                  </div>

                  {/* Mesaj */}
                  <div>
                    <label className="text-gray-400 text-sm">Mesaj</label>
                    <div className="bg-slate-900/50 rounded-lg p-4 mt-2">
                      <p className="text-white">{selectedLog.message}</p>
                    </div>
                  </div>

                  {/* GÃ¼venlik Bilgileri */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-gray-400 text-sm">Engellendi</label>
                      <div className="flex items-center space-x-2 mt-1">
                        {selectedLog.blocked ? (
                          <>
                            <FaBan className="text-red-400 text-sm" />
                            <span className="text-red-400 font-medium">Evet</span>
                          </>
                        ) : (
                          <>
                            <FaCheckCircle className="text-green-400 text-sm" />
                            <span className="text-green-400 font-medium">HayÄ±r</span>
                          </>
                        )}
                      </div>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Tehdit Tespit Edildi</label>
                      <div className="flex items-center space-x-2 mt-1">
                        {selectedLog.threat_detected ? (
                          <>
                            <FaExclamationTriangle className="text-orange-400 text-sm" />
                            <span className="text-orange-400 font-medium">Evet</span>
                          </>
                        ) : (
                          <>
                            <FaCheckCircle className="text-green-400 text-sm" />
                            <span className="text-green-400 font-medium">HayÄ±r</span>
                          </>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Ek Detaylar */}
                  {selectedLog.details && Object.keys(selectedLog.details).length > 0 && (
                    <div>
                      <label className="text-gray-400 text-sm">Ek Detaylar</label>
                      <div className="bg-slate-900/50 rounded-lg p-4 mt-2">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {selectedLog.details.http_method && (
                            <div>
                              <span className="text-gray-400 text-xs">HTTP Method:</span>
                              <p className="text-white text-sm">{selectedLog.details.http_method}</p>
                            </div>
                          )}
                          {selectedLog.details.http_url && (
                            <div>
                              <span className="text-gray-400 text-xs">HTTP URL:</span>
                              <p className="text-white text-sm break-all">{selectedLog.details.http_url}</p>
                            </div>
                          )}
                          {selectedLog.details.http_host && (
                            <div>
                              <span className="text-gray-400 text-xs">HTTP Host:</span>
                              <p className="text-white text-sm">{selectedLog.details.http_host}</p>
                            </div>
                          )}
                          {selectedLog.details.dns_query && (
                            <div>
                              <span className="text-gray-400 text-xs">DNS Query:</span>
                              <p className="text-white text-sm">{selectedLog.details.dns_query}</p>
                            </div>
                          )}
                          {selectedLog.details.http_user_agent && (
                            <div className="md:col-span-2">
                              <span className="text-gray-400 text-xs">User Agent:</span>
                              <p className="text-white text-sm break-all">{selectedLog.details.http_user_agent}</p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* CoÄŸrafi Bilgiler */}
                  {(selectedLog.geo_country || selectedLog.geo_city) && (
                    <div>
                      <label className="text-gray-400 text-sm">CoÄŸrafi Konum</label>
                      <div className="bg-slate-900/50 rounded-lg p-4 mt-2">
                        <div className="flex items-center space-x-4">
                          <FaGlobe className="text-blue-400" />
                          <div>
                            <p className="text-white">
                              {selectedLog.geo_city && `${selectedLog.geo_city}, `}
                              {selectedLog.geo_country}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* JSON GÃ¶rÃ¼nÃ¼mÃ¼ */}
                  <div>
                    <label className="text-gray-400 text-sm">Tam Log Verisi (JSON)</label>
                    <div className="bg-slate-900/50 rounded-lg p-4 mt-2 max-h-64 overflow-y-auto">
                      <pre className="text-gray-300 text-xs font-mono whitespace-pre-wrap">
                        {JSON.stringify(selectedLog, null, 2)}
                      </pre>
                    </div>
                  </div>
                </div>
                <div className="mt-6 flex justify-end">
                  <button
                    onClick={() => setShowLogDetail(false)}
                    className="bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    Kapat
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Logs;


================================================
File: src/pages/NatSettings.css
================================================
.nat-settings-page {
  padding: 1.5rem;
  max-width: 1200px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.nat-icon {
  font-size: 2rem;
}

.page-title h1 {
  color: white;
  font-size: 1.75rem;
  font-weight: 500;
  margin: 0;
}

.page-title p {
  color: #6c757d;
  margin: 0;
  font-size: 0.875rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

/* Alert Styles - Enhanced */
.alert {
  padding: 1rem 1.25rem;
  border-radius: 0.75rem;
  margin-bottom: 1.5rem;
  border: 1px solid;
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  backdrop-filter: blur(10px);
}

.alert-success {
  background-color: rgba(34, 197, 94, 0.1);
  border-color: rgba(34, 197, 94, 0.3);
  color: #22c55e;
}

.alert-error {
  background-color: rgba(239, 68, 68, 0.1);
  border-color: rgba(239, 68, 68, 0.3);
  color: #ef4444;
}

.alert-warning {
  background-color: rgba(245, 158, 11, 0.1);
  border-color: rgba(245, 158, 11, 0.3);
  color: #f59e0b;
}

.alert ul {
  margin: 0;
  padding-left: 1rem;
}

.alert li {
  margin-bottom: 0.25rem;
}

.alert li:last-child {
  margin-bottom: 0;
}

/* NAT Card Styles */
.nat-card {
  margin-bottom: 1.5rem;
  position: relative;
}

.card-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
}

.card-icon {
  font-size: 1.25rem;
  flex-shrink: 0;
}

.card-header h3 {
  color: white;
  font-size: 1.125rem;
  font-weight: 600;
  margin: 0;
}

.ics-description {
  color: #94a3b8;
  line-height: 1.6;
  margin: 0;
}

/* NAT Status Styles - Enhanced */
.nat-status-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 1rem;
  gap: 1rem;
}

.status-info {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  flex: 1;
}

.status-icon {
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50%;
  background: linear-gradient(135deg, #3b82f6, #1d4ed8);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.25rem;
  flex-shrink: 0;
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.status-controls {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 0.5rem;
}

.status-description {
  color: #94a3b8;
  margin: 0.25rem 0 0 0;
  font-size: 0.875rem;
  line-height: 1.4;
}

/* Interface Grid - Enhanced */
.interface-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
  margin-bottom: 2rem;
}

@media (max-width: 768px) {
  .interface-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
}

.interface-card {
  position: relative;
  transition: all 0.3s ease;
}

.interface-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.interface-card .card-header {
  margin-bottom: 1rem;
}

.interface-icon {
  width: 2.25rem;
  height: 2.25rem;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.25rem;
  flex-shrink: 0;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.wan-icon {
  background: linear-gradient(135deg, #ef4444, #dc2626);
}

.lan-icon {
  background: linear-gradient(135deg, #3b82f6, #1d4ed8);
}

.interface-description {
  color: #94a3b8;
  margin: 0 0 1rem 0;
  font-size: 0.875rem;
  line-height: 1.4;
}

/* Select Styles - Enhanced */
.interface-card select {
  transition: all 0.3s ease;
}

.interface-card select:focus {
  transform: scale(1.02);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.interface-card select:disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

/* Validation Styles - New */
.validation-indicator {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 0.5rem;
  font-size: 0.875rem;
}

.validation-success {
  color: #22c55e;
}

.validation-error {
  color: #ef4444;
}

.validation-warning {
  color: #f59e0b;
}

.validation-loading {
  color: #3b82f6;
}

/* Advanced Settings - New */
.advanced-settings {
  background: rgba(15, 23, 42, 0.5);
  border: 1px solid rgba(51, 65, 85, 0.5);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
}

.advanced-settings .grid {
  gap: 1rem;
}

.advanced-settings label {
  display: block;
  color: #e2e8f0;
  font-size: 0.875rem;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.advanced-settings input[type="text"] {
  width: 100%;
  background: rgba(51, 65, 85, 0.5);
  border: 1px solid rgba(71, 85, 105, 0.5);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  color: white;
  font-size: 0.875rem;
  transition: all 0.3s ease;
}

.advanced-settings input[type="text"]:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.advanced-settings input[type="checkbox"] {
  width: 1rem;
  height: 1rem;
  accent-color: #3b82f6;
}

/* Action Buttons - Enhanced */
.save-section {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-bottom: 2rem;
}

.save-btn {
  padding: 0.875rem 2rem;
  font-size: 1rem;
  font-weight: 600;
  border-radius: 0.75rem;
  transition: all 0.3s ease;
  border: none;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.save-btn:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
}

.save-btn:active:not(:disabled) {
  transform: translateY(0);
}

.save-btn:disabled {
  cursor: not-allowed;
  opacity: 0.6;
  transform: none;
}

/* PC-to-PC Button - New */
.pc-to-pc-btn {
  background: linear-gradient(135deg, #22c55e, #16a34a);
  color: white;
  padding: 0.875rem 2rem;
  font-size: 1rem;
  font-weight: 600;
  border-radius: 0.75rem;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
}

.pc-to-pc-btn:hover:not(:disabled) {
  background: linear-gradient(135deg, #16a34a, #15803d);
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(34, 197, 94, 0.4);
}

/* Info Card - Enhanced */
.info-card {
  background: rgba(15, 23, 42, 0.6);
  border: 1px solid rgba(51, 65, 85, 0.6);
  backdrop-filter: blur(10px);
}

.nat-info p {
  color: #94a3b8;
  line-height: 1.6;
  margin-bottom: 1rem;
}

.nat-info p:last-child {
  margin-bottom: 0;
}

.nat-info strong {
  color: #e2e8f0;
  font-weight: 600;
}

/* Loading States - Enhanced */
.loading-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 0.75rem;
  backdrop-filter: blur(4px);
  z-index: 10;
}

.loading-spinner {
  width: 2rem;
  height: 2rem;
  border: 2px solid rgba(148, 163, 184, 0.3);
  border-top: 2px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Status Indicators - New */
.status-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.status-badge.active {
  background: rgba(34, 197, 94, 0.1);
  color: #22c55e;
  border: 1px solid rgba(34, 197, 94, 0.3);
}

.status-badge.inactive {
  background: rgba(239, 68, 68, 0.1);
  color: #ef4444;
  border: 1px solid rgba(239, 68, 68, 0.3);
}

.status-badge.warning {
  background: rgba(245, 158, 11, 0.1);
  color: #f59e0b;
  border: 1px solid rgba(245, 158, 11, 0.3);
}

/* Interface Status Icons - New */
.interface-status {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 0.5rem;
  font-size: 0.875rem;
}

.interface-status.up {
  color: #22c55e;
}

.interface-status.down {
  color: #ef4444;
}

.interface-status.unknown {
  color: #6b7280;
}

/* Toggle Switch - Enhanced */
.toggle-switch {
  position: relative;
  display: inline-flex;
  height: 1.75rem;
  width: 3rem;
  flex-shrink: 0;
  cursor: pointer;
  rounded: 9999px;
  border: 2px solid transparent;
  transition: all 0.3s ease;
}

.toggle-switch:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.toggle-switch.enabled {
  background: linear-gradient(135deg, #22c55e, #16a34a);
}

.toggle-switch.disabled {
  background: #374151;
}

.toggle-switch-thumb {
  pointer-events: none;
  display: inline-block;
  height: 1.25rem;
  width: 1.25rem;
  border-radius: 50%;
  background: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
  transform: translateX(0.125rem);
}

.toggle-switch.enabled .toggle-switch-thumb {
  transform: translateX(1.375rem);
}

/* Responsive Design - Enhanced */
@media (max-width: 1024px) {
  .nat-settings-page {
    padding: 1rem;
  }

  .page-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .interface-grid {
    gap: 1rem;
  }
}

@media (max-width: 768px) {
  .nat-status-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .status-controls {
    width: 100%;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
  }

  .save-section {
    flex-direction: column;
    gap: 0.75rem;
  }

  .save-btn,
  .pc-to-pc-btn {
    width: 100%;
    justify-content: center;
  }

  .advanced-settings .grid {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 640px) {
  .nat-settings-page {
    padding: 0.75rem;
  }

  .page-title {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }

  .interface-card {
    padding: 1rem;
  }

  .alert {
    padding: 0.75rem;
    flex-direction: column;
    gap: 0.5rem;
  }
}

/* Animation Classes - New */
.fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

.slide-up {
  animation: slideUp 0.3s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* Pulse Animation for Loading States */
.pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

/* Hover Effects - Enhanced */
.nat-card:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.interface-card:hover .interface-icon {
  transform: scale(1.05);
}

/* Focus States - Enhanced */
.nat-card:focus-within {
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

/* Success State Animation */
.success-animation {
  animation: successPulse 0.6s ease-in-out;
}

@keyframes successPulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

/* Error State Animation */
.error-animation {
  animation: errorShake 0.5s ease-in-out;
}

@keyframes errorShake {
  0%, 100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  75% {
    transform: translateX(5px);
  }
}


================================================
File: src/pages/NatSettings.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import {
  FaShieldAlt,
  FaServer,
  FaCog,
  FaClock,
  FaExclamationTriangle,
  FaLock,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaDatabase,
  FaCheckCircle,
  FaShare,
  FaInfoCircle,
  FaSave,
  FaWifi,
  FaEthernet,
  FaExclamationCircle,
  FaSpinner
} from 'react-icons/fa';
import { natService } from '../services/natService';
import './NatSettings.css';

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchDataStatus();
    const interval = setInterval(fetchDataStatus, 60000);
    return () => clearInterval(interval);
  }, []);

  const fetchDataStatus = async () => {
    try {
      const response = await natService.getDataStatus();
      if (response.success) {
        setDataStatus(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Data status fetch error:', error);
      setIsLoading(false);
    }
  };

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    );
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`;
  };

  const isPersistent = dataStatus?.persistence?.enabled && dataStatus?.persistence?.dataCollection;
  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'KalÄ±cÄ± Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus?.persistence?.totalActivities?.toLocaleString() || 0} kayÄ±t)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Ã‡alÄ±ÅŸma: {formatUptime(dataStatus?.persistence?.systemUptime || 0)}
      </div>
    </div>
  );
};

const NatSettings = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [activeMenu, setActiveMenu] = useState('nat-settings');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isValidating, setIsValidating] = useState(false);

  // NAT Configuration State - Backend uyumlu
  const [natConfig, setNatConfig] = useState({
    enabled: false,
    wan_interface: '',
    lan_interface: '',
    dhcp_range_start: '192.168.100.100',
    dhcp_range_end: '192.168.100.200',
    gateway_ip: '192.168.100.1',
    masquerade_enabled: true,
    status: 'Devre DÄ±ÅŸÄ±'
  });

  // NAT Status State
  const [natStatus, setNatStatus] = useState({
    enabled: false,
    status: 'disabled',
    ip_forwarding: false,
    masquerade_active: false,
    message: ''
  });

  // Available network interfaces - Backend yapÄ±sÄ±na uygun
  const [availableInterfaces, setAvailableInterfaces] = useState({
    wan_candidates: [],
    lan_candidates: [],
    all_interfaces: []
  });

  const [successMessage, setSuccessMessage] = useState('');
  const [validationErrors, setValidationErrors] = useState([]);
  const [validationWarnings, setValidationWarnings] = useState([]);

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'GÃ¼venlik KurallarÄ±', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural GruplarÄ±', icon: FaCog },
    { id: 'interface-settings', label: 'Interface AyarlarÄ±', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT AyarlarÄ±', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS YÃ¶netimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'GÃ¼ncellemeler', icon: FaSync }
  ];

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    fetchNatData();
    fetchAvailableInterfaces();
    fetchNatStatus();

    // Periodic status update
    const statusInterval = setInterval(fetchNatStatus, 30000);

    return () => {
      clearInterval(timer);
      clearInterval(statusInterval);
    };
  }, []);

  const fetchNatData = async () => {
    try {
      setIsLoading(true);
      const response = await natService.getNatConfig();
      if (response.success) {
        setNatConfig({
          enabled: response.data.enabled || false,
          wan_interface: response.data.wan_interface || '',
          lan_interface: response.data.lan_interface || '',
          dhcp_range_start: response.data.dhcp_range_start || '192.168.100.100',
          dhcp_range_end: response.data.dhcp_range_end || '192.168.100.200',
          gateway_ip: response.data.gateway_ip || '192.168.100.1',
          masquerade_enabled: response.data.masquerade_enabled !== undefined ? response.data.masquerade_enabled : true,
          status: response.data.enabled ? 'Aktif' : 'Devre DÄ±ÅŸÄ±'
        });
      }
    } catch (error) {
      console.error('NAT data fetch error:', error);
      toast.error('NAT konfigÃ¼rasyonu alÄ±namadÄ±');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchAvailableInterfaces = async () => {
    try {
      const response = await natService.getAvailableInterfaces();
      if (response.success) {
        setAvailableInterfaces(response.data);
      }
    } catch (error) {
      console.error('Interfaces fetch error:', error);
      // Set fallback interfaces
      setAvailableInterfaces({
        wan_candidates: [
          {
            name: 'wlan0',
            display_name: 'Wi-Fi',
            type: 'wireless',
            status: 'up',
            description: 'Wi-Fi Interface (wlan0)'
          }
        ],
        lan_candidates: [
          {
            name: 'eth0',
            display_name: 'Ethernet 1',
            type: 'ethernet',
            status: 'up',
            description: 'Ethernet Interface (eth0)'
          }
        ],
        all_interfaces: []
      });
    }
  };

  const fetchNatStatus = async () => {
    try {
      const response = await natService.getNatStatus();
      if (response.success) {
        setNatStatus(response.data);
      }
    } catch (error) {
      console.error('NAT status fetch error:', error);
    }
  };

  const validateInterfaces = async (wanInterface, lanInterface) => {
    if (!wanInterface || !lanInterface) return;

    try {
      setIsValidating(true);
      const response = await natService.validateInterfaces(wanInterface, lanInterface);

      setValidationErrors(response.errors || []);
      setValidationWarnings(response.warnings || []);

      return response.valid;
    } catch (error) {
      console.error('Interface validation error:', error);
      setValidationErrors(['Interface doÄŸrulama baÅŸarÄ±sÄ±z']);
      return false;
    } finally {
      setIsValidating(false);
    }
  };

  const handleNatToggle = async (enabled) => {
    const newConfig = {
      ...natConfig,
      enabled,
      status: enabled ? 'Aktif' : 'Devre DÄ±ÅŸÄ±'
    };

    setNatConfig(newConfig);

    // Validate interfaces if enabling
    if (enabled && newConfig.wan_interface && newConfig.lan_interface) {
      await validateInterfaces(newConfig.wan_interface, newConfig.lan_interface);
    }
  };

  const handleInterfaceChange = async (type, interfaceName) => {
    const newConfig = {
      ...natConfig,
      [type]: interfaceName
    };

    setNatConfig(newConfig);

    // Clear previous validation
    setValidationErrors([]);
    setValidationWarnings([]);

    // Validate if both interfaces are selected
    if (newConfig.wan_interface && newConfig.lan_interface) {
      await validateInterfaces(newConfig.wan_interface, newConfig.lan_interface);
    }
  };

  const handleAdvancedSettingChange = (key, value) => {
    setNatConfig(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleSaveSettings = async () => {
    try {
      setIsSaving(true);

      // Frontend validation
      if (natConfig.enabled && (!natConfig.wan_interface || !natConfig.lan_interface)) {
        toast.error('NAT aktifken WAN ve LAN arayÃ¼zleri seÃ§ilmelidir');
        return;
      }

      if (natConfig.wan_interface === natConfig.lan_interface && natConfig.wan_interface) {
        toast.error('WAN ve LAN arayÃ¼zleri farklÄ± olmalÄ±dÄ±r');
        return;
      }

      // Backend validation
      if (natConfig.enabled) {
        const isValid = await validateInterfaces(natConfig.wan_interface, natConfig.lan_interface);
        if (!isValid) {
          toast.error('Interface doÄŸrulama baÅŸarÄ±sÄ±z. HatalarÄ± kontrol edin.');
          return;
        }
      }

      const response = await natService.updateNatConfig(natConfig);

      if (response.success) {
        setSuccessMessage('NAT ayarlarÄ± baÅŸarÄ±yla kaydedildi');
        toast.success('NAT ayarlarÄ± baÅŸarÄ±yla kaydedildi');

        // Refresh NAT status
        setTimeout(() => {
          fetchNatStatus();
        }, 2000);

        // Clear success message after 3 seconds
        setTimeout(() => {
          setSuccessMessage('');
        }, 3000);
      } else {
        toast.error(response.message || 'NAT ayarlarÄ± kaydedilemedi');
        if (response.errors) {
          setValidationErrors(response.errors);
        }
      }
    } catch (error) {
      console.error('NAT save error:', error);
      toast.error('NAT ayarlarÄ± kaydedilirken hata oluÅŸtu');
    } finally {
      setIsSaving(false);
    }
  };

  const handlePCToPC = async () => {
    try {
      setIsSaving(true);

      if (!natConfig.wan_interface || !natConfig.lan_interface) {
        toast.error('PC-to-PC paylaÅŸÄ±m iÃ§in WAN ve LAN arayÃ¼zleri seÃ§ilmelidir');
        return;
      }

      const response = await natService.setupPCSharing({
        wan_interface: natConfig.wan_interface,
        lan_interface: natConfig.lan_interface,
        dhcp_range_start: natConfig.dhcp_range_start,
        dhcp_range_end: natConfig.dhcp_range_end
      });

      if (response.success) {
        toast.success('PC-to-PC internet paylaÅŸÄ±mÄ± kuruldu');
        setNatConfig(prev => ({ ...prev, enabled: true, status: 'Aktif' }));
        setTimeout(() => {
          fetchNatStatus();
        }, 2000);
      } else {
        toast.error(response.message || 'PC-to-PC kurulum baÅŸarÄ±sÄ±z');
        if (response.errors) {
          setValidationErrors(response.errors);
        }
      }
    } catch (error) {
      console.error('PC-to-PC setup error:', error);
      toast.error('PC-to-PC kurulum sÄ±rasÄ±nda hata oluÅŸtu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      toast.success('BaÅŸarÄ±yla Ã§Ä±kÄ±ÅŸ yapÄ±ldÄ±');
    } catch (error) {
      toast.error('Ã‡Ä±kÄ±ÅŸ yapÄ±lÄ±rken hata oluÅŸtu');
    }
  };

  const handleMenuClick = (menuId) => {
    if (menuId === 'home') {
      navigate('/dashboard');
    } else if (menuId === 'updates') {
      navigate('/updates');
    } else if (menuId === 'reports') {
      navigate('/reports');
    } else if (menuId === 'settings') {
      navigate('/settings');
    } else if (menuId === 'nat-settings') {
      setActiveMenu(menuId);
    } else {
      navigate('/dashboard');
    }
  };

  const getInterfaceIcon = (type) => {
    return type === 'wireless' ? FaWifi : FaEthernet;
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active':
        return 'text-green-400';
      case 'disabled':
        return 'text-red-400';
      case 'configured_but_inactive':
        return 'text-yellow-400';
      default:
        return 'text-gray-400';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Ã‡Ä±kÄ±ÅŸ Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Ã‡Ä±kÄ±ÅŸ Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">NAT AyarlarÄ±</h2>
                <span className="text-gray-400 text-sm">AÄŸ Adresi Ã‡evirisi (Network Address Translation) yapÄ±landÄ±rmasÄ±</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">HoÅŸ geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="nat-settings-page">
          <div className="page-header">
            <div className="page-title">
              <FaRoute className="nat-icon text-blue-400" />
              <div>
                <h1>Nat AyarlarÄ±</h1>
                <p>AÄŸ Adresi Ã‡evirisi yapÄ±landÄ±rmasÄ±</p>
              </div>
            </div>
          </div>

          {/* Success Alert */}
          {successMessage && (
            <div className="alert alert-success">
              <FaCheckCircle className="inline mr-2" />
              {successMessage}
            </div>
          )}

          {/* Validation Errors */}
          {validationErrors.length > 0 && (
            <div className="alert alert-error mb-6">
              <FaExclamationCircle className="inline mr-2" />
              <div>
                <strong>DoÄŸrulama HatalarÄ±:</strong>
                <ul className="mt-2 list-disc list-inside">
                  {validationErrors.map((error, index) => (
                    <li key={index}>{error}</li>
                  ))}
                </ul>
              </div>
            </div>
          )}

          {/* Validation Warnings */}
          {validationWarnings.length > 0 && (
            <div className="alert alert-warning mb-6">
              <FaExclamationTriangle className="inline mr-2" />
              <div>
                <strong>UyarÄ±lar:</strong>
                <ul className="mt-2 list-disc list-inside">
                  {validationWarnings.map((warning, index) => (
                    <li key={index}>{warning}</li>
                  ))}
                </ul>
              </div>
            </div>
          )}

          {/* Internet Connection Sharing (ICS) */}
          <div className="nat-card bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="card-header">
              <FaShare className="card-icon text-green-400" />
              <h3>Internet BaÄŸlantÄ± PaylaÅŸÄ±mÄ± (ICS)</h3>
            </div>
            <p className="ics-description">
              NAT sayesinde bir internet baÄŸlantÄ±sÄ±nÄ± birden fazla cihazla paylaÅŸabilirsiniz. WAN arayÃ¼zÃ¼nden gelen internet eriÅŸimini LAN arayÃ¼zÃ¼ne baÄŸlÄ± cihazlara daÄŸÄ±tÄ±r.
            </p>
          </div>

          {/* NAT Status */}
          <div className="nat-card bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="nat-status-header">
              <div className="status-info">
                <div className="status-icon">
                  <FaServer className="text-white" />
                </div>
                <div>
                  <h3 className="text-white font-semibold text-lg">NAT Durumu</h3>
                  <p className="status-description">
                    Internet baÄŸlantÄ± paylaÅŸÄ±mÄ± etkinliÄŸini yÃ¶netin ve devreye alÄ±n
                  </p>
                  {natStatus.message && (
                    <p className={`text-sm mt-2 ${getStatusColor(natStatus.status)}`}>
                      {natStatus.message}
                    </p>
                  )}
                </div>
              </div>
              <div className="status-controls">
                <div className="flex flex-col items-end space-y-2">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    natConfig.enabled
                      ? 'bg-green-500/20 text-green-300'
                      : 'bg-red-500/20 text-red-300'
                  }`}>
                    {natConfig.status}
                  </span>
                  {natStatus.status !== 'not_configured' && (
                    <div className="text-xs text-gray-400">
                      IP Forwarding: {natStatus.ip_forwarding ? 'âœ“' : 'âœ—'} |
                      Masquerade: {natStatus.masquerade_active ? 'âœ“' : 'âœ—'}
                    </div>
                  )}
                </div>
                <button
                  onClick={() => handleNatToggle(!natConfig.enabled)}
                  disabled={isLoading || isValidating}
                  className={`relative inline-flex h-7 w-12 items-center rounded-full transition-colors duration-200 ${
                    natConfig.enabled ? 'bg-green-600' : 'bg-gray-600'
                  } disabled:opacity-50`}
                >
                  <span
                    className={`inline-block h-5 w-5 transform rounded-full bg-white transition-transform duration-200 ${
                      natConfig.enabled ? 'translate-x-6' : 'translate-x-1'
                    }`}
                  />
                </button>
              </div>
            </div>
          </div>

          {/* Interface Selection */}
          <div className="interface-grid">
            {/* WAN Interface */}
            <div className="interface-card bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="card-header">
                <div className="interface-icon wan-icon">
                  <FaWifi className="text-white" />
                </div>
                <h3>WAN ArayÃ¼zÃ¼</h3>
              </div>
              <p className="interface-description">Internet eriÅŸimi olan arayÃ¼z (Wi-Fi Ã¶nerilir)</p>
              <select
                value={natConfig.wan_interface}
                onChange={(e) => handleInterfaceChange('wan_interface', e.target.value)}
                disabled={isLoading || isValidating}
                className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:opacity-50"
              >
                <option value="">ArayÃ¼z SeÃ§iniz</option>
                {availableInterfaces.wan_candidates?.map((interface_, index) => {
                  const Icon = getInterfaceIcon(interface_.type);
                  return (
                    <option key={index} value={interface_.name}>
                      {interface_.display_name} - {interface_.description} ({interface_.status})
                    </option>
                  );
                })}
              </select>
              {isValidating && (
                <div className="flex items-center mt-2 text-blue-400 text-sm">
                  <FaSpinner className="animate-spin mr-2" />
                  DoÄŸrulanÄ±yor...
                </div>
              )}
            </div>

            {/* LAN Interface */}
            <div className="interface-card bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="card-header">
                <div className="interface-icon lan-icon">
                  <FaEthernet className="text-white" />
                </div>
                <h3>LAN ArayÃ¼zÃ¼</h3>
              </div>
              <p className="interface-description">Ä°Ã§ aÄŸa paylaÅŸÄ±lacak arayÃ¼z (Ethernet Ã¶nerilir)</p>
              <select
                value={natConfig.lan_interface}
                onChange={(e) => handleInterfaceChange('lan_interface', e.target.value)}
                disabled={isLoading || isValidating}
                className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:opacity-50"
              >
                <option value="">ArayÃ¼z SeÃ§iniz</option>
                {availableInterfaces.lan_candidates?.map((interface_, index) => {
                  const Icon = getInterfaceIcon(interface_.type);
                  return (
                    <option key={index} value={interface_.name}>
                      {interface_.display_name} - {interface_.description} ({interface_.status})
                    </option>
                  );
                })}
              </select>
            </div>
          </div>

          {/* Advanced Settings */}
          {natConfig.enabled && (
            <div className="nat-card bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="card-header">
                <FaCog className="card-icon text-blue-400" />
                <h3>GeliÅŸmiÅŸ Ayarlar</h3>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    DHCP AralÄ±ÄŸÄ± BaÅŸlangÄ±Ã§
                  </label>
                  <input
                    type="text"
                    value={natConfig.dhcp_range_start}
                    onChange={(e) => handleAdvancedSettingChange('dhcp_range_start', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white"
                    placeholder="192.168.100.100"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    DHCP AralÄ±ÄŸÄ± BitiÅŸ
                  </label>
                  <input
                    type="text"
                    value={natConfig.dhcp_range_end}
                    onChange={(e) => handleAdvancedSettingChange('dhcp_range_end', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white"
                    placeholder="192.168.100.200"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Gateway IP
                  </label>
                  <input
                    type="text"
                    value={natConfig.gateway_ip}
                    onChange={(e) => handleAdvancedSettingChange('gateway_ip', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white"
                    placeholder="192.168.100.1"
                  />
                </div>
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    id="masquerade"
                    checked={natConfig.masquerade_enabled}
                    onChange={(e) => handleAdvancedSettingChange('masquerade_enabled', e.target.checked)}
                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded"
                  />
                  <label htmlFor="masquerade" className="text-sm font-medium text-gray-300">
                    Masquerade EtkinleÅŸtir
                  </label>
                </div>
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="save-section">
            <div className="flex space-x-4">
              <button
                onClick={handleSaveSettings}
                disabled={isSaving || isLoading || isValidating}
                className="save-btn bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
              >
                {isSaving ? (
                  <>
                    <FaSync className="animate-spin" />
                    <span>Kaydediliyor...</span>
                  </>
                ) : (
                  <>
                    <FaSave />
                    <span>AyarlarÄ± Kaydet</span>
                  </>
                )}
              </button>

              {natConfig.wan_interface && natConfig.lan_interface && !natConfig.enabled && (
                <button
                  onClick={handlePCToPC}
                  disabled={isSaving || isLoading || isValidating}
                  className="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                >
                  <FaShare />
                  <span>PC-to-PC PaylaÅŸÄ±mÄ± Kur</span>
                </button>
              )}
            </div>
          </div>

          {/* NAT Information */}
          <div className="nat-card info-card bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="card-header">
              <FaInfoCircle className="card-icon text-blue-400" />
              <h3>NAT HakkÄ±nda</h3>
            </div>
            <div className="nat-info">
              <p>
                <strong>Network Address Translation (NAT)</strong>, Ã¶zel IP adreslerini genel IP adreslerine Ã§eviren bir aÄŸ teknolojisidir.
                Bu sayede tek bir genel IP adresi ile birden fazla cihazÄ±n internete eriÅŸim saÄŸlamasÄ± mÃ¼mkÃ¼n olur.
              </p>
              <p>
                <strong>Tipik KullanÄ±m:</strong> Modem/router'dan gelen internet baÄŸlantÄ±sÄ±nÄ± (WAN) evdeki/ofisteki diÄŸer cihazlara (LAN) paylaÅŸmak iÃ§in kullanÄ±lÄ±r.
              </p>
              <p>
                <strong>GÃ¼venlik:</strong> NAT aynÄ± zamanda bir gÃ¼venlik katmanÄ± saÄŸlar Ã§Ã¼nkÃ¼ dÄ±ÅŸ aÄŸdan iÃ§ aÄŸa doÄŸrudan eriÅŸim engellenir.
              </p>
              <p>
                <strong>PC-to-PC PaylaÅŸÄ±m:</strong> Bu sistemde Wi-Fi'dan gelen internet baÄŸlantÄ±sÄ± Ethernet Ã¼zerinden baÅŸka bir bilgisayara paylaÅŸÄ±labilir.
              </p>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};

export default NatSettings;


================================================
File: src/pages/Reports.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { FaShieldAlt, FaServer, FaHome, FaChartBar, FaNetworkWired, FaRoute, FaWrench, FaFileAlt, FaSync, FaSignOutAlt, FaChevronLeft, FaChevronRight, FaGlobe, FaDatabase, FaDownload, FaRedo, FaCloudDownloadAlt, FaClock, FaExclamationTriangle, FaCheckCircle, FaBan, FaChartLine, FaEye, FaCog } from 'react-icons/fa';
import { toast } from 'react-hot-toast';
import { reportsService } from '../services/reportsService';

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchDataStatus();
    const interval = setInterval(fetchDataStatus, 60000);
    return () => clearInterval(interval);
  }, []);

  const fetchDataStatus = async () => {
    try {
      const response = await reportsService.getDataStatus();
      if (response.success) {
        setDataStatus(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Data status fetch error:', error);
      setIsLoading(false);
    }
  };

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    );
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`;
  };

  const isPersistent = dataStatus.persistence?.enabled && dataStatus.persistence?.dataCollection;

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus.persistence?.systemUptime || 0)}
      </div>
    </div>
  );
};

const Reports = () => {
  const { user, logout } = useAuth();
  const [activeMenu, setActiveMenu] = useState('reports');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(true);
  const [timeFilter, setTimeFilter] = useState('Son 30 gün');

  const [reportsData, setReportsData] = useState({
    totalTraffic: '2.4 TB',
    trafficGrowth: '+12',
    systemAttempts: '34',
    attemptsGrowth: '-8',
    blockedRequests: '1,247',
    blockedGrowth: '+3',
    systemUptime: '15 gün 6 saat',
    uptimePercentage: '99.8',
    securityReport: {
      attackAttempts: 34,
      blockedIPs: 12,
      topAttackedPorts: [
        { port: '22', service: 'SSH', attempts: 156 },
        { port: '80', service: 'HTTP', attempts: 89 },
        { port: '443', service: 'HTTPS', attempts: 34 }
      ]
    },
    quickStats: {
      dailyAverageTraffic: '80 GB',
      peakHour: '14:00-15:00',
      averageResponseTime: '12ms',
      successRate: '99.2%',
      securityScore: '8.7/10'
    },
    lastUpdate: '18.06.2025 04:09'
  });

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCog },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ];

  const timeFilterOptions = [
    'Bugün', 'Dün', 'Son 3 gün', 'Son 1 hafta', 'Son 2 hafta',
    'Son 3 hafta', 'Son 30 gün', 'Son 60 gün'
  ];

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    fetchReportsData();

    return () => clearInterval(timer);
  }, [timeFilter]);

  const fetchReportsData = async () => {
    try {
      setIsLoading(true);
      const response = await reportsService.getReportsData(timeFilter);
      if (response.success) {
        setReportsData(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Reports data fetch error:', error);
      setIsLoading(false);
    }
  };

  const handleRefreshData = async () => {
    const loadingToast = toast.loading('Veriler yenileniyor...');
    try {
      await fetchReportsData();
      toast.dismiss(loadingToast);
      toast.success('Veriler başarıyla yenilendi');
    } catch (error) {
      toast.dismiss(loadingToast);
      toast.error('Veriler yenilenemedi');
    }
  };

  const handleExportReport = async (format) => {
    const loadingToast = toast.loading(`${format} raporu hazırlanıyor...`);
    try {
      await reportsService.exportReport(format, 'all', timeFilter);
      toast.dismiss(loadingToast);
      toast.success(`${format} raporu başarıyla dışa aktarıldı`);
    } catch (error) {
      toast.dismiss(loadingToast);
      toast.error(`${format} raporu dışa aktarılamadı`);
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      toast.success('Başarıyla çıkış yapıldı');
    } catch (error) {
      toast.error('Çıkış yapılırken hata oluştu');
    }
  };

  // GÜNCELLENMİŞ HANDLE MENU CLICK FONKSİYONU
  const handleMenuClick = (menuId) => {
    if (menuId === 'home') {
      window.location.href = '/dashboard';
    } else if (menuId === 'updates') {
      window.location.href = '/updates';
    } else if (menuId === 'reports') {
      setActiveMenu(menuId);
    } else if (menuId === 'interface-settings') {
      window.location.href = '/interface-settings';
    } else {
      window.location.href = '/dashboard';
    }
  };

  const StatCard = ({ title, value, subtitle, icon, color = 'blue', trend, isLoading = false }) => {
    const getColorClasses = (color) => {
      const colors = {
        green: 'text-green-400 bg-green-500/10 border-green-500/20',
        blue: 'text-blue-400 bg-blue-500/10 border-blue-500/20',
        yellow: 'text-yellow-400 bg-yellow-500/10 border-yellow-500/20',
        red: 'text-red-400 bg-red-500/10 border-red-500/20',
        orange: 'text-orange-400 bg-orange-500/10 border-orange-500/20',
        gray: 'text-gray-400 bg-gray-500/10 border-gray-500/20'
      };
      return colors[color] || colors.blue;
    };

    if (isLoading) {
      return (
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4">
          <div className="animate-pulse">
            <div className="h-4 bg-slate-700 rounded mb-2"></div>
            <div className="h-8 bg-slate-700 rounded mb-2"></div>
            <div className="h-3 bg-slate-700 rounded"></div>
          </div>
        </div>
      );
    }

    return (
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4 hover:bg-slate-800/70 transition-all duration-200">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
            <p className="font-bold text-2xl text-white mb-1">{value}</p>
            {subtitle && <p className="text-gray-500 text-xs">{subtitle}</p>}
            {trend && (
              <div className="flex items-center mt-2">
                <span className={`text-xs font-medium ${trend.positive ? 'text-green-400' : 'text-red-400'}`}>
                  {trend.positive ? '+' : ''}{trend.value}% bu ay
                </span>
              </div>
            )}
          </div>
          {icon && (
            <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getColorClasses(color)}`}>
              {icon}
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Sistem Raporları</h2>
                <span className="text-gray-400 text-sm">Firewall etkinliği, güvenlik istatistikleri ve sistem performansı</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                {/* Time Filter Dropdown */}
                <div className="relative">
                  <select
                    value={timeFilter}
                    onChange={(e) => setTimeFilter(e.target.value)}
                    className="bg-slate-700/50 border border-slate-600 rounded-lg px-3 py-2 text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {timeFilterOptions.map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                </div>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">Hoş geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Top Stats Row */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <StatCard
              title="Toplam Trafik"
              value={reportsData.totalTraffic}
              icon={<FaCloudDownloadAlt />}
              color="blue"
              trend={{ positive: true, value: reportsData.trafficGrowth }}
              isLoading={isLoading}
            />
            <StatCard
              title="Sistem Denemeleri"
              value={reportsData.systemAttempts}
              icon={<FaExclamationTriangle />}
              color="red"
              trend={{ positive: false, value: reportsData.attemptsGrowth }}
              isLoading={isLoading}
            />
            <StatCard
              title="Engellenen İstekler"
              value={reportsData.blockedRequests}
              icon={<FaBan />}
              color="orange"
              trend={{ positive: true, value: reportsData.blockedGrowth }}
              isLoading={isLoading}
            />
            <StatCard
              title="Sistem Çalışma Süresi"
              value={reportsData.systemUptime}
              subtitle={`%${reportsData.uptimePercentage} uptime`}
              icon={<FaCheckCircle />}
              color="green"
              isLoading={isLoading}
            />
          </div>

          {/* Report Types & Security Report */}
          <div className="grid grid-cols-1 xl:grid-cols-3 gap-8 mb-8">
            {/* Report Types */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-blue-500/20 p-2 rounded-lg">
                  <FaFileAlt className="text-blue-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Rapor Türleri</h3>
              </div>
              <div className="space-y-4">
                {[
                  { name: 'Güvenlik Raporu', desc: 'Güvenlik olayları ve saldırı denemeleri', icon: FaShieldAlt, color: 'text-red-400 bg-red-500/10' },
                  { name: 'Sistem Raporu', desc: 'Sistem performansı ve kaynak kullanımı', icon: FaServer, color: 'text-green-400 bg-green-500/10' },
                  { name: 'Trafik Raporu', desc: 'Ağ trafiği ve bant genişliği kullanımı', icon: FaChartLine, color: 'text-blue-400 bg-blue-500/10' },
                  { name: 'Engellemeler', desc: 'Engellenen istekler ve IP adresleri', icon: FaBan, color: 'text-orange-400 bg-orange-500/10' }
                ].map((report, index) => {
                  const Icon = report.icon;
                  return (
                    <div key={index} className="flex items-center space-x-3 p-3 bg-slate-900/30 rounded-lg hover:bg-slate-900/50 transition-colors cursor-pointer">
                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${report.color}`}>
                        <Icon className="text-lg" />
                      </div>
                      <div className="flex-1">
                        <h4 className="text-white font-medium">{report.name}</h4>
                        <p className="text-gray-400 text-sm">{report.desc}</p>
                      </div>
                      <FaEye className="text-gray-400 hover:text-white transition-colors" />
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Security Report */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-red-500/20 p-2 rounded-lg">
                  <FaShieldAlt className="text-red-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Güvenlik Raporu</h3>
              </div>
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-slate-900/40 rounded-lg p-4 text-center">
                    <p className="text-2xl font-bold text-red-400 mb-1">{reportsData.securityReport.attackAttempts}</p>
                    <p className="text-gray-400 text-sm">Saldırı Denemeleri</p>
                  </div>
                  <div className="bg-slate-900/40 rounded-lg p-4 text-center">
                    <p className="text-2xl font-bold text-orange-400 mb-1">{reportsData.securityReport.blockedIPs}</p>
                    <p className="text-gray-400 text-sm">Engellenen IP'ler</p>
                  </div>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-3">En Çok Saldırı Alan Portlar</h4>
                  <div className="space-y-2">
                    {reportsData.securityReport.topAttackedPorts.map((port, index) => (
                      <div key={index} className="flex items-center justify-between p-2 bg-slate-900/30 rounded">
                        <div className="flex items-center space-x-2">
                          <span className="text-white font-medium">{port.port}</span>
                          <span className="text-gray-400 text-sm">({port.service})</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <div className="w-16 h-1 bg-slate-700 rounded-full overflow-hidden">
                            <div
                              className="h-full bg-red-500 rounded-full"
                              style={{ width: `${(port.attempts / 156) * 100}%` }}
                            ></div>
                          </div>
                          <span className="text-red-400 text-sm font-medium">{port.attempts} deneme</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Export Section */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-green-500/20 p-2 rounded-lg">
                  <FaDownload className="text-green-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Rapor Dışa Aktarımı</h3>
              </div>
              <div className="space-y-4">
                <p className="text-gray-400 text-sm mb-4">Rapor formatı seçin:</p>
                {[
                  { format: 'PDF', desc: 'PDF Raporu', color: 'bg-red-600 hover:bg-red-700', icon: 'PDF' },
                  { format: 'CSV', desc: 'CSV Verileri', color: 'bg-green-600 hover:bg-green-700', icon: 'CSV' },
                  { format: 'JSON', desc: 'JSON Verileri', color: 'bg-blue-600 hover:bg-blue-700', icon: 'JSON' }
                ].map((exportOption, index) => (
                  <button
                    key={index}
                    onClick={() => handleExportReport(exportOption.format)}
                    className={`w-full flex items-center justify-between p-4 ${exportOption.color} text-white rounded-lg transition-colors`}
                  >
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-white/20 rounded flex items-center justify-center">
                        <span className="text-xs font-bold">{exportOption.icon}</span>
                      </div>
                      <span className="font-medium">{exportOption.desc}</span>
                    </div>
                    <FaDownload className="text-sm" />
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Quick Statistics & Data Update */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
            {/* Quick Statistics */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-purple-500/20 p-2 rounded-lg">
                  <FaChartLine className="text-purple-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Hızlı İstatistikler</h3>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  { label: 'Günlük Ortalama Trafik', value: reportsData.quickStats.dailyAverageTraffic, color: 'text-blue-400' },
                  { label: 'En Yoğun Saat', value: reportsData.quickStats.peakHour, color: 'text-yellow-400' },
                  { label: 'Ortalama Yanıt Süresi', value: reportsData.quickStats.averageResponseTime, color: 'text-green-400' },
                  { label: 'Başarı Oranı', value: reportsData.quickStats.successRate, color: 'text-green-400' },
                  { label: 'Güvenlik Skoru', value: reportsData.quickStats.securityScore, color: 'text-purple-400' }
                ].map((stat, index) => (
                  <div key={index} className="bg-slate-900/40 rounded-lg p-4">
                    <p className="text-gray-400 text-sm mb-1">{stat.label}</p>
                    <p className={`text-xl font-bold ${stat.color}`}>{stat.value}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Data Update */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-yellow-500/20 p-2 rounded-lg">
                  <FaClock className="text-yellow-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Veri Güncellemesi</h3>
              </div>
              <div className="space-y-6">
                <div className="flex items-center justify-between p-4 bg-slate-900/40 rounded-lg">
                  <div>
                    <p className="text-white font-medium">Son Güncelleme</p>
                    <p className="text-gray-400 text-sm">{reportsData.lastUpdate}</p>
                  </div>
                  <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                </div>
                <button
                  onClick={handleRefreshData}
                  className="w-full flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg transition-colors"
                >
                  <FaRedo className="text-sm" />
                  <span>Verileri Yenile</span>
                </button>
                <div className="text-center">
                  <p className="text-gray-500 text-xs">Veriler otomatik olarak her 5 dakikada bir güncellenir</p>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};

export default Reports;


================================================
File: src/pages/Routes.css
================================================
.routes-page {
  padding: 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.routes-icon {
  font-size: 2rem;
}

.page-title h1 {
  color: white;
  font-size: 1.75rem;
  font-weight: 500;
  margin: 0;
}

.page-title p {
  color: #6c757d;
  margin: 0;
  font-size: 0.875rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  transition: all 0.2s ease;
}

.stat-card:hover {
  background: rgba(30, 41, 59, 0.7);
}

.routes-list-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 2rem;
}

.routes-table {
  width: 100%;
  border-collapse: collapse;
}

.routes-table th {
  text-align: left;
  padding: 0.75rem 1rem;
  color: #9ca3af;
  font-weight: 500;
  border-bottom: 1px solid rgba(71, 85, 105, 0.3);
}

.routes-table td {
  padding: 0.75rem 1rem;
  border-bottom: 1px solid rgba(71, 85, 105, 0.2);
}

.route-row {
  transition: background-color 0.2s ease;
}

.route-row:hover {
  background: rgba(71, 85, 105, 0.2);
}

.route-status-toggle {
  position: relative;
  display: inline-flex;
  height: 1.5rem;
  width: 2.75rem;
  align-items: center;
  border-radius: 9999px;
  transition: background-color 0.2s ease;
  cursor: pointer;
  border: none;
}

.route-status-toggle.active {
  background-color: #16a34a;
}

.route-status-toggle:not(.active) {
  background-color: #4b5563;
}

.route-status-toggle-knob {
  display: inline-block;
  height: 1rem;
  width: 1rem;
  border-radius: 9999px;
  background-color: white;
  transition: transform 0.2s ease;
}

.route-status-toggle.active .route-status-toggle-knob {
  transform: translateX(1.25rem);
}

.route-status-toggle:not(.active) .route-status-toggle-knob {
  transform: translateX(0.25rem);
}

.route-actions {
  display: flex;
  gap: 0.5rem;
}

.action-button {
  padding: 0.5rem;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.action-button.edit {
  color: #3b82f6;
}

.action-button.edit:hover {
  color: #2563eb;
  background: rgba(59, 130, 246, 0.1);
}

.action-button.delete {
  color: #ef4444;
}

.action-button.delete:hover {
  color: #dc2626;
  background: rgba(239, 68, 68, 0.1);
}

.empty-state {
  text-align: center;
  padding: 3rem;
}

.empty-state-icon {
  color: #6b7280;
  font-size: 3rem;
  margin-bottom: 1rem;
}

.search-input-container {
  position: relative;
}

.search-input {
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.5rem 0.75rem 0.5rem 2.5rem;
  color: white;
  font-size: 0.875rem;
  width: 200px;
}

.search-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.search-icon {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  color: #9ca3af;
  font-size: 0.875rem;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  inset: 0;
  z-index: 50;
  background: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background: #1e293b;
  border-radius: 0.75rem;
  padding: 1.5rem;
  width: 100%;
  max-width: 32rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.modal-title {
  color: white;
  font-size: 1.125rem;
  font-weight: 500;
}

.modal-close {
  color: #9ca3af;
  background: transparent;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  border-radius: 0.375rem;
  transition: color 0.2s ease;
}

.modal-close:hover {
  color: #d1d5db;
}

.modal-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.form-group label {
  display: block;
  color: #d1d5db;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.form-input {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.form-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.form-select {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.form-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.modal-actions {
  display: flex;
  gap: 0.75rem;
  margin-top: 1.5rem;
}

.modal-button {
  flex: 1;
  padding: 0.75rem;
  border-radius: 0.5rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.modal-button.secondary {
  background: #4b5563;
  color: white;
}

.modal-button.secondary:hover {
  background: #374151;
}

.modal-button.primary {
  background: #3b82f6;
  color: white;
}

.modal-button.primary:hover {
  background: #2563eb;
}

.modal-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.info-box {
  background: rgba(59, 130, 246, 0.1);
  border: 1px solid rgba(59, 130, 246, 0.2);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-top: 1rem;
}

.info-content {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.info-icon {
  color: #60a5fa;
  font-size: 1.125rem;
  margin-top: 0.125rem;
  flex-shrink: 0;
}

.info-text {
  color: #dbeafe;
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.info-description {
  color: rgba(219, 234, 254, 0.8);
  font-size: 0.875rem;
}

.info-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
}

.info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

@media (max-width: 768px) {
  .info-grid {
    grid-template-columns: 1fr;
  }
}

.info-item h4 {
  color: white;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.info-item p {
  color: #9ca3af;
  font-size: 0.875rem;
  line-height: 1.5;
}

/* Responsive Design */
@media (max-width: 768px) {
  .routes-page {
    padding: 1rem;
  }

  .page-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .header-actions {
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }

  .search-input {
    width: 100%;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .routes-table {
    font-size: 0.875rem;
  }

  .routes-table th,
  .routes-table td {
    padding: 0.5rem;
  }

  .modal-content {
    margin: 1rem;
    max-width: calc(100% - 2rem);
  }

  .modal-actions {
    flex-direction: column;
  }

  .info-grid {
    grid-template-columns: 1fr;
  }
}

/* Animation for route items */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.route-row {
  animation: fadeInUp 0.3s ease-out;
}

/* Loading states */
.loading-shimmer {
  background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}


================================================
File: src/pages/Routes.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import {
  FaShieldAlt,
  FaServer,
  FaCog,
  FaClock,
  FaExclamationTriangle,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaDatabase,
  FaCheckCircle,
  FaPlus,
  FaTrash,
  FaEdit,
  FaTimes,
  FaSave,
  FaInfoCircle,
  FaSearch
} from 'react-icons/fa';
import { routesService } from '../services/routesService';
import './Routes.css';

console.log('🛣️ [ROUTES] Routes component yüklendi');

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchDataStatus();
    const interval = setInterval(fetchDataStatus, 60000);
    return () => clearInterval(interval);
  }, []);

  const fetchDataStatus = async () => {
    try {
      const response = await routesService.getDataStatus();
      if (response.success) {
        setDataStatus(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Data status fetch error:', error);
      setIsLoading(false);
    }
  };

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    );
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`;
  };

  const isPersistent = dataStatus?.persistence?.enabled && dataStatus?.persistence?.dataCollection;

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus?.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus?.persistence?.systemUptime || 0)}
      </div>
    </div>
  );
};

const Routes = () => {
  console.log('🛣️ [ROUTES] Routes component render başladı');
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [activeMenu, setActiveMenu] = useState('routes');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  // Routes State
  const [staticRoutes, setStaticRoutes] = useState([]);
  const [searchRoute, setSearchRoute] = useState('');
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingRoute, setEditingRoute] = useState(null);
  const [newRoute, setNewRoute] = useState({
    destination: '',
    netmask: '',
    gateway: '',
    interface: '',
    metric: '1',
    enabled: true,
    description: ''
  });

  // Available network interfaces
  const [availableInterfaces, setAvailableInterfaces] = useState([]);

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCog },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ];

  useEffect(() => {
    console.log('🛣️ [ROUTES] useEffect başladı');
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    fetchRoutesData();
    fetchAvailableInterfaces();

    return () => {
      console.log('🛣️ [ROUTES] Component unmount, timer temizleniyor');
      clearInterval(timer);
    };
  }, []);

  const fetchRoutesData = async () => {
    try {
      console.log('🛣️ [ROUTES] Routes data fetch başladı');
      setIsLoading(true);
      const response = await routesService.getStaticRoutes();
      if (response.success) {
        console.log('🛣️ [ROUTES] Routes data başarıyla alındı:', response.data);
        setStaticRoutes(response.data || []);
      }
    } catch (error) {
      console.error('🛣️ [ROUTES] Routes data fetch error:', error);
      toast.error('Rotalar alınamadı');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchAvailableInterfaces = async () => {
    try {
      const response = await routesService.getAvailableInterfaces();
      if (response.success) {
        setAvailableInterfaces(response.data || []);
      }
    } catch (error) {
      console.error('Interfaces fetch error:', error);
      // Set fallback interfaces
      setAvailableInterfaces([
        { name: 'eth0', displayName: 'Ethernet 0', description: 'Birincil Ethernet Arayüzü' },
        { name: 'eth1', displayName: 'Ethernet 1', description: 'İkincil Ethernet Arayüzü' },
        { name: 'wlan0', displayName: 'Wi-Fi', description: 'Kablosuz Ağ Arayüzü' },
        { name: 'ppp0', displayName: 'PPP', description: 'Point-to-Point Protokol' }
      ]);
    }
  };

  const handleAddRoute = async () => {
    if (!validateRoute(newRoute)) {
      return;
    }
    try {
      console.log('🛣️ [ROUTES] Route ekleniyor:', newRoute);
      setIsSaving(true);
      const response = await routesService.addStaticRoute(newRoute);
      if (response.success) {
        setStaticRoutes(prev => [...prev, { ...newRoute, id: Date.now().toString() }]);
        toast.success('Statik rota başarıyla eklendi');
        resetForm();
        setShowAddModal(false);
      }
    } catch (error) {
      console.error('Add route error:', error);
      toast.error('Rota eklenirken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleEditRoute = (route) => {
    setEditingRoute(route);
    setNewRoute({
      destination: route.destination,
      netmask: route.netmask,
      gateway: route.gateway,
      interface: route.interface,
      metric: route.metric.toString(),
      enabled: route.enabled,
      description: route.description || ''
    });
    setShowAddModal(true);
  };

  const handleUpdateRoute = async () => {
    if (!validateRoute(newRoute)) {
      return;
    }
    try {
      console.log('🛣️ [ROUTES] Route güncelleniyor:', editingRoute.id, newRoute);
      setIsSaving(true);
      const response = await routesService.updateStaticRoute(editingRoute.id, newRoute);
      if (response.success) {
        setStaticRoutes(prev => prev.map(route =>
          route.id === editingRoute.id
            ? { ...route, ...newRoute, metric: parseInt(newRoute.metric) }
            : route
        ));
        toast.success('Statik rota başarıyla güncellendi');
        resetForm();
        setShowAddModal(false);
        setEditingRoute(null);
      }
    } catch (error) {
      console.error('Update route error:', error);
      toast.error('Rota güncellenirken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleDeleteRoute = async (routeId) => {
    if (!window.confirm('Bu rotayı silmek istediğinizden emin misiniz?')) {
      return;
    }
    try {
      console.log('🛣️ [ROUTES] Route siliniyor:', routeId);
      const response = await routesService.deleteStaticRoute(routeId);
      if (response.success) {
        setStaticRoutes(prev => prev.filter(route => route.id !== routeId));
        toast.success('Statik rota başarıyla silindi');
      }
    } catch (error) {
      console.error('Delete route error:', error);
      toast.error('Rota silinirken hata oluştu');
    }
  };

  const handleToggleRoute = async (routeId, enabled) => {
    try {
      const response = await routesService.toggleStaticRoute(routeId, enabled);
      if (response.success) {
        setStaticRoutes(prev => prev.map(route =>
          route.id === routeId ? { ...route, enabled } : route
        ));
        toast.success(`Rota ${enabled ? 'etkinleştirildi' : 'devre dışı bırakıldı'}`);
      }
    } catch (error) {
      console.error('Toggle route error:', error);
      toast.error('Rota durumu değiştirilemedi');
    }
  };

  const validateRoute = (route) => {
    if (!route.destination.trim()) {
      toast.error('Hedef ağ adresi gerekli');
      return false;
    }
    if (!route.netmask.trim()) {
      toast.error('Alt ağ maskesi gerekli');
      return false;
    }
    if (!route.gateway.trim()) {
      toast.error('Ağ geçidi gerekli');
      return false;
    }
    if (!route.interface.trim()) {
      toast.error('Ağ arayüzü seçilmeli');
      return false;
    }

    // IP format validation
    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    if (!ipRegex.test(route.destination)) {
      toast.error('Geçersiz hedef ağ adresi formatı');
      return false;
    }
    if (!ipRegex.test(route.netmask)) {
      toast.error('Geçersiz alt ağ maskesi formatı');
      return false;
    }
    if (!ipRegex.test(route.gateway)) {
      toast.error('Geçersiz ağ geçidi formatı');
      return false;
    }

    return true;
  };

  const resetForm = () => {
    setNewRoute({
      destination: '',
      netmask: '',
      gateway: '',
      interface: '',
      metric: '1',
      enabled: true,
      description: ''
    });
    setEditingRoute(null);
  };

  const handleLogout = async () => {
    try {
      console.log('🛣️ [ROUTES] Logout başladı');
      await logout();
      toast.success('Başarıyla çıkış yapıldı');
    } catch (error) {
      console.error('Logout error:', error);
      toast.error('Çıkış yapılırken hata oluştu');
    }
  };

  // GÜNCELLENMİŞ HANDLE MENU CLICK FONKSİYONU (340. satır civarı)
  const handleMenuClick = (menuId) => {
    console.log('🛣️ [ROUTES] Menu tıklandı:', menuId);
    if (menuId === 'routes') {
      console.log('🛣️ [ROUTES] Routes seçildi, activeMenu güncelleniyor');
      setActiveMenu(menuId);
      return;
    }

    // Diğer sayfalara yönlendirmeler
    if (menuId === 'home') {
      console.log('🛣️ [ROUTES] Ana sayfaya yönlendiriliyor');
      navigate('/dashboard');
    } else if (menuId === 'updates') {
      console.log('🛣️ [ROUTES] Updates sayfasına yönlendiriliyor');
      navigate('/updates');
    } else if (menuId === 'reports') {
      console.log('🛣️ [ROUTES] Reports sayfasına yönlendiriliyor');
      navigate('/reports');
    } else if (menuId === 'settings') {
      console.log('🛣️ [ROUTES] Settings sayfasına yönlendiriliyor');
      navigate('/settings');
    } else if (menuId === 'nat-settings') {
      console.log('🛣️ [ROUTES] NAT Settings sayfasına yönlendiriliyor');
      navigate('/nat-settings');
    } else if (menuId === 'dns-management') {
      console.log('🛣️ [ROUTES] DNS Management sayfasına yönlendiriliyor');
      navigate('/dns-management');
    } else if (menuId === 'interface-settings') {
      console.log('🛣️ [ROUTES] Interface Settings sayfasına yönlendiriliyor');
      navigate('/interface-settings');
    } else {
      // Diğer menüler için dashboard'a git
      console.log('🛣️ [ROUTES] Dashboard\'a yönlendiriliyor');
      navigate('/dashboard');
    }
  };

  const filteredRoutes = staticRoutes.filter(route =>
    route.destination.toLowerCase().includes(searchRoute.toLowerCase()) ||
    route.gateway.toLowerCase().includes(searchRoute.toLowerCase()) ||
    route.interface.toLowerCase().includes(searchRoute.toLowerCase())
  );

  const StatCard = ({ title, value, icon, color }) => {
    return (
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4 hover:bg-slate-800/70 transition-all duration-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
            <p className="font-bold text-2xl text-white">{value}</p>
          </div>
          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${color}`}>
            {icon}
          </div>
        </div>
      </div>
    );
  };

  console.log('🛣️ [ROUTES] Component render ediliyor, state:', {
    activeMenu,
    isLoading,
    routesCount: staticRoutes.length
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Statik Rotalar</h2>
                <span className="text-gray-400 text-sm">Ağ yönlendirme tablosu yönetimi ve statik rota yapılandırması</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    resetForm();
                    setShowAddModal(true);
                  }}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <FaPlus className="text-sm" />
                  <span>Yeni Rota</span>
                </button>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">Hoş geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <StatCard
              title="Mevcut Statik Rotalar"
              value={staticRoutes.length}
              icon={<FaRoute />}
              color="text-blue-400 bg-blue-500/10"
            />
            <StatCard
              title="Aktif Rotalar"
              value={staticRoutes.filter(r => r.enabled).length}
              icon={<FaCheckCircle />}
              color="text-green-400 bg-green-500/10"
            />
            <StatCard
              title="Kullanılabilir Arayüzler"
              value={availableInterfaces.length}
              icon={<FaNetworkWired />}
              color="text-purple-400 bg-purple-500/10"
            />
          </div>

          {/* Routes List */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <FaRoute className="text-blue-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">Mevcut Statik Rotalar</h3>
                <span className="bg-blue-500/20 text-blue-300 px-2 py-1 rounded-full text-xs font-medium">
                  {filteredRoutes.length} adet
                </span>
              </div>
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm" />
                  <input
                    type="text"
                    placeholder="Rota ara..."
                    value={searchRoute}
                    onChange={(e) => setSearchRoute(e.target.value)}
                    className="bg-slate-700/50 border border-slate-600 rounded-lg px-10 py-2 text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            {/* Routes Table */}
            <div className="overflow-x-auto">
              {filteredRoutes.length > 0 ? (
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-slate-700/50">
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Hedef Ağ</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Alt Ağ Maskesi</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Ağ Geçidi</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Arayüz</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Metrik</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Durum</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">İşlemler</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredRoutes.map((route) => (
                      <tr key={route.id} className="border-b border-slate-700/30 hover:bg-slate-700/20 transition-colors">
                        <td className="py-3 px-4 text-white font-medium">{route.destination}</td>
                        <td className="py-3 px-4 text-gray-300">{route.netmask}</td>
                        <td className="py-3 px-4 text-gray-300">{route.gateway}</td>
                        <td className="py-3 px-4 text-gray-300">{route.interface}</td>
                        <td className="py-3 px-4 text-gray-300">{route.metric}</td>
                        <td className="py-3 px-4">
                          <button
                            onClick={() => handleToggleRoute(route.id, !route.enabled)}
                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                              route.enabled ? 'bg-green-600' : 'bg-gray-600'
                            }`}
                          >
                            <span
                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                route.enabled ? 'translate-x-6' : 'translate-x-1'
                              }`}
                            />
                          </button>
                        </td>
                        <td className="py-3 px-4">
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={() => handleEditRoute(route)}
                              className="text-blue-400 hover:text-blue-300 p-1 rounded transition-colors"
                              title="Düzenle"
                            >
                              <FaEdit className="text-sm" />
                            </button>
                            <button
                              onClick={() => handleDeleteRoute(route.id)}
                              className="text-red-400 hover:text-red-300 p-1 rounded transition-colors"
                              title="Sil"
                            >
                              <FaTrash className="text-sm" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <div className="text-center py-12">
                  <FaRoute className="text-gray-500 text-4xl mb-4 mx-auto" />
                  <h4 className="text-white font-medium mb-2">
                    {searchRoute ? 'Arama kriterine uygun rota bulunamadı' : 'Henüz statik rota yok'}
                  </h4>
                  <p className="text-gray-400 text-sm mb-6">
                    {searchRoute
                      ? 'Farklı arama terimleri deneyin'
                      : 'İlk rotayı oluşturmak için yukarıdaki butonu kullanın'
                    }
                  </p>
                  {!searchRoute && (
                    <button
                      onClick={() => {
                        resetForm();
                        setShowAddModal(true);
                      }}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 mx-auto"
                    >
                      <FaPlus className="text-sm" />
                      <span>İlk Rotayı Oluştur</span>
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>

          {/* Static Routes Information */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="flex items-center space-x-3 mb-6">
              <FaInfoCircle className="text-blue-400 text-xl" />
              <h3 className="text-white font-semibold text-lg">Statik Rotalar Hakkında</h3>
            </div>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-white font-medium mb-2">Statik Rotalar:</h4>
                  <p className="text-gray-400 text-sm">Belirli ağ trafiğini hangi ağ geçidi üzerinden yönlendirileceğini manuel olarak belirler. Bu yaklaşım ağ adresleme seviyesinde çalışır.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Kullanım Alanları:</h4>
                  <p className="text-gray-400 text-sm">Farklı ağ segmentlerine erişim, VPN trafiği yönlendirme, belirli servislere özel yollar tanımlama için kullanılır.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Metrik:</h4>
                  <p className="text-gray-400 text-sm">Aynı hedefe birden fazla rota varsa, düşük metrik değerine sahip rota tercih edilir. Varsayılan olarak 1 değerini alır.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Dikkat:</h4>
                  <p className="text-gray-400 text-sm">Yanlış yapılandırılmış statik rotalar ağ bağlantısını kesebilir. Değişiklik yapmadan önce mevcut ağ yapılandırmanızı analiz edin.</p>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* Add/Edit Route Modal */}
      {showAddModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => {
              setShowAddModal(false);
              resetForm();
            }} />
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block w-full max-w-lg transform overflow-hidden rounded-lg bg-slate-800 text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle">
              <div className="bg-slate-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-white">
                    {editingRoute ? 'Statik Rota Düzenle' : 'Yeni Statik Rota Ekle'}
                  </h3>
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      resetForm();
                    }}
                    className="rounded-md bg-slate-800 text-gray-400 hover:text-gray-300 focus:outline-none"
                  >
                    <FaTimes />
                  </button>
                </div>
                <div className="space-y-4">
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Hedef Ağ Adresi</label>
                    <input
                      type="text"
                      value={newRoute.destination}
                      onChange={(e) => setNewRoute(prev => ({ ...prev, destination: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="192.168.50.0"
                    />
                    <p className="text-gray-500 text-xs mt-1">Ulaşılacak hedef ağ adresi</p>
                  </div>
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Alt Ağ Maskesi</label>
                    <input
                      type="text"
                      value={newRoute.netmask}
                      onChange={(e) => setNewRoute(prev => ({ ...prev, netmask: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="255.255.255.0"
                    />
                    <p className="text-gray-500 text-xs mt-1">Hedef ağın alt ağ maskesi</p>
                  </div>
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Ağ Geçidi</label>
                    <input
                      type="text"
                      value={newRoute.gateway}
                      onChange={(e) => setNewRoute(prev => ({ ...prev, gateway: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="192.168.1.1"
                    />
                    <p className="text-gray-500 text-xs mt-1">Trafiğin yönlendirileceği ağ geçidi</p>
                  </div>
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Ağ Arayüzü</label>
                    <select
                      value={newRoute.interface}
                      onChange={(e) => setNewRoute(prev => ({ ...prev, interface: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Arayüz seçiniz</option>
                      {availableInterfaces.map((iface) => (
                        <option key={iface.name} value={iface.name}>
                          {iface.displayName} - {iface.description}
                        </option>
                      ))}
                    </select>
                    <p className="text-gray-500 text-xs mt-1">Trafiğin çıkacağı fiziksel arayüz</p>
                  </div>
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Metrik (Öncelik)</label>
                    <input
                      type="number"
                      min="1"
                      max="255"
                      value={newRoute.metric}
                      onChange={(e) => setNewRoute(prev => ({ ...prev, metric: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="1"
                    />
                    <p className="text-gray-500 text-xs mt-1">Düşük değer yüksek öncelik. Varsayılan: 1</p>
                  </div>
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Açıklama (İsteğe bağlı)</label>
                    <input
                      type="text"
                      value={newRoute.description}
                      onChange={(e) => setNewRoute(prev => ({ ...prev, description: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Rota açıklaması..."
                    />
                  </div>
                  <div className="flex items-center space-x-3">
                    <label className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={newRoute.enabled}
                        onChange={(e) => setNewRoute(prev => ({ ...prev, enabled: e.target.checked }))}
                        className="sr-only"
                      />
                      <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        newRoute.enabled ? 'bg-green-600' : 'bg-gray-600'
                      }`}>
                        <span
                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                            newRoute.enabled ? 'translate-x-6' : 'translate-x-1'
                          }`}
                        />
                      </div>
                      <span className="ml-3 text-gray-300 font-medium">Rota Etkinleştir</span>
                    </label>
                  </div>
                </div>

                {/* Statik Rota Bilgilendirmesi */}
                <div className="mt-6 bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                  <div className="flex items-start space-x-3">
                    <FaInfoCircle className="text-blue-400 text-lg mt-0.5 flex-shrink-0" />
                    <div>
                      <p className="text-blue-200 font-medium mb-1">Statik Rota Bilgilendirmesi</p>
                      <p className="text-blue-200/80 text-sm">
                        Statik rotalar sistem yeniden başlatıldığında kalıcıdır. Metrik değeri ne kadar düşükse o rota o kadar yüksek önceliğe sahiptir. Aynı hedef için birden fazla rota tanımlanabilir.
                      </p>
                    </div>
                  </div>
                </div>

                <div className="mt-6 flex space-x-3">
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      resetForm();
                    }}
                    className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    İptal
                  </button>
                  <button
                    onClick={editingRoute ? handleUpdateRoute : handleAddRoute}
                    disabled={isSaving}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors disabled:opacity-50 flex items-center justify-center space-x-2"
                  >
                    {isSaving ? (
                      <>
                        <FaSync className="animate-spin" />
                        <span>{editingRoute ? 'Güncelleniyor...' : 'Ekleniyor...'}</span>
                      </>
                    ) : (
                      <>
                        <FaSave />
                        <span>Rota {editingRoute ? 'Güncelle' : 'Ekle'}</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Routes;


================================================
File: src/pages/RuleGroups.css
================================================
.rule-groups-page {
  padding: 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.rule-groups-icon {
  font-size: 2rem;
}

.page-title h1 {
  color: white;
  font-size: 1.75rem;
  font-weight: 500;
  margin: 0;
}

.page-title p {
  color: #6c757d;
  margin: 0;
  font-size: 0.875rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  transition: all 0.2s ease;
}

.stat-card:hover {
  background: rgba(30, 41, 59, 0.7);
}

.groups-list-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 2rem;
}

.groups-table {
  width: 100%;
  border-collapse: collapse;
}

.groups-table th {
  text-align: left;
  padding: 0.75rem 1rem;
  color: #9ca3af;
  font-weight: 500;
  border-bottom: 1px solid rgba(71, 85, 105, 0.3);
}

.groups-table td {
  padding: 0.75rem 1rem;
  border-bottom: 1px solid rgba(71, 85, 105, 0.2);
}

.group-row {
  transition: background-color 0.2s ease;
}

.group-row:hover {
  background: rgba(71, 85, 105, 0.2);
}

.group-status-toggle {
  position: relative;
  display: inline-flex;
  height: 1.5rem;
  width: 2.75rem;
  align-items: center;
  border-radius: 9999px;
  transition: background-color 0.2s ease;
  cursor: pointer;
  border: none;
}

.group-status-toggle.active {
  background-color: #16a34a;
}

.group-status-toggle:not(.active) {
  background-color: #4b5563;
}

.group-status-toggle-knob {
  display: inline-block;
  height: 1rem;
  width: 1rem;
  border-radius: 9999px;
  background-color: white;
  transition: transform 0.2s ease;
}

.group-status-toggle.active .group-status-toggle-knob {
  transform: translateX(1.25rem);
}

.group-status-toggle:not(.active) .group-status-toggle-knob {
  transform: translateX(0.25rem);
}

.group-actions {
  display: flex;
  gap: 0.5rem;
}

.action-button {
  padding: 0.5rem;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.action-button.edit {
  color: #3b82f6;
}

.action-button.edit:hover {
  color: #2563eb;
  background: rgba(59, 130, 246, 0.1);
}

.action-button.delete {
  color: #ef4444;
}

.action-button.delete:hover {
  color: #dc2626;
  background: rgba(239, 68, 68, 0.1);
}

.action-button.view {
  color: #10b981;
}

.action-button.view:hover {
  color: #059669;
  background: rgba(16, 185, 129, 0.1);
}

.empty-state {
  text-align: center;
  padding: 3rem;
}

.empty-state-icon {
  color: #6b7280;
  font-size: 3rem;
  margin-bottom: 1rem;
}

.search-input-container {
  position: relative;
}

.search-input {
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.5rem 0.75rem 0.5rem 2.5rem;
  color: white;
  font-size: 0.875rem;
  width: 200px;
}

.search-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.search-icon {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  color: #9ca3af;
  font-size: 0.875rem;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  inset: 0;
  z-index: 50;
  background: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background: #1e293b;
  border-radius: 0.75rem;
  padding: 1.5rem;
  width: 100%;
  max-width: 32rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.modal-title {
  color: white;
  font-size: 1.125rem;
  font-weight: 500;
}

.modal-close {
  color: #9ca3af;
  background: transparent;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  border-radius: 0.375rem;
  transition: color 0.2s ease;
}

.modal-close:hover {
  color: #d1d5db;
}

.modal-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.form-group label {
  display: block;
  color: #d1d5db;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.form-input {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.form-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.form-textarea {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
  resize: vertical;
  min-height: 80px;
}

.form-textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.modal-actions {
  display: flex;
  gap: 0.75rem;
  margin-top: 1.5rem;
}

.modal-button {
  flex: 1;
  padding: 0.75rem;
  border-radius: 0.5rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.modal-button.secondary {
  background: #4b5563;
  color: white;
}

.modal-button.secondary:hover {
  background: #374151;
}

.modal-button.primary {
  background: #3b82f6;
  color: white;
}

.modal-button.primary:hover {
  background: #2563eb;
}

.modal-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.info-box {
  background: rgba(59, 130, 246, 0.1);
  border: 1px solid rgba(59, 130, 246, 0.2);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-top: 1rem;
}

.info-content {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.info-icon {
  color: #60a5fa;
  font-size: 1.125rem;
  margin-top: 0.125rem;
  flex-shrink: 0;
}

.info-text {
  color: #dbeafe;
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.info-description {
  color: rgba(219, 234, 254, 0.8);
  font-size: 0.875rem;
}

.info-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
}

.info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

@media (max-width: 768px) {
  .info-grid {
    grid-template-columns: 1fr;
  }
}

.info-item h4 {
  color: white;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.info-item p {
  color: #9ca3af;
  font-size: 0.875rem;
  line-height: 1.5;
}

/* Responsive Design */
@media (max-width: 768px) {
  .rule-groups-page {
    padding: 1rem;
  }

  .page-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .header-actions {
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }

  .search-input {
    width: 100%;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .groups-table {
    font-size: 0.875rem;
  }

  .groups-table th,
  .groups-table td {
    padding: 0.5rem;
  }

  .modal-content {
    margin: 1rem;
    max-width: calc(100% - 2rem);
  }

  .modal-actions {
    flex-direction: column;
  }

  .info-grid {
    grid-template-columns: 1fr;
  }
}

/* Animation for group items */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.group-row {
  animation: fadeInUp 0.3s ease-out;
}

/* Loading states */
.loading-shimmer {
  background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}


================================================
File: src/pages/RuleGroups.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import {
  FaShieldAlt,
  FaServer,
  FaCog,
  FaClock,
  FaExclamationTriangle,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaDatabase,
  FaCheckCircle,
  FaPlus,
  FaTrash,
  FaEdit,
  FaTimes,
  FaSave,
  FaInfoCircle,
  FaSearch,
  FaEye,
  FaBan,
  FaPlay
} from 'react-icons/fa';
import { ruleGroupsService } from '../services/ruleGroupsService';
import './RuleGroups.css';

console.log('⚙️ [RULE-GROUPS] RuleGroups component yüklendi');

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchDataStatus();
    const interval = setInterval(fetchDataStatus, 60000);
    return () => clearInterval(interval);
  }, []);

  const fetchDataStatus = async () => {
    try {
      const response = await ruleGroupsService.getDataStatus();
      if (response.success) {
        setDataStatus(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Data status fetch error:', error);
      setIsLoading(false);
    }
  };

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    );
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`;
  };

  const isPersistent = dataStatus?.persistence?.enabled && dataStatus?.persistence?.dataCollection;

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus?.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus?.persistence?.systemUptime || 0)}
      </div>
    </div>
  );
};

const RuleGroups = () => {
  console.log('⚙️ [RULE-GROUPS] RuleGroups component render başladı');
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [activeMenu, setActiveMenu] = useState('rule-groups');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  // Rule Groups State
  const [ruleGroups, setRuleGroups] = useState([]);
  const [searchGroup, setSearchGroup] = useState('');
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingGroup, setEditingGroup] = useState(null);
  const [showViewModal, setShowViewModal] = useState(false);
  const [viewingGroup, setViewingGroup] = useState(null);
  const [newGroup, setNewGroup] = useState({
    name: '',
    description: '',
    enabled: true
  });

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCog },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ];

  useEffect(() => {
    console.log('⚙️ [RULE-GROUPS] useEffect başladı');
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    fetchRuleGroups();

    return () => {
      console.log('⚙️ [RULE-GROUPS] Component unmount, timer temizleniyor');
      clearInterval(timer);
    };
  }, []);

  const fetchRuleGroups = async () => {
    try {
      console.log('⚙️ [RULE-GROUPS] Rule groups data fetch başladı');
      setIsLoading(true);
      const response = await ruleGroupsService.getRuleGroups();
      if (response.success) {
        console.log('⚙️ [RULE-GROUPS] Rule groups data başarıyla alındı:', response.data);
        setRuleGroups(response.data || []);
      }
    } catch (error) {
      console.error('⚙️ [RULE-GROUPS] Rule groups data fetch error:', error);
      toast.error('Kural grupları alınamadı');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddGroup = async () => {
    if (!validateGroup(newGroup)) {
      return;
    }
    try {
      console.log('⚙️ [RULE-GROUPS] Group ekleniyor:', newGroup);
      setIsSaving(true);
      const response = await ruleGroupsService.createRuleGroup(newGroup);
      if (response.success) {
        setRuleGroups(prev => [...prev, response.data]);
        toast.success('Kural grubu başarıyla oluşturuldu');
        resetForm();
        setShowAddModal(false);
      }
    } catch (error) {
      console.error('Add group error:', error);
      toast.error('Kural grubu oluşturulurken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleEditGroup = (group) => {
    setEditingGroup(group);
    setNewGroup({
      name: group.name,
      description: group.description,
      enabled: group.enabled
    });
    setShowAddModal(true);
  };

  const handleUpdateGroup = async () => {
    if (!validateGroup(newGroup)) {
      return;
    }
    try {
      console.log('⚙️ [RULE-GROUPS] Group güncelleniyor:', editingGroup.id, newGroup);
      setIsSaving(true);
      const response = await ruleGroupsService.updateRuleGroup(editingGroup.id, newGroup);
      if (response.success) {
        setRuleGroups(prev => prev.map(group =>
          group.id === editingGroup.id
            ? { ...group, ...newGroup, updatedAt: new Date().toISOString() }
            : group
        ));
        toast.success('Kural grubu başarıyla güncellendi');
        resetForm();
        setShowAddModal(false);
        setEditingGroup(null);
      }
    } catch (error) {
      console.error('Update group error:', error);
      toast.error('Kural grubu güncellenirken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleDeleteGroup = async (groupId) => {
    if (!window.confirm('Bu kural grubunu silmek istediğinizden emin misiniz?')) {
      return;
    }
    try {
      console.log('⚙️ [RULE-GROUPS] Group siliniyor:', groupId);
      const response = await ruleGroupsService.deleteRuleGroup(groupId);
      if (response.success) {
        setRuleGroups(prev => prev.filter(group => group.id !== groupId));
        toast.success('Kural grubu başarıyla silindi');
      }
    } catch (error) {
      console.error('Delete group error:', error);
      toast.error('Kural grubu silinirken hata oluştu');
    }
  };

  const handleToggleGroup = async (groupId, enabled) => {
    try {
      const response = await ruleGroupsService.toggleRuleGroup(groupId, enabled);
      if (response.success) {
        setRuleGroups(prev => prev.map(group =>
          group.id === groupId ? { ...group, enabled } : group
        ));
        toast.success(`Kural grubu ${enabled ? 'etkinleştirildi' : 'devre dışı bırakıldı'}`);
      }
    } catch (error) {
      console.error('Toggle group error:', error);
      toast.error('Kural grubu durumu değiştirilemedi');
    }
  };

  const handleViewGroup = (group) => {
    setViewingGroup(group);
    setShowViewModal(true);
  };

  const validateGroup = (group) => {
    if (!group.name.trim()) {
      toast.error('Grup adı gerekli');
      return false;
    }
    if (!group.description.trim()) {
      toast.error('Grup açıklaması gerekli');
      return false;
    }
    return true;
  };

  const resetForm = () => {
    setNewGroup({
      name: '',
      description: '',
      enabled: true
    });
    setEditingGroup(null);
  };

  const handleLogout = async () => {
    try {
      console.log('⚙️ [RULE-GROUPS] Logout başladı');
      await logout();
      toast.success('Başarıyla çıkış yapıldı');
    } catch (error) {
      console.error('Logout error:', error);
      toast.error('Çıkış yapılırken hata oluştu');
    }
  };

  // GÜNCELLENMİŞ HANDLE MENU CLICK FONKSİYONU (290. satır civarı)
  const handleMenuClick = (menuId) => {
    console.log('⚙️ [RULE-GROUPS] Menu tıklandı:', menuId);
    if (menuId === 'rule-groups') {
      console.log('⚙️ [RULE-GROUPS] Rule Groups seçildi, activeMenu güncelleniyor');
      setActiveMenu(menuId);
      return;
    }

    // Diğer sayfalara yönlendirmeler
    if (menuId === 'home') {
      console.log('⚙️ [RULE-GROUPS] Ana sayfaya yönlendiriliyor');
      navigate('/dashboard');
    } else if (menuId === 'updates') {
      console.log('⚙️ [RULE-GROUPS] Updates sayfasına yönlendiriliyor');
      navigate('/updates');
    } else if (menuId === 'reports') {
      console.log('⚙️ [RULE-GROUPS] Reports sayfasına yönlendiriliyor');
      navigate('/reports');
    } else if (menuId === 'settings') {
      console.log('⚙️ [RULE-GROUPS] Settings sayfasına yönlendiriliyor');
      navigate('/settings');
    } else if (menuId === 'nat-settings') {
      console.log('⚙️ [RULE-GROUPS] NAT Settings sayfasına yönlendiriliyor');
      navigate('/nat-settings');
    } else if (menuId === 'dns-management') {
      console.log('⚙️ [RULE-GROUPS] DNS Management sayfasına yönlendiriliyor');
      navigate('/dns-management');
    } else if (menuId === 'routes') {
      console.log('⚙️ [RULE-GROUPS] Routes sayfasına yönlendiriliyor');
      navigate('/routes');
    } else if (menuId === 'interface-settings') {
      console.log('⚙️ [RULE-GROUPS] Interface Settings sayfasına yönlendiriliyor');
      navigate('/interface-settings');
    } else {
      // Diğer menüler için dashboard'a git
      console.log('⚙️ [RULE-GROUPS] Dashboard\'a yönlendiriliyor');
      navigate('/dashboard');
    }
  };

  const filteredGroups = ruleGroups.filter(group =>
    group.name.toLowerCase().includes(searchGroup.toLowerCase()) ||
    group.description.toLowerCase().includes(searchGroup.toLowerCase())
  );

  const StatCard = ({ title, value, icon, color }) => {
    return (
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4 hover:bg-slate-800/70 transition-all duration-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
            <p className="font-bold text-2xl text-white">{value}</p>
          </div>
          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${color}`}>
            {icon}
          </div>
        </div>
      </div>
    );
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  console.log('⚙️ [RULE-GROUPS] Component render ediliyor, state:', {
    activeMenu,
    isLoading,
    groupsCount: ruleGroups.length
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Kural Grupları</h2>
                <span className="text-gray-400 text-sm">Güvenlik duvarı kural gruplarını oluşturun ve yönetin</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    resetForm();
                    setShowAddModal(true);
                  }}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <FaPlus className="text-sm" />
                  <span>Yeni Grup Ekle</span>
                </button>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">Hoş geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <StatCard
              title="Tanımlı Gruplar"
              value={ruleGroups.length}
              icon={<FaCog />}
              color="text-blue-400 bg-blue-500/10"
            />
            <StatCard
              title="Aktif Gruplar"
              value={ruleGroups.filter(g => g.enabled).length}
              icon={<FaCheckCircle />}
              color="text-green-400 bg-green-500/10"
            />
            <StatCard
              title="Toplam Kural Sayısı"
              value={ruleGroups.reduce((sum, group) => sum + (group.ruleCount || 0), 0)}
              icon={<FaShieldAlt />}
              color="text-purple-400 bg-purple-500/10"
            />
          </div>

          {/* Groups List */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <FaCog className="text-blue-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">Tanımlı Gruplar</h3>
                <span className="bg-blue-500/20 text-blue-300 px-2 py-1 rounded-full text-xs font-medium">
                  {filteredGroups.length} adet
                </span>
              </div>
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm" />
                  <input
                    type="text"
                    placeholder="Grup ara..."
                    value={searchGroup}
                    onChange={(e) => setSearchGroup(e.target.value)}
                    className="bg-slate-700/50 border border-slate-600 rounded-lg px-10 py-2 text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            {/* Groups Table */}
            <div className="overflow-x-auto">
              {filteredGroups.length > 0 ? (
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-slate-700/50">
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Grup Adı</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Açıklama</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Kural Sayısı</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Durum</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Son Güncelleme</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">İşlemler</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredGroups.map((group) => (
                      <tr key={group.id} className="border-b border-slate-700/30 hover:bg-slate-700/20 transition-colors">
                        <td className="py-3 px-4">
                          <div>
                            <div className="text-white font-medium">{group.name}</div>
                            <div className="text-gray-400 text-xs">ID: {group.id}</div>
                          </div>
                        </td>
                        <td className="py-3 px-4">
                          <div className="text-gray-300 max-w-xs truncate" title={group.description}>
                            {group.description}
                          </div>
                        </td>
                        <td className="py-3 px-4">
                          <span className="bg-slate-700/50 text-blue-300 px-2 py-1 rounded-full text-sm font-medium">
                            {group.ruleCount || 0} kural
                          </span>
                        </td>
                        <td className="py-3 px-4">
                          <button
                            onClick={() => handleToggleGroup(group.id, !group.enabled)}
                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                              group.enabled ? 'bg-green-600' : 'bg-gray-600'
                            }`}
                          >
                            <span
                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                group.enabled ? 'translate-x-6' : 'translate-x-1'
                              }`}
                            />
                          </button>
                        </td>
                        <td className="py-3 px-4 text-gray-300 text-sm">
                          {formatDate(group.updatedAt || group.createdAt)}
                        </td>
                        <td className="py-3 px-4">
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={() => handleViewGroup(group)}
                              className="text-green-400 hover:text-green-300 p-1 rounded transition-colors"
                              title="Görüntüle"
                            >
                              <FaEye className="text-sm" />
                            </button>
                            <button
                              onClick={() => handleEditGroup(group)}
                              className="text-blue-400 hover:text-blue-300 p-1 rounded transition-colors"
                              title="Düzenle"
                            >
                              <FaEdit className="text-sm" />
                            </button>
                            <button
                              onClick={() => handleDeleteGroup(group.id)}
                              className="text-red-400 hover:text-red-300 p-1 rounded transition-colors"
                              title="Sil"
                            >
                              <FaTrash className="text-sm" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <div className="text-center py-12">
                  <FaCog className="text-gray-500 text-4xl mb-4 mx-auto" />
                  <h4 className="text-white font-medium mb-2">
                    {searchGroup ? 'Arama kriterine uygun kural grubu bulunamadı' : 'Henüz tanımlanmış bir kural grubu bulunmamaktadır.'}
                  </h4>
                  <p className="text-gray-400 text-sm mb-6">
                    {searchGroup
                      ? 'Farklı arama terimleri deneyin'
                      : 'Yukarıdaki Yeni Grup ekle butonu ile başlayabilirsiniz.'
                    }
                  </p>
                  {!searchGroup && (
                    <button
                      onClick={() => {
                        resetForm();
                        setShowAddModal(true);
                      }}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 mx-auto"
                    >
                      <FaPlus className="text-sm" />
                      <span>İlk Grubu Oluştur</span>
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>

          {/* Rule Groups Information */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="flex items-center space-x-3 mb-6">
              <FaInfoCircle className="text-blue-400 text-xl" />
              <h3 className="text-white font-semibold text-lg">Kural Grupları Hakkında</h3>
            </div>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-white font-medium mb-2">Kural Grupları:</h4>
                  <p className="text-gray-400 text-sm">Benzer güvenlik kurallarını organize etmek ve yönetmek için kullanılır. Her grup farklı amaçlar için özelleştirilebilir.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Kullanım Alanları:</h4>
                  <p className="text-gray-400 text-sm">IP engelleme, port kontrolü, protokol filtreleme, coğrafi kısıtlamalar ve zaman tabanlı erişim kontrolleri için.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Avantajları:</h4>
                  <p className="text-gray-400 text-sm">Kuralları kategorilendirir, toplu işlemler yapmanızı sağlar ve güvenlik politikalarını daha düzenli hale getirir.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Dikkat:</h4>
                  <p className="text-gray-400 text-sm">Grup silme işlemi geri alınamaz. Grubu silmeden önce içindeki kuralları başka gruplara taşıyın veya dışa aktarın.</p>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* Add/Edit Group Modal */}
      {showAddModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => {
              setShowAddModal(false);
              resetForm();
            }} />
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block w-full max-w-lg transform overflow-hidden rounded-lg bg-slate-800 text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle">
              <div className="bg-slate-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-white">
                    {editingGroup ? 'Kural Grubu Düzenle' : 'Yeni Kural Grubu Oluştur'}
                  </h3>
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      resetForm();
                    }}
                    className="rounded-md bg-slate-800 text-gray-400 hover:text-gray-300 focus:outline-none"
                  >
                    <FaTimes />
                  </button>
                </div>
                <div className="space-y-4">
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Grup Adı</label>
                    <input
                      type="text"
                      value={newGroup.name}
                      onChange={(e) => setNewGroup(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Örn: Yasaklı IP Adresleri"
                    />
                  </div>
                  <div>
                    <label className="block text-gray-300 font-medium mb-2">Açıklama</label>
                    <textarea
                      value={newGroup.description}
                      onChange={(e) => setNewGroup(prev => ({ ...prev, description: e.target.value }))}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Bu grup ne amaçla kullanılacak? (Opsiyonel)"
                      rows="3"
                    />
                  </div>
                  <div className="flex items-center space-x-3">
                    <label className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={newGroup.enabled}
                        onChange={(e) => setNewGroup(prev => ({ ...prev, enabled: e.target.checked }))}
                        className="sr-only"
                      />
                      <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        newGroup.enabled ? 'bg-green-600' : 'bg-gray-600'
                      }`}>
                        <span
                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                            newGroup.enabled ? 'translate-x-6' : 'translate-x-1'
                          }`}
                        />
                      </div>
                      <span className="ml-3 text-gray-300 font-medium">Grup Etkinleştir</span>
                    </label>
                  </div>
                </div>

                {/* Kural Grubu Bilgilendirmesi */}
                <div className="mt-6 bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                  <div className="flex items-start space-x-3">
                    <FaInfoCircle className="text-blue-400 text-lg mt-0.5 flex-shrink-0" />
                    <div>
                      <p className="text-blue-200 font-medium mb-1">Kural Grubu Bilgilendirmesi</p>
                      <p className="text-blue-200/80 text-sm">
                        Kural grupları benzer güvenlik kurallarını organize etmek için kullanılır. Grup oluşturduktan sonra güvenlik kuralları bölümünden bu gruba kurallar ekleyebilirsiniz.
                      </p>
                    </div>
                  </div>
                </div>

                <div className="mt-6 flex space-x-3">
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      resetForm();
                    }}
                    className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    Vazgeç
                  </button>
                  <button
                    onClick={editingGroup ? handleUpdateGroup : handleAddGroup}
                    disabled={isSaving}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors disabled:opacity-50 flex items-center justify-center space-x-2"
                  >
                    {isSaving ? (
                      <>
                        <FaSync className="animate-spin" />
                        <span>{editingGroup ? 'Güncelleniyor...' : 'Oluşturuluyor...'}</span>
                      </>
                    ) : (
                      <>
                        <FaSave />
                        <span>{editingGroup ? 'Güncelle' : 'Oluştur'}</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* View Group Modal */}
      {showViewModal && viewingGroup && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowViewModal(false)} />
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block w-full max-w-2xl transform overflow-hidden rounded-lg bg-slate-800 text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle">
              <div className="bg-slate-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-white">Kural Grubu Detayları</h3>
                  <button
                    onClick={() => setShowViewModal(false)}
                    className="rounded-md bg-slate-800 text-gray-400 hover:text-gray-300 focus:outline-none"
                  >
                    <FaTimes />
                  </button>
                </div>
                <div className="space-y-6">
                  {/* Grup Bilgileri */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-gray-400 text-sm">Grup Adı</label>
                      <p className="text-white font-medium">{viewingGroup.name}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Durum</label>
                      <p className={`font-medium ${viewingGroup.enabled ? 'text-green-400' : 'text-red-400'}`}>
                        {viewingGroup.enabled ? 'Aktif' : 'Devre Dışı'}
                      </p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Kural Sayısı</label>
                      <p className="text-white font-medium">{viewingGroup.ruleCount || 0}</p>
                    </div>
                    <div>
                      <label className="text-gray-400 text-sm">Oluşturulma Tarihi</label>
                      <p className="text-white font-medium">{formatDate(viewingGroup.createdAt)}</p>
                    </div>
                  </div>
                  <div>
                    <label className="text-gray-400 text-sm">Açıklama</label>
                    <p className="text-white">{viewingGroup.description}</p>
                  </div>

                  {/* Grup Kuralları */}
                  <div>
                    <h4 className="text-white font-medium mb-3">Grup Kuralları</h4>
                    {viewingGroup.rules && viewingGroup.rules.length > 0 ? (
                      <div className="space-y-2">
                        {viewingGroup.rules.map((rule, index) => (
                          <div key={rule.id || index} className="bg-slate-700/30 rounded-lg p-3">
                            <div className="flex items-center justify-between">
                              <span className="text-white">{rule.source || 'N/A'}</span>
                              <div className="flex items-center space-x-2">
                                <span className="text-gray-400 text-sm">{rule.protocol}</span>
                                <span className={`px-2 py-1 rounded-full text-xs ${
                                  rule.action === 'BLOCK' ? 'bg-red-500/20 text-red-300' : 'bg-green-500/20 text-green-300'
                                }`}>
                                  {rule.action}
                                </span>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-6 bg-slate-700/20 rounded-lg">
                        <FaShieldAlt className="text-gray-500 text-2xl mb-2 mx-auto" />
                        <p className="text-gray-400 text-sm">Bu grupta henüz kural bulunmuyor</p>
                      </div>
                    )}
                  </div>
                </div>

                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    onClick={() => setShowViewModal(false)}
                    className="bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    Kapat
                  </button>
                  <button
                    onClick={() => {
                      setShowViewModal(false);
                      handleEditGroup(viewingGroup);
                    }}
                    className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors flex items-center space-x-2"
                  >
                    <FaEdit />
                    <span>Düzenle</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RuleGroups;


================================================
File: src/pages/SecurityRules.css
================================================
.security-rules-page {
  padding: 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.security-icon {
  font-size: 2rem;
}

.page-title h1 {
  color: white;
  font-size: 1.75rem;
  font-weight: 500;
  margin: 0;
}

.page-title p {
  color: #6c757d;
  margin: 0;
  font-size: 0.875rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  transition: all 0.2s ease;
}

.stat-card:hover {
  background: rgba(30, 41, 59, 0.7);
}

.rules-list-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 2rem;
}

.rules-table {
  width: 100%;
  border-collapse: collapse;
}

.rules-table th {
  text-align: left;
  padding: 0.75rem 1rem;
  color: #9ca3af;
  font-weight: 500;
  border-bottom: 1px solid rgba(71, 85, 105, 0.3);
}

.rules-table td {
  padding: 0.75rem 1rem;
  border-bottom: 1px solid rgba(71, 85, 105, 0.2);
}

.rule-row {
  transition: background-color 0.2s ease;
}

.rule-row:hover {
  background: rgba(71, 85, 105, 0.2);
}

.rule-status-toggle {
  position: relative;
  display: inline-flex;
  height: 1.5rem;
  width: 2.75rem;
  align-items: center;
  border-radius: 9999px;
  transition: background-color 0.2s ease;
  cursor: pointer;
  border: none;
}

.rule-status-toggle.active {
  background-color: #16a34a;
}

.rule-status-toggle:not(.active) {
  background-color: #4b5563;
}

.rule-status-toggle-knob {
  display: inline-block;
  height: 1rem;
  width: 1rem;
  border-radius: 9999px;
  background-color: white;
  transition: transform 0.2s ease;
}

.rule-status-toggle.active .rule-status-toggle-knob {
  transform: translateX(1.25rem);
}

.rule-status-toggle:not(.active) .rule-status-toggle-knob {
  transform: translateX(0.25rem);
}

.rule-actions {
  display: flex;
  gap: 0.5rem;
}

.action-button {
  padding: 0.5rem;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.action-button.edit {
  color: #3b82f6;
}

.action-button.edit:hover {
  color: #2563eb;
  background: rgba(59, 130, 246, 0.1);
}

.action-button.delete {
  color: #ef4444;
}

.action-button.delete:hover {
  color: #dc2626;
  background: rgba(239, 68, 68, 0.1);
}

.empty-state {
  text-align: center;
  padding: 3rem;
}

.empty-state-icon {
  color: #6b7280;
  font-size: 3rem;
  margin-bottom: 1rem;
}

.search-input-container {
  position: relative;
}

.search-input {
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.5rem 0.75rem 0.5rem 2.5rem;
  color: white;
  font-size: 0.875rem;
  width: 200px;
}

.search-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.search-icon {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  color: #9ca3af;
  font-size: 0.875rem;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  inset: 0;
  z-index: 50;
  background: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background: #1e293b;
  border-radius: 0.75rem;
  padding: 1.5rem;
  width: 100%;
  max-width: 48rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  max-height: 90vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.modal-title {
  color: white;
  font-size: 1.125rem;
  font-weight: 500;
}

.modal-close {
  color: #9ca3af;
  background: transparent;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  border-radius: 0.375rem;
  transition: color 0.2s ease;
}

.modal-close:hover {
  color: #d1d5db;
}

.modal-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

@media (max-width: 768px) {
  .form-row {
    grid-template-columns: 1fr;
  }
}

.form-group label {
  display: block;
  color: #d1d5db;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.form-input {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.form-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.form-input::placeholder {
  color: #9ca3af;
}

.form-select {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
}

.form-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.form-textarea {
  width: 100%;
  background: rgba(71, 85, 105, 0.5);
  border: 1px solid #4b5563;
  border-radius: 0.5rem;
  padding: 0.75rem;
  color: white;
  font-size: 0.875rem;
  resize: vertical;
  min-height: 80px;
}

.form-textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
}

.time-planning-section {
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.5rem;
  padding: 1rem;
  background: rgba(15, 23, 42, 0.3);
}

.time-planning-header {
  margin-bottom: 1rem;
}

.time-inputs {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

.days-selection {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 0.5rem;
}

.day-button {
  padding: 0.5rem;
  border: 1px solid #4b5563;
  border-radius: 0.375rem;
  background: rgba(71, 85, 105, 0.5);
  color: white;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.day-button.selected {
  background: #3b82f6;
  border-color: #3b82f6;
}

.day-button:hover {
  background: rgba(71, 85, 105, 0.7);
}

.day-button.selected:hover {
  background: #2563eb;
}

.modal-actions {
  display: flex;
  gap: 0.75rem;
  margin-top: 1.5rem;
}

.modal-button {
  flex: 1;
  padding: 0.75rem;
  border-radius: 0.5rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.modal-button.secondary {
  background: #4b5563;
  color: white;
}

.modal-button.secondary:hover {
  background: #374151;
}

.modal-button.primary {
  background: #3b82f6;
  color: white;
}

.modal-button.primary:hover {
  background: #2563eb;
}

.modal-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.info-box {
  background: rgba(59, 130, 246, 0.1);
  border: 1px solid rgba(59, 130, 246, 0.2);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-top: 1rem;
}

.info-content {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.info-icon {
  color: #60a5fa;
  font-size: 1.125rem;
  margin-top: 0.125rem;
  flex-shrink: 0;
}

.info-text {
  color: #dbeafe;
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.info-description {
  color: rgba(219, 234, 254, 0.8);
  font-size: 0.875rem;
}

.info-card {
  background: rgba(30, 41, 59, 0.5);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(71, 85, 105, 0.3);
  border-radius: 0.75rem;
  padding: 1.5rem;
}

.info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

@media (max-width: 768px) {
  .info-grid {
    grid-template-columns: 1fr;
  }
}

.info-item h4 {
  color: white;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.info-item p {
  color: #9ca3af;
  font-size: 0.875rem;
  line-height: 1.5;
}

/* Toggle Switch Styles */
.toggle-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem 0;
}

.toggle-label {
  color: #d1d5db;
  font-weight: 500;
}

.toggle-switch {
  position: relative;
  display: inline-flex;
  height: 1.5rem;
  width: 2.75rem;
  align-items: center;
  border-radius: 9999px;
  transition: background-color 0.2s ease;
  cursor: pointer;
  border: none;
}

.toggle-switch.enabled {
  background-color: #16a34a;
}

.toggle-switch:not(.enabled) {
  background-color: #4b5563;
}

.toggle-switch-knob {
  display: inline-block;
  height: 1rem;
  width: 1rem;
  border-radius: 9999px;
  background-color: white;
  transition: transform 0.2s ease;
}

.toggle-switch.enabled .toggle-switch-knob {
  transform: translateX(1.25rem);
}

.toggle-switch:not(.enabled) .toggle-switch-knob {
  transform: translateX(0.25rem);
}

/* Responsive Design */
@media (max-width: 768px) {
  .security-rules-page {
    padding: 1rem;
  }

  .page-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .header-actions {
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }

  .search-input {
    width: 100%;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .rules-table {
    font-size: 0.875rem;
  }

  .rules-table th,
  .rules-table td {
    padding: 0.5rem;
  }

  .modal-content {
    margin: 1rem;
    max-width: calc(100% - 2rem);
  }

  .modal-actions {
    flex-direction: column;
  }

  .time-inputs {
    grid-template-columns: 1fr;
  }

  .days-selection {
    grid-template-columns: repeat(4, 1fr);
    gap: 0.25rem;
  }

  .day-button {
    padding: 0.375rem 0.25rem;
    font-size: 0.75rem;
  }

  .info-grid {
    grid-template-columns: 1fr;
  }
}

/* Animation for rule items */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.rule-row {
  animation: fadeInUp 0.3s ease-out;
}

/* Loading states */
.loading-shimmer {
  background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* Priority badges */
.priority-high {
  background: rgba(239, 68, 68, 0.2);
  color: #fca5a5;
  border: 1px solid rgba(239, 68, 68, 0.3);
}

.priority-medium {
  background: rgba(245, 158, 11, 0.2);
  color: #fcd34d;
  border: 1px solid rgba(245, 158, 11, 0.3);
}

.priority-low {
  background: rgba(34, 197, 94, 0.2);
  color: #86efac;
  border: 1px solid rgba(34, 197, 94, 0.3);
}

/* Action badges */
.action-allow {
  background: rgba(34, 197, 94, 0.2);
  color: #86efac;
  border: 1px solid rgba(34, 197, 94, 0.3);
}

.action-block {
  background: rgba(239, 68, 68, 0.2);
  color: #fca5a5;
  border: 1px solid rgba(239, 68, 68, 0.3);
}

.badge {
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 700;
  display: inline-flex;
  align-items: center;
}


================================================
File: src/pages/SecurityRules.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import {
  FaShieldAlt,
  FaServer,
  FaCog,
  FaClock,
  FaExclamationTriangle,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaDatabase,
  FaCheckCircle,
  FaPlus,
  FaTrash,
  FaEdit,
  FaTimes,
  FaSave,
  FaInfoCircle,
  FaSearch,
  FaBan,
  FaPlay
} from 'react-icons/fa';
import { securityRulesService } from '../services/securityRulesService';
import './SecurityRules.css';

console.log('🛡️ [SECURITY-RULES] SecurityRules component yüklendi');

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchDataStatus();
    const interval = setInterval(fetchDataStatus, 60000);
    return () => clearInterval(interval);
  }, []);

  const fetchDataStatus = async () => {
    try {
      const response = await securityRulesService.getDataStatus();
      if (response.success) {
        setDataStatus(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Data status fetch error:', error);
      setIsLoading(false);
    }
  };

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    );
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`;
  };

  const isPersistent = dataStatus?.persistence?.enabled && dataStatus?.persistence?.dataCollection;

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus?.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus?.persistence?.systemUptime || 0)}
      </div>
    </div>
  );
};

const SecurityRules = () => {
  console.log('🛡️ [SECURITY-RULES] SecurityRules component render başladı');
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [activeMenu, setActiveMenu] = useState('security-rules');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  // Security Rules State
  const [securityRules, setSecurityRules] = useState([]);
  const [searchRule, setSearchRule] = useState('');
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingRule, setEditingRule] = useState(null);
  const [ruleGroups, setRuleGroups] = useState([]);
  const [newRule, setNewRule] = useState({
    name: '',
    group: '',
    action: 'İzin Ver',
    protocol: 'TCP',
    port: '',
    sourceIp: '',
    direction: 'Çıkan',
    scheduling: '',
    profile: 'Herhangi',
    priority: '100',
    description: '',
    enabled: true,
    // Zaman Planlaması
    startTime: '',
    endTime: '',
    weekDays: []
  });

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCog },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ];

  const weekDaysOptions = [
    { key: 'mon', label: 'Pzt' },
    { key: 'tue', label: 'Sal' },
    { key: 'wed', label: 'Çar' },
    { key: 'thu', label: 'Per' },
    { key: 'fri', label: 'Cum' },
    { key: 'sat', label: 'Cmt' },
    { key: 'sun', label: 'Paz' }
  ];

  useEffect(() => {
    console.log('🛡️ [SECURITY-RULES] useEffect başladı');
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    fetchSecurityRules();
    fetchRuleGroups();

    return () => {
      console.log('🛡️ [SECURITY-RULES] Component unmount, timer temizleniyor');
      clearInterval(timer);
    };
  }, []);

  const fetchSecurityRules = async () => {
    try {
      console.log('🛡️ [SECURITY-RULES] Security rules data fetch başladı');
      setIsLoading(true);
      const response = await securityRulesService.getSecurityRules();
      if (response.success) {
        console.log('🛡️ [SECURITY-RULES] Security rules data başarıyla alındı:', response.data);
        setSecurityRules(response.data || []);
      }
    } catch (error) {
      console.error('🛡️ [SECURITY-RULES] Security rules data fetch error:', error);
      toast.error('Güvenlik kuralları alınamadı');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchRuleGroups = async () => {
    try {
      const response = await securityRulesService.getRuleGroups();
      if (response.success) {
        setRuleGroups(response.data || []);
      }
    } catch (error) {
      console.error('Rule groups fetch error:', error);
      // Set fallback groups
      setRuleGroups([
        { id: '1', name: 'Varsayılan', enabled: true },
        { id: '2', name: 'Web Sunucu', enabled: true },
        { id: '3', name: 'VPN Erişimi', enabled: true }
      ]);
    }
  };

  const handleAddRule = async () => {
    if (!validateRule(newRule)) {
      return;
    }
    try {
      console.log('🛡️ [SECURITY-RULES] Rule ekleniyor:', newRule);
      setIsSaving(true);
      const response = await securityRulesService.createSecurityRule(newRule);
      if (response.success) {
        setSecurityRules(prev => [...prev, response.data]);
        toast.success('Güvenlik kuralı başarıyla oluşturuldu');
        resetForm();
        setShowAddModal(false);
      }
    } catch (error) {
      console.error('Add rule error:', error);
      toast.error('Güvenlik kuralı oluşturulurken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleEditRule = (rule) => {
    setEditingRule(rule);
    setNewRule({
      name: rule.name,
      group: rule.group,
      action: rule.action,
      protocol: rule.protocol,
      port: rule.port,
      sourceIp: rule.sourceIp,
      direction: rule.direction,
      scheduling: rule.scheduling,
      profile: rule.profile,
      priority: rule.priority.toString(),
      description: rule.description || '',
      enabled: rule.enabled,
      startTime: rule.startTime || '',
      endTime: rule.endTime || '',
      weekDays: rule.weekDays || []
    });
    setShowAddModal(true);
  };

  const handleUpdateRule = async () => {
    if (!validateRule(newRule)) {
      return;
    }
    try {
      console.log('🛡️ [SECURITY-RULES] Rule güncelleniyor:', editingRule.id, newRule);
      setIsSaving(true);
      const response = await securityRulesService.updateSecurityRule(editingRule.id, newRule);
      if (response.success) {
        setSecurityRules(prev => prev.map(rule =>
          rule.id === editingRule.id
            ? { ...rule, ...newRule, priority: parseInt(newRule.priority), updatedAt: new Date().toISOString() }
            : rule
        ));
        toast.success('Güvenlik kuralı başarıyla güncellendi');
        resetForm();
        setShowAddModal(false);
        setEditingRule(null);
      }
    } catch (error) {
      console.error('Update rule error:', error);
      toast.error('Güvenlik kuralı güncellenirken hata oluştu');
    } finally {
      setIsSaving(false);
    }
  };

  const handleDeleteRule = async (ruleId) => {
    if (!window.confirm('Bu güvenlik kuralını silmek istediğinizden emin misiniz?')) {
      return;
    }
    try {
      console.log('🛡️ [SECURITY-RULES] Rule siliniyor:', ruleId);
      const response = await securityRulesService.deleteSecurityRule(ruleId);
      if (response.success) {
        setSecurityRules(prev => prev.filter(rule => rule.id !== ruleId));
        toast.success('Güvenlik kuralı başarıyla silindi');
      }
    } catch (error) {
      console.error('Delete rule error:', error);
      toast.error('Güvenlik kuralı silinirken hata oluştu');
    }
  };

  const handleToggleRule = async (ruleId, enabled) => {
    try {
      const response = await securityRulesService.toggleSecurityRule(ruleId, enabled);
      if (response.success) {
        setSecurityRules(prev => prev.map(rule =>
          rule.id === ruleId ? { ...rule, enabled } : rule
        ));
        toast.success(`Güvenlik kuralı ${enabled ? 'etkinleştirildi' : 'devre dışı bırakıldı'}`);
      }
    } catch (error) {
      console.error('Toggle rule error:', error);
      toast.error('Güvenlik kuralı durumu değiştirilemedi');
    }
  };

  const validateRule = (rule) => {
    if (!rule.name.trim()) {
      toast.error('Kural adı gerekli');
      return false;
    }
    if (!rule.sourceIp.trim()) {
      toast.error('Kaynak IP adresi gerekli');
      return false;
    }

    // Port validation
    if (rule.port && rule.port !== 'Herhangi') {
      const portNum = parseInt(rule.port);
      if (isNaN(portNum) || portNum < 1 || portNum > 65535) {
        toast.error('Geçersiz port numarası (1-65535)');
        return false;
      }
    }

    // Priority validation
    const priorityNum = parseInt(rule.priority);
    if (isNaN(priorityNum) || priorityNum < 1 || priorityNum > 1000) {
      toast.error('Geçersiz öncelik değeri (1-1000)');
      return false;
    }

    return true;
  };

  const resetForm = () => {
    setNewRule({
      name: '',
      group: '',
      action: 'İzin Ver',
      protocol: 'TCP',
      port: '',
      sourceIp: '',
      direction: 'Çıkan',
      scheduling: '',
      profile: 'Herhangi',
      priority: '100',
      description: '',
      enabled: true,
      startTime: '',
      endTime: '',
      weekDays: []
    });
    setEditingRule(null);
  };

  const handleWeekDayToggle = (day) => {
    setNewRule(prev => ({
      ...prev,
      weekDays: prev.weekDays.includes(day)
        ? prev.weekDays.filter(d => d !== day)
        : [...prev.weekDays, day]
    }));
  };

  const handleLogout = async () => {
    try {
      console.log('🛡️ [SECURITY-RULES] Logout başladı');
      await logout();
      toast.success('Başarıyla çıkış yapıldı');
    } catch (error) {
      console.error('Logout error:', error);
      toast.error('Çıkış yapılırken hata oluştu');
    }
  };

  // GÜNCELLENMİŞ HANDLE MENU CLICK FONKSİYONU (320. satır civarı)
  const handleMenuClick = (menuId) => {
    console.log('🛡️ [SECURITY-RULES] Menu tıklandı:', menuId);
    if (menuId === 'security-rules') {
      console.log('🛡️ [SECURITY-RULES] Security Rules seçildi, activeMenu güncelleniyor');
      setActiveMenu(menuId);
      return;
    }

    // Diğer sayfalara yönlendirmeler
    if (menuId === 'home') {
      console.log('🛡️ [SECURITY-RULES] Ana sayfaya yönlendiriliyor');
      navigate('/dashboard');
    } else if (menuId === 'updates') {
      console.log('🛡️ [SECURITY-RULES] Updates sayfasına yönlendiriliyor');
      navigate('/updates');
    } else if (menuId === 'reports') {
      console.log('🛡️ [SECURITY-RULES] Reports sayfasına yönlendiriliyor');
      navigate('/reports');
    } else if (menuId === 'settings') {
      console.log('🛡️ [SECURITY-RULES] Settings sayfasına yönlendiriliyor');
      navigate('/settings');
    } else if (menuId === 'nat-settings') {
      console.log('🛡️ [SECURITY-RULES] NAT Settings sayfasına yönlendiriliyor');
      navigate('/nat-settings');
    } else if (menuId === 'dns-management') {
      console.log('🛡️ [SECURITY-RULES] DNS Management sayfasına yönlendiriliyor');
      navigate('/dns-management');
    } else if (menuId === 'routes') {
      console.log('🛡️ [SECURITY-RULES] Routes sayfasına yönlendiriliyor');
      navigate('/routes');
    } else if (menuId === 'rule-groups') {
      console.log('🛡️ [SECURITY-RULES] Rule Groups sayfasına yönlendiriliyor');
      navigate('/rule-groups');
    } else if (menuId === 'interface-settings') {
      console.log('🛡️ [SECURITY-RULES] Interface Settings sayfasına yönlendiriliyor');
      navigate('/interface-settings');
    } else {
      // Diğer menüler için dashboard'a git
      console.log('🛡️ [SECURITY-RULES] Dashboard\'a yönlendiriliyor');
      navigate('/dashboard');
    }
  };

  const filteredRules = securityRules.filter(rule =>
    rule.name.toLowerCase().includes(searchRule.toLowerCase()) ||
    rule.sourceIp.toLowerCase().includes(searchRule.toLowerCase()) ||
    rule.action.toLowerCase().includes(searchRule.toLowerCase())
  );

  const StatCard = ({ title, value, icon, color }) => {
    return (
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4 hover:bg-slate-800/70 transition-all duration-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
            <p className="font-bold text-2xl text-white">{value}</p>
          </div>
          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${color}`}>
            {icon}
          </div>
        </div>
      </div>
    );
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('tr-TR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  console.log('🛡️ [SECURITY-RULES] Component render ediliyor, state:', {
    activeMenu,
    isLoading,
    rulesCount: securityRules.length
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Güvenlik Kuralları</h2>
                <span className="text-gray-400 text-sm">Yeni Kural Ekle</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    resetForm();
                    setShowAddModal(true);
                  }}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <FaPlus className="text-sm" />
                  <span>Yeni Kural Ekle</span>
                </button>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">Hoş geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <StatCard
              title="Aktif Kurallar"
              value={`${securityRules.filter(r => r.enabled).length} Adet`}
              icon={<FaShieldAlt />}
              color="text-green-400 bg-green-500/10"
            />
            <StatCard
              title="Toplam Kurallar"
              value={securityRules.length}
              icon={<FaCog />}
              color="text-blue-400 bg-blue-500/10"
            />
            <StatCard
              title="Engelleme Kuralları"
              value={securityRules.filter(r => r.action === 'Engelle').length}
              icon={<FaBan />}
              color="text-red-400 bg-red-500/10"
            />
          </div>

          {/* Rules List */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 mb-8">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <FaShieldAlt className="text-blue-400 text-xl" />
                <h3 className="text-white font-semibold text-lg">Aktif Kurallar ({filteredRules.filter(r => r.enabled).length} Adet)</h3>
              </div>
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm" />
                  <input
                    type="text"
                    placeholder="Kural ara..."
                    value={searchRule}
                    onChange={(e) => setSearchRule(e.target.value)}
                    className="bg-slate-700/50 border border-slate-600 rounded-lg px-10 py-2 text-white text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            {/* Rules Table */}
            <div className="overflow-x-auto">
              {filteredRules.length > 0 ? (
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-slate-700/50">
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Kural Adı</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Grup</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">İşlem</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Protokol</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Port</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Kaynak IP</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Yön</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Zamanlama</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">Durum</th>
                      <th className="text-left py-3 px-4 text-gray-400 font-medium">İşlemler</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredRules.map((rule) => (
                      <tr key={rule.id} className="border-b border-slate-700/30 hover:bg-slate-700/20 transition-colors">
                        <td className="py-3 px-4">
                          <div className="text-white font-medium">{rule.name}</div>
                          <div className="text-gray-400 text-xs">Öncelik: {rule.priority}</div>
                        </td>
                        <td className="py-3 px-4 text-gray-300">{rule.group || 'Seçiniz'}</td>
                        <td className="py-3 px-4">
                          <span className={`badge ${rule.action === 'İzin Ver' ? 'action-allow' : 'action-block'}`}>
                            {rule.action}
                          </span>
                        </td>
                        <td className="py-3 px-4 text-gray-300">{rule.protocol}</td>
                        <td className="py-3 px-4 text-gray-300">{rule.port || 'Herhangi'}</td>
                        <td className="py-3 px-4 text-gray-300">{rule.sourceIp}</td>
                        <td className="py-3 px-4 text-gray-300">{rule.direction}</td>
                        <td className="py-3 px-4 text-gray-300">
                          {rule.startTime && rule.endTime
                            ? `${rule.startTime} - ${rule.endTime}`
                            : 'Her zaman'
                          }
                        </td>
                        <td className="py-3 px-4">
                          <button
                            onClick={() => handleToggleRule(rule.id, !rule.enabled)}
                            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                              rule.enabled ? 'bg-green-600' : 'bg-gray-600'
                            }`}
                          >
                            <span
                              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                rule.enabled ? 'translate-x-6' : 'translate-x-1'
                              }`}
                            />
                          </button>
                        </td>
                        <td className="py-3 px-4">
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={() => handleEditRule(rule)}
                              className="text-blue-400 hover:text-blue-300 p-1 rounded transition-colors"
                              title="Düzenle"
                            >
                              <FaEdit className="text-sm" />
                            </button>
                            <button
                              onClick={() => handleDeleteRule(rule.id)}
                              className="text-red-400 hover:text-red-300 p-1 rounded transition-colors"
                              title="Sil"
                            >
                              <FaTrash className="text-sm" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <div className="text-center py-12">
                  <FaShieldAlt className="text-gray-500 text-4xl mb-4 mx-auto" />
                  <h4 className="text-white font-medium mb-2">
                    {searchRule ? 'Arama kriterine uygun kural bulunamadı' : 'Henüz güvenlik kuralı yok'}
                  </h4>
                  <p className="text-gray-400 text-sm mb-6">
                    {searchRule
                      ? 'Farklı arama terimleri deneyin'
                      : 'İlk güvenlik kuralını oluşturmak için yukarıdaki butonu kullanın'
                    }
                  </p>
                  {!searchRule && (
                    <button
                      onClick={() => {
                        resetForm();
                        setShowAddModal(true);
                      }}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 mx-auto"
                    >
                      <FaPlus className="text-sm" />
                      <span>İlk Kuralı Oluştur</span>
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>

          {/* Security Rules Information */}
          <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="flex items-center space-x-3 mb-6">
              <FaInfoCircle className="text-blue-400 text-xl" />
              <h3 className="text-white font-semibold text-lg">Güvenlik Kuralları Hakkında</h3>
            </div>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-white font-medium mb-2">Güvenlik Kuralları:</h4>
                  <p className="text-gray-400 text-sm">Ağ trafiğini kontrol etmek ve güvenliği sağlamak için kullanılan kurallar. Her kural belirli kriterlere göre trafiği engeller veya izin verir.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Kural Önceliği:</h4>
                  <p className="text-gray-400 text-sm">Düşük sayısal değer yüksek öncelik anlamına gelir. Kurallar öncelik sırasına göre işlenir ve ilk eşleşen kural uygulanır.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Yön Kontrolü:</h4>
                  <p className="text-gray-400 text-sm">Gelen ve çıkan trafik için ayrı kurallar tanımlanabilir. Bu sayede ağ güvenliği her iki yönde de kontrol edilir.</p>
                </div>
                <div>
                  <h4 className="text-white font-medium mb-2">Zaman Planlaması:</h4>
                  <p className="text-gray-400 text-sm">Kuralları belirli saatler ve günlerde aktif hale getirebilirsiniz. Bu özellik çalışma saatleri gibi zaman kısıtlamaları için kullanışlıdır.</p>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* Add/Edit Rule Modal */}
      {showAddModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => {
              setShowAddModal(false);
              resetForm();
            }} />
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block w-full max-w-4xl transform overflow-hidden rounded-lg bg-slate-800 text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle">
              <div className="bg-slate-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-white">
                    {editingRule ? 'Güvenlik Kuralını Düzenle' : 'Yeni Güvenlik Kuralı Ekle'}
                  </h3>
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      resetForm();
                    }}
                    className="rounded-md bg-slate-800 text-gray-400 hover:text-gray-300 focus:outline-none"
                  >
                    <FaTimes />
                  </button>
                </div>
                <div className="space-y-6">
                  {/* Temel Bilgiler */}
                  <div className="form-row">
                    <div className="form-group">
                      <label>Kural Adı</label>
                      <input
                        type="text"
                        value={newRule.name}
                        onChange={(e) => setNewRule(prev => ({ ...prev, name: e.target.value }))}
                        className="form-input"
                        placeholder="Web Sunucu Erişimi"
                      />
                    </div>
                    <div className="form-group">
                      <label>Grup</label>
                      <select
                        value={newRule.group}
                        onChange={(e) => setNewRule(prev => ({ ...prev, group: e.target.value }))}
                        className="form-select"
                      >
                        <option value="">Seçiniz</option>
                        {ruleGroups.map((group) => (
                          <option key={group.id} value={group.name}>
                            {group.name}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>

                  {/* İşlem ve Protokol */}
                  <div className="form-row">
                    <div className="form-group">
                      <label>İşlem</label>
                      <select
                        value={newRule.action}
                        onChange={(e) => setNewRule(prev => ({ ...prev, action: e.target.value }))}
                        className="form-select"
                      >
                        <option value="İzin Ver">İzin Ver</option>
                        <option value="Engelle">Engelle</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Protokol</label>
                      <select
                        value={newRule.protocol}
                        onChange={(e) => setNewRule(prev => ({ ...prev, protocol: e.target.value }))}
                        className="form-select"
                      >
                        <option value="TCP">TCP</option>
                        <option value="UDP">UDP</option>
                        <option value="Her ikisi">Her ikisi</option>
                      </select>
                    </div>
                  </div>

                  {/* Port ve Kaynak IP */}
                  <div className="form-row">
                    <div className="form-group">
                      <label>Port</label>
                      <input
                        type="text"
                        value={newRule.port}
                        onChange={(e) => setNewRule(prev => ({ ...prev, port: e.target.value }))}
                        className="form-input"
                        placeholder="80, 443, 1000-2000 veya Herhangi"
                      />
                    </div>
                    <div className="form-group">
                      <label>Kaynak IP</label>
                      <input
                        type="text"
                        value={newRule.sourceIp}
                        onChange={(e) => setNewRule(prev => ({ ...prev, sourceIp: e.target.value }))}
                        className="form-input"
                        placeholder="192.168.1.100 veya 192.168.1.0/24"
                      />
                    </div>
                  </div>

                  {/* Yön ve Profil */}
                  <div className="form-row">
                    <div className="form-group">
                      <label>Yön</label>
                      <select
                        value={newRule.direction}
                        onChange={(e) => setNewRule(prev => ({ ...prev, direction: e.target.value }))}
                        className="form-select"
                      >
                        <option value="Çıkan">Çıkan</option>
                        <option value="Gelen">Gelen</option>
                        <option value="Her ikisi">Her ikisi</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Profil</label>
                      <select
                        value={newRule.profile}
                        onChange={(e) => setNewRule(prev => ({ ...prev, profile: e.target.value }))}
                        className="form-select"
                      >
                        <option value="Herhangi">Herhangi</option>
                        <option value="Özel">Özel</option>
                        <option value="Genel">Genel</option>
                        <option value="Domain">Domain</option>
                      </select>
                    </div>
                  </div>

                  {/* Öncelik */}
                  <div className="form-row">
                    <div className="form-group">
                      <label>Öncelik</label>
                      <input
                        type="number"
                        min="1"
                        max="1000"
                        value={newRule.priority}
                        onChange={(e) => setNewRule(prev => ({ ...prev, priority: e.target.value }))}
                        className="form-input"
                        placeholder="100"
                      />
                      <div className="flex items-center space-x-2 mt-2">
                        <button
                          type="button"
                          onClick={() => setNewRule(prev => ({ ...prev, priority: Math.max(1, parseInt(prev.priority || 100) - 10).toString() }))}
                          className="bg-slate-600 hover:bg-slate-500 text-white px-3 py-1 rounded text-sm"
                        >
                          -
                        </button>
                        <button
                          type="button"
                          onClick={() => setNewRule(prev => ({ ...prev, priority: Math.min(1000, parseInt(prev.priority || 100) + 10).toString() }))}
                          className="bg-slate-600 hover:bg-slate-500 text-white px-3 py-1 rounded text-sm"
                        >
                          +
                        </button>
                      </div>
                    </div>
                    <div className="form-group">
                      <label>Açıklama</label>
                      <textarea
                        value={newRule.description}
                        onChange={(e) => setNewRule(prev => ({ ...prev, description: e.target.value }))}
                        className="form-textarea"
                        placeholder="Kural hakkında açıklama..."
                        rows="3"
                      />
                    </div>
                  </div>

                  {/* Zaman Planlaması */}
                  <div className="time-planning-section">
                    <div className="time-planning-header">
                      <h4 className="text-white font-medium mb-2">Zaman Planlaması</h4>
                      <p className="text-gray-400 text-sm">Kuralın hangi saatlerde ve günlerde aktif olacağını belirleyin</p>
                    </div>
                    <div className="time-inputs">
                      <div className="form-group">
                        <label>Başlangıç Saati</label>
                        <input
                          type="time"
                          value={newRule.startTime}
                          onChange={(e) => setNewRule(prev => ({ ...prev, startTime: e.target.value }))}
                          className="form-input"
                        />
                      </div>
                      <div className="form-group">
                        <label>Bitiş Saati</label>
                        <input
                          type="time"
                          value={newRule.endTime}
                          onChange={(e) => setNewRule(prev => ({ ...prev, endTime: e.target.value }))}
                          className="form-input"
                        />
                      </div>
                    </div>
                    <div className="form-group">
                      <label>Haftanın Günleri</label>
                      <div className="days-selection">
                        {weekDaysOptions.map((day) => (
                          <button
                            key={day.key}
                            type="button"
                            onClick={() => handleWeekDayToggle(day.key)}
                            className={`day-button ${newRule.weekDays.includes(day.key) ? 'selected' : ''}`}
                          >
                            {day.label}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Kural Etkin */}
                  <div className="toggle-container">
                    <span className="toggle-label">Kural Etkin</span>
                    <button
                      type="button"
                      onClick={() => setNewRule(prev => ({ ...prev, enabled: !prev.enabled }))}
                      className={`toggle-switch ${newRule.enabled ? 'enabled' : ''}`}
                    >
                      <span className="toggle-switch-knob" />
                    </button>
                  </div>
                </div>

                {/* Bilgilendirme */}
                <div className="info-box">
                  <div className="info-content">
                    <FaInfoCircle className="info-icon" />
                    <div>
                      <p className="info-text">Güvenlik Kuralı Bilgilendirmesi</p>
                      <p className="info-description">
                        Düşük öncelik numarası yüksek öncelik anlamına gelir. Kurallar sırayla işlenir ve ilk eşleşen kural uygulanır.
                        Zaman planlaması boş bırakılırsa kural her zaman aktif olur.
                      </p>
                    </div>
                  </div>
                </div>

                <div className="modal-actions">
                  <button
                    onClick={() => {
                      setShowAddModal(false);
                      resetForm();
                    }}
                    className="modal-button secondary"
                  >
                    Vazgeç
                  </button>
                  <button
                    onClick={editingRule ? handleUpdateRule : handleAddRule}
                    disabled={isSaving}
                    className="modal-button primary"
                  >
                    {isSaving ? (
                      <>
                        <FaSync className="animate-spin" />
                        <span>{editingRule ? 'Güncelleniyor...' : 'Ekleniyor...'}</span>
                      </>
                    ) : (
                      <>
                        <FaSave />
                        <span>{editingRule ? 'Güncelle' : 'Ekle'}</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default SecurityRules;


================================================
File: src/pages/Settings.css
================================================
.settings-page {
  padding: 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.settings-icon {
  font-size: 2rem;
}

.page-title h1 {
  color: white;
  font-size: 1.75rem;
  font-weight: 500;
  margin: 0;
}

.page-title p {
  color: #6c757d;
  margin: 0;
  font-size: 0.875rem;
}

.header-actions {
  display: flex;
  gap: 0.75rem;
}

.alert {
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  margin-bottom: 1.5rem;
  border: 1px solid;
}

.alert-success {
  background-color: rgba(40, 167, 69, 0.1);
  border-color: #28a745;
  color: #28a745;
}

.alert-error {
  background-color: rgba(220, 53, 69, 0.1);
  border-color: #dc3545;
  color: #dc3545;
}

.settings-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

@media (max-width: 1024px) {
  .settings-grid {
    grid-template-columns: 1fr;
  }
}

.settings-card {
  margin-bottom: 1.5rem;
}

.card-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1.5rem;
}

.card-icon {
  font-size: 1.25rem;
}

.card-header h3 {
  color: white;
  font-size: 1.125rem;
  font-weight: 500;
  margin: 0;
}

.settings-form .form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

@media (max-width: 768px) {
  .settings-form .form-row {
    grid-template-columns: 1fr;
  }
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.form-group label {
  color: #6c757d;
  font-size: 0.875rem;
  font-weight: 500;
}

.settings-toggles {
  border-top: 1px solid #3a3f51;
  padding-top: 1.5rem;
  margin-top: 1.5rem;
}

.setting-toggle {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 0;
  border-bottom: 1px solid #3a3f51;
}

.setting-toggle:last-child {
  border-bottom: none;
}

.toggle-info {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.toggle-icon {
  font-size: 1.25rem;
}

.toggle-title {
  color: white;
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.toggle-subtitle {
  color: #6c757d;
  font-size: 0.75rem;
}

.backup-info {
  background-color: #1e3a8a;
  padding: 1rem;
  border-radius: 0.5rem;
  margin-top: 1.5rem;
}

.backup-info h4 {
  color: white;
  margin: 0 0 0.75rem 0;
  font-size: 1rem;
}

.backup-info ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.backup-info li {
  color: #93c5fd;
  font-size: 0.875rem;
  margin-bottom: 0.25rem;
}

.system-info .info-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

@media (max-width: 768px) {
  .system-info .info-row {
    grid-template-columns: 1fr;
  }
}

.info-item {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.info-item label {
  color: #6c757d;
  font-size: 0.875rem;
}

.info-item span {
  color: white;
  font-weight: 500;
}

.progress-info {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.progress-info span {
  color: #6c757d;
  font-size: 0.75rem;
}

.quick-actions {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0.75rem;
}

@media (max-width: 768px) {
  .quick-actions {
    grid-template-columns: 1fr;
  }
}

.action-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem;
  font-size: 0.875rem;
}

.btn-icon {
  font-size: 1rem;
}

.restart-btn {
  border-color: #007bff;
  color: #007bff;
}

.restart-btn:hover {
  background-color: rgba(0, 123, 255, 0.1);
}

.backup-btn {
  border-color: #28a745;
  color: #28a745;
}

.backup-btn:hover {
  background-color: rgba(40, 167, 69, 0.1);
}

.update-btn {
  border-color: #ffc107;
  color: #ffc107;
}

.update-btn:hover {
  background-color: rgba(255, 193, 7, 0.1);
}

.delete-btn {
  border-color: #dc3545;
  color: #dc3545;
}

.delete-btn:hover {
  background-color: rgba(220, 53, 69, 0.1);
}

.security-status .status-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 0;
  border-bottom: 1px solid #3a3f51;
}

.security-status .status-item:last-child {
  border-bottom: none;
}

.security-status .status-item span {
  color: white;
  font-size: 0.875rem;
}

.status-time {
  color: #6c757d !important;
}


================================================
File: src/pages/Settings.jsx
================================================
import React, { useState, useEffect, useCallback, useMemo } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { useNavigate } from 'react-router-dom'
import { toast } from 'react-hot-toast'
import { settingsService } from '../services/settingsService'
// React Icons
import {
  FaShieldAlt,
  FaServer,
  FaCog,
  FaClock,
  FaExclamationTriangle,
  FaLock,
  FaHome,
  FaChartBar,
  FaNetworkWired,
  FaRoute,
  FaWrench,
  FaFileAlt,
  FaSync,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaGlobe,
  FaDatabase,
  FaRedo,
  FaTrash,
  FaCheckCircle,
  FaSpinner,
  FaDownload
} from 'react-icons/fa'
import './Settings.css'

console.log('⚙️ [SETTINGS] Settings component yüklendi')

// Data Persistence Indicator Component - Optimized
const DataPersistenceIndicator = React.memo(() => {
  const [dataStatus, setDataStatus] = useState(null)
  const [isLoading, setIsLoading] = useState(true)

  const fetchDataStatus = useCallback(async () => {
    try {
      const response = await settingsService.getDataStatus()
      if (response.success) {
        setDataStatus(response.data)
      }
      setIsLoading(false)
    } catch (error) {
      console.error('Data status fetch error:', error)
      setIsLoading(false)
    }
  }, [])

  useEffect(() => {
    fetchDataStatus()
    const interval = setInterval(fetchDataStatus, 60000) // 1 dakika
    return () => clearInterval(interval)
  }, [fetchDataStatus])

  const formatUptime = useCallback((seconds) => {
    const days = Math.floor(seconds / 86400)
    const hours = Math.floor((seconds % 86400) / 3600)
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`
  }, [])

  const isPersistent = useMemo(() =>
    dataStatus?.persistence?.enabled && dataStatus?.persistence?.dataCollection,
    [dataStatus]
  )

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    )
  }

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Aktif'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus?.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus?.persistence?.systemUptime || 0)}
      </div>
    </div>
  )
})

const Settings = () => {
  console.log('⚙️ [SETTINGS] Settings component render başladı')
  const { user, logout } = useAuth()
  const navigate = useNavigate()

  const [activeMenu, setActiveMenu] = useState('settings')
  const [isCollapsed, setIsCollapsed] = useState(false)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [isLoading, setIsLoading] = useState(false)
  const [actionLoading, setActionLoading] = useState(null)
  const [dataFetched, setDataFetched] = useState(false) // Prevent multiple fetches

  const [settings, setSettings] = useState({
    timezone: 'Türkiye (UTC+3)',
    language: 'Türkçe',
    sessionTimeout: 60,
    logLevel: 'Info (Normal)',
    autoUpdates: true,
    systemNotifications: true,
    darkTheme: true,
    backupFrequency: 'Haftalık',
    backupLocation: '/opt/firewall/backups'
  })

  const [systemInfo, setSystemInfo] = useState({
    version: '1.0.0',
    uptime: '2 gün 14 saat',
    memoryUsage: 24,
    diskUsage: 45,
    totalMemory: '8 GB',
    totalDisk: '100 GB',
    cpuUsage: 0,
    platform: 'Linux'
  })

  const [securityStatus, setSecurityStatus] = useState({
    firewall: 'Aktif',
    ssl: 'Güncel',
    lastScan: '2 saat önce'
  })

  // Memoized menu items - prevent recreation on every render
  const menuItems = useMemo(() => [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCog },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ], [])

  // Optimized fetchSettingsData with useCallback
  const fetchSettingsData = useCallback(async () => {
    // Prevent multiple simultaneous fetches
    if (dataFetched) return

    try {
      console.log('📡 [SETTINGS] Settings data fetch başladı')
      setIsLoading(true)
      setDataFetched(true)

      // Gerçek API çağrıları
      const [settingsData, systemData, securityData] = await Promise.allSettled([
        settingsService.getSettings(),
        settingsService.getSystemInfo(),
        settingsService.getSecurityStatus()
      ])

      // Settings data
      if (settingsData.status === 'fulfilled' && settingsData.value.success) {
        const generalSettings = settingsData.value.data.general || {}
        setSettings(prevSettings => ({
          ...prevSettings,
          timezone: generalSettings.timezone || 'Türkiye (UTC+3)',
          language: generalSettings.language || 'Türkçe',
          sessionTimeout: generalSettings.sessionTimeout || 60,
          logLevel: generalSettings.logLevel || 'Info (Normal)',
          // Diğer ayarlar
          autoUpdates: settingsData.value.data.autoUpdates?.enabled ?? true,
          systemNotifications: settingsData.value.data.systemFeedback?.enabled ?? true,
          darkTheme: settingsData.value.data.darkTheme?.enabled ?? true,
          backupFrequency: settingsData.value.data.backup?.frequency || 'Haftalık',
          backupLocation: settingsData.value.data.backup?.location || '/opt/firewall/backups'
        }))
        console.log('✅ [SETTINGS] Settings data loaded:', settingsData.value.data)
      } else {
        console.warn('⚠️ [SETTINGS] Settings fetch failed:', settingsData.reason || 'No data')
      }

      // System info data
      if (systemData.status === 'fulfilled' && systemData.value.success) {
        const sysData = systemData.value.data
        setSystemInfo({
          version: sysData.version || '1.0.0',
          uptime: sysData.uptime || '2 gün 14 saat',
          memoryUsage: sysData.memoryUsage || 24,
          diskUsage: sysData.diskUsage || 45,
          totalMemory: `${sysData.memoryTotal || 8} GB`,
          totalDisk: `${sysData.diskTotal || 100} GB`,
          cpuUsage: sysData.cpuUsage || 0,
          platform: sysData.platform || 'Linux'
        })
        console.log('✅ [SETTINGS] System info loaded:', sysData)
      } else {
        console.warn('⚠️ [SETTINGS] System info fetch failed:', systemData.reason || 'No data')
      }

      // Security status data
      if (securityData.status === 'fulfilled' && securityData.value.success) {
        const secData = securityData.value.data
        setSecurityStatus({
          firewall: secData.firewall?.status || 'Aktif',
          ssl: secData.ssl?.status || 'Güncel',
          lastScan: secData.lastScan?.timeAgo || '2 saat önce'
        })
        console.log('✅ [SETTINGS] Security status loaded:', secData)
      } else {
        console.warn('⚠️ [SETTINGS] Security status fetch failed:', securityData.reason || 'No data')
      }

      console.log('✅ [SETTINGS] Settings data fetch tamamlandı')
      setIsLoading(false)
    } catch (error) {
      console.error('❌ [SETTINGS] Settings data fetch error:', error)
      toast.error('Ayarlar yüklenirken hata oluştu')
      setIsLoading(false)
    } finally {
      // Allow future fetches
      setTimeout(() => setDataFetched(false), 2000)
    }
  }, [dataFetched])

  // Clock effect - separate from data fetching
  useEffect(() => {
    console.log('🔄 [SETTINGS] Clock timer başladı')
    const timer = setInterval(() => {
      setCurrentTime(new Date())
    }, 1000)
    return () => clearInterval(timer)
  }, [])

  // Data fetching effect - runs only once
  useEffect(() => {
    console.log('🔄 [SETTINGS] Data fetch useEffect başladı')
    fetchSettingsData()
  }, []) // Empty dependency array - runs only once

  // Optimized handlers with useCallback
  const handleSettingChange = useCallback((key, value) => {
    console.log('📝 [SETTINGS] Setting değişti:', key, value)
    setSettings(prev => ({
      ...prev,
      [key]: value
    }))
  }, [])

  const handleSaveSettings = useCallback(async () => {
    try {
      console.log('💾 [SETTINGS] Settings kaydediliyor...')
      setIsLoading(true)
      const response = await settingsService.updateGeneralSettings({
        timezone: settings.timezone,
        language: settings.language,
        sessionTimeout: parseInt(settings.sessionTimeout)
      })

      if (response.success) {
        toast.success(response.message || 'Ayarlar başarıyla kaydedildi')
        console.log('✅ [SETTINGS] Settings kaydedildi')
        // Ayarları yeniden yükle (with delay to prevent race condition)
        setTimeout(() => {
          setDataFetched(false)
          fetchSettingsData()
        }, 1000)
      } else {
        throw new Error(response.message || 'Ayarlar kaydedilemedi')
      }
      setIsLoading(false)
    } catch (error) {
      console.error('❌ [SETTINGS] Settings kaydetme hatası:', error)
      toast.error(error.response?.data?.detail || error.message || 'Ayarlar kaydedilirken hata oluştu')
      setIsLoading(false)
    }
  }, [settings.timezone, settings.language, settings.sessionTimeout, fetchSettingsData])

  const handleQuickAction = useCallback(async (action) => {
    try {
      console.log('⚡ [SETTINGS] Quick action başladı:', action)
      setActionLoading(action)
      let confirmMessage = ''
      let apiCall = null

      switch (action) {
        case 'restart':
          confirmMessage = 'Sistemi yeniden başlatmak istediğinizden emin misiniz?'
          apiCall = () => settingsService.restartSystem()
          break
        case 'backup':
          apiCall = () => settingsService.createBackup()
          break
        case 'update':
          apiCall = () => settingsService.checkUpdates()
          break
        case 'clear-logs':
          confirmMessage = 'Logları temizlemek istediğinizden emin misiniz? Bu işlem geri alınamaz!'
          apiCall = () => settingsService.clearLogs()
          break
        default:
          setActionLoading(null)
          return
      }

      if (confirmMessage && !window.confirm(confirmMessage)) {
        setActionLoading(null)
        return
      }

      const response = await apiCall()
      if (response.success) {
        toast.success(response.message || 'İşlem başarıyla tamamlandı')
        console.log('✅ [SETTINGS] Quick action tamamlandı:', action, response)
        // Eğer sistem bilgileri değiştiyse, yeniden yükle
        if (action === 'clear-logs') {
          setTimeout(() => {
            setDataFetched(false)
            fetchSettingsData()
          }, 2000)
        }
      } else {
        throw new Error(response.message || 'İşlem başarısız')
      }
      setActionLoading(null)
    } catch (error) {
      console.error('❌ [SETTINGS] Quick action hatası:', error)
      toast.error(error.response?.data?.detail || error.message || 'İşlem gerçekleştirilirken hata oluştu')
      setActionLoading(null)
    }
  }, [fetchSettingsData])

  const handleLogout = useCallback(async () => {
    try {
      console.log('🚪 [SETTINGS] Logout başladı')
      await logout()
      toast.success('Başarıyla çıkış yapıldı')
      console.log('✅ [SETTINGS] Logout tamamlandı')
    } catch (error) {
      console.error('❌ [SETTINGS] Logout hatası:', error)
      toast.error('Çıkış yapılırken hata oluştu')
    }
  }, [logout])

  // GÜNCELLENMİŞ HANDLE MENU CLICK FONKSİYONU (280. satır civarı)
  const handleMenuClick = useCallback((menuId) => {
    console.log('🔗 [SETTINGS] Menu tıklandı:', menuId)
    if (menuId === 'home') {
      navigate('/dashboard')
    } else if (menuId === 'updates') {
      navigate('/updates')
    } else if (menuId === 'reports') {
      navigate('/reports')
    } else if (menuId === 'nat-settings') {
      navigate('/nat-settings')
    } else if (menuId === 'interface-settings') {
      navigate('/interface-settings')
    } else if (menuId === 'settings') {
      setActiveMenu(menuId)
    } else {
      navigate('/dashboard')
    }
  }, [navigate])

  // Memoized user display
  const userDisplay = useMemo(() => ({
    initial: user?.username?.charAt(0).toUpperCase() || 'U',
    greeting: `Hoş geldin, ${user?.username || 'Kullanıcı'}`
  }), [user?.username])

  console.log('🎨 [SETTINGS] Render ediliyor')

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon
              const isActive = activeMenu === item.id
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              )
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Sistem Ayarları</h2>
                <span className="text-gray-400 text-sm">Firewall ve sistem yapılandırma seçenekleri</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={handleSaveSettings}
                  disabled={isLoading}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50"
                >
                  {isLoading && <FaSpinner className="animate-spin" />}
                  <span>Kaydet</span>
                </button>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {userDisplay.initial}
                    </span>
                  </div>
                  <span className="text-white font-medium">{userDisplay.greeting}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* General Settings */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-blue-500/20 p-2 rounded-lg">
                  <FaCog className="text-blue-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Genel Ayarlar</h3>
              </div>
              <div className="space-y-4">
                <div>
                  <label className="block text-gray-300 font-medium mb-2">Zaman Dilimi</label>
                  <select
                    value={settings.timezone}
                    onChange={(e) => handleSettingChange('timezone', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="Türkiye (UTC+3)">Türkiye (UTC+3)</option>
                    <option value="UTC">UTC</option>
                    <option value="EST">EST</option>
                  </select>
                </div>
                <div>
                  <label className="block text-gray-300 font-medium mb-2">Dil</label>
                  <select
                    value={settings.language}
                    onChange={(e) => handleSettingChange('language', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="Türkçe">Türkçe</option>
                    <option value="English">English</option>
                  </select>
                </div>
                <div>
                  <label className="block text-gray-300 font-medium mb-2">Oturum Zaman Aşımı (dakika)</label>
                  <input
                    type="number"
                    value={settings.sessionTimeout}
                    onChange={(e) => handleSettingChange('sessionTimeout', e.target.value)}
                    className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    min="5"
                    max="480"
                  />
                </div>
              </div>
            </div>

            {/* System Actions */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-orange-500/20 p-2 rounded-lg">
                  <FaServer className="text-orange-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Sistem İşlemleri</h3>
              </div>
              <div className="space-y-3">
                <button
                  onClick={() => handleQuickAction('restart')}
                  disabled={actionLoading === 'restart'}
                  className="w-full flex items-center space-x-3 p-4 bg-blue-600/20 border border-blue-500/30 rounded-lg text-blue-300 hover:bg-blue-600/30 transition-colors disabled:opacity-50"
                >
                  {actionLoading === 'restart' ? <FaSpinner className="text-lg animate-spin" /> : <FaRedo className="text-lg" />}
                  <span>Sistemi Yeniden Başlat</span>
                </button>
                <button
                  onClick={() => handleQuickAction('backup')}
                  disabled={actionLoading === 'backup'}
                  className="w-full flex items-center space-x-3 p-4 bg-green-600/20 border border-green-500/30 rounded-lg text-green-300 hover:bg-green-600/30 transition-colors disabled:opacity-50"
                >
                  {actionLoading === 'backup' ? <FaSpinner className="text-lg animate-spin" /> : <FaDownload className="text-lg" />}
                  <span>Manuel Yedekleme</span>
                </button>
                <button
                  onClick={() => handleQuickAction('update')}
                  disabled={actionLoading === 'update'}
                  className="w-full flex items-center space-x-3 p-4 bg-yellow-600/20 border border-yellow-500/30 rounded-lg text-yellow-300 hover:bg-yellow-600/30 transition-colors disabled:opacity-50"
                >
                  {actionLoading === 'update' ? <FaSpinner className="text-lg animate-spin" /> : <FaSync className="text-lg" />}
                  <span>Güncelleme Kontrol Et</span>
                </button>
                <button
                  onClick={() => handleQuickAction('clear-logs')}
                  disabled={actionLoading === 'clear-logs'}
                  className="w-full flex items-center space-x-3 p-4 bg-red-600/20 border border-red-500/30 rounded-lg text-red-300 hover:bg-red-600/30 transition-colors disabled:opacity-50"
                >
                  {actionLoading === 'clear-logs' ? <FaSpinner className="text-lg animate-spin" /> : <FaTrash className="text-lg" />}
                  <span>Logları Temizle</span>
                </button>
              </div>
            </div>

            {/* System Information */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-green-500/20 p-2 rounded-lg">
                  <FaServer className="text-green-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Sistem Bilgileri</h3>
              </div>
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-gray-400">Versiyon:</span>
                  <span className="text-white">{systemInfo.version}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Platform:</span>
                  <span className="text-white">{systemInfo.platform}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Çalışma Süresi:</span>
                  <span className="text-white">{systemInfo.uptime}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Bellek Kullanımı:</span>
                  <span className="text-white">{systemInfo.memoryUsage}% / {systemInfo.totalMemory}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Disk Kullanımı:</span>
                  <span className="text-white">{systemInfo.diskUsage}% / {systemInfo.totalDisk}</span>
                </div>
                {systemInfo.cpuUsage !== undefined && (
                  <div className="flex justify-between">
                    <span className="text-gray-400">CPU Kullanımı:</span>
                    <span className="text-white">{systemInfo.cpuUsage}%</span>
                  </div>
                )}
              </div>
            </div>

            {/* Security Status */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-red-500/20 p-2 rounded-lg">
                  <FaShieldAlt className="text-red-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Güvenlik Durumu</h3>
              </div>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Firewall:</span>
                  <span className="text-green-400 font-medium flex items-center">
                    <FaCheckCircle className="mr-1" />
                    {securityStatus.firewall}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">SSL Sertifikası:</span>
                  <span className="text-green-400 font-medium flex items-center">
                    <FaLock className="mr-1" />
                    {securityStatus.ssl}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Son Tarama:</span>
                  <span className="text-gray-300 flex items-center">
                    <FaClock className="mr-1" />
                    {securityStatus.lastScan}
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Success Message */}
          <div className="mt-8 bg-green-500/10 border border-green-500/20 rounded-lg p-4">
            <div className="flex items-center space-x-2">
              <FaCheckCircle className="text-green-400 text-xl" />
              <div>
                <h4 className="text-green-300 font-semibold">Settings Sayfası Aktif!</h4>
                <p className="text-green-200/80 text-sm">
                  Tüm ayarlar backend ile entegre edildi. Gerçek sistem işlemleri çalışıyor.
                </p>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  )
}

export default Settings


================================================
File: src/pages/Updates.jsx
================================================
// src/pages/Updates.jsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { FaSync, FaCheckCircle, FaClock, FaExclamationTriangle, FaCogs, FaCloudDownloadAlt, FaInfoCircle, FaHistory, FaExclamationCircle, FaDownload, FaCheck, FaTimes, FaShieldAlt, FaServer, FaHome, FaChartBar, FaNetworkWired, FaRoute, FaWrench, FaFileAlt, FaSignOutAlt, FaChevronLeft, FaChevronRight, FaGlobe, FaDatabase, FaPlay, FaBan } from 'react-icons/fa';
import { toast } from 'react-hot-toast';
import { updatesService } from '../services/updatesService';

// Data Persistence Indicator Component
const DataPersistenceIndicator = () => {
  const [dataStatus, setDataStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchDataStatus();
    const interval = setInterval(fetchDataStatus, 60000);
    return () => clearInterval(interval);
  }, []);

  const fetchDataStatus = async () => {
    try {
      const response = await updatesService.getDataStatus();
      if (response.success) {
        setDataStatus(response.data);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Data status fetch error:', error);
      setIsLoading(false);
    }
  };

  if (isLoading || !dataStatus) {
    return (
      <div className="flex items-center space-x-2 px-3 py-1 bg-gray-500/20 rounded-full">
        <FaDatabase className="text-gray-400 text-sm animate-pulse" />
        <span className="text-gray-400 text-xs">Veri durumu kontrol ediliyor...</span>
      </div>
    );
  }

  const formatUptime = (seconds) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    return days > 0 ? `${days}g ${hours}s` : `${hours}s`;
  };

  const isPersistent = dataStatus.persistence?.enabled && dataStatus.persistence?.dataCollection;

  return (
    <div className="flex items-center space-x-2 px-3 py-1 bg-slate-800/50 rounded-full border border-slate-700/50">
      <div className={`flex items-center space-x-1 ${isPersistent ? 'text-green-400' : 'text-yellow-400'}`}>
        {isPersistent ? <FaCheckCircle className="text-sm" /> : <FaExclamationTriangle className="text-sm" />}
        <FaDatabase className="text-sm" />
      </div>
      <div className="text-xs">
        <span className={isPersistent ? 'text-green-300' : 'text-yellow-300'}>
          {isPersistent ? 'Kalıcı Veri' : 'Veri Sorunu'}
        </span>
        <span className="text-gray-400 ml-1">
          ({dataStatus.persistence?.totalActivities?.toLocaleString() || 0} kayıt)
        </span>
      </div>
      <div className="text-xs text-gray-500">
        Çalışma: {formatUptime(dataStatus.persistence?.systemUptime || 0)}
      </div>
    </div>
  );
};

const Updates = () => {
  const { user, logout } = useAuth();
  const [activeMenu, setActiveMenu] = useState('updates');
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isLoading, setIsLoading] = useState(true);
  const [updateData, setUpdateData] = useState(null);

  const menuItems = [
    { id: 'home', label: 'Ana Sayfa', icon: FaHome },
    { id: 'logs', label: 'Loglar', icon: FaChartBar },
    { id: 'security-rules', label: 'Güvenlik Kuralları', icon: FaShieldAlt },
    { id: 'rule-groups', label: 'Kural Grupları', icon: FaCogs },
    { id: 'interface-settings', label: 'İnterface Ayarları', icon: FaNetworkWired },
    { id: 'nat-settings', label: 'NAT Ayarları', icon: FaRoute },
    { id: 'routes', label: 'Rotalar', icon: FaRoute },
    { id: 'dns-management', label: 'DNS Yönetimi', icon: FaGlobe },
    { id: 'settings', label: 'Ayarlar', icon: FaWrench },
    { id: 'reports', label: 'Raporlar', icon: FaFileAlt },
    { id: 'updates', label: 'Güncellemeler', icon: FaSync }
  ];

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    fetchUpdateData();

    return () => clearInterval(timer);
  }, []);

  const fetchUpdateData = async () => {
    try {
      setIsLoading(true);
      const response = await updatesService.getUpdatesData();
      if (response.success) {
        setUpdateData(response.data);
      }
    } catch (error) {
      console.error('Update data fetch error:', error);
      toast.error('Güncelleme verileri alınamadı');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCheckUpdates = async () => {
    const loadingToast = toast.loading('Güncellemeler kontrol ediliyor...');
    try {
      const response = await updatesService.checkUpdates();
      if (response.success) {
        toast.dismiss(loadingToast);
        toast.success('Güncelleme kontrolü tamamlandı');
        await fetchUpdateData();
      }
    } catch (error) {
      toast.dismiss(loadingToast);
      toast.error('Güncelleme kontrolü başarısız');
    }
  };

  const handleInstallUpdate = async (updateId) => {
    const loadingToast = toast.loading('Güncelleme yükleniyor...');
    try {
      const response = await updatesService.installUpdate(updateId);
      if (response.success) {
        toast.dismiss(loadingToast);
        toast.success('Güncelleme başarıyla yüklendi');
        await fetchUpdateData();
      }
    } catch (error) {
      toast.dismiss(loadingToast);
      toast.error('Güncelleme yüklemesi başarısız');
    }
  };

  const handleToggleAutoUpdate = async () => {
    try {
      const newAutoUpdate = !updateData.updateSettings.autoUpdate;
      const response = await updatesService.updateSettings({
        autoUpdate: newAutoUpdate
      });
      if (response.success) {
        setUpdateData(prev => ({
          ...prev,
          updateSettings: {
            ...prev.updateSettings,
            autoUpdate: newAutoUpdate
          }
        }));
        toast.success(`Otomatik güncelleme ${newAutoUpdate ? 'açıldı' : 'kapatıldı'}`);
      }
    } catch (error) {
      toast.error('Ayar değiştirilemedi');
    }
  };

  const handleUpdateSettings = async (settingKey, value) => {
    try {
      const response = await updatesService.updateSettings({
        [settingKey]: value
      });
      if (response.success) {
        setUpdateData(prev => ({
          ...prev,
          updateSettings: {
            ...prev.updateSettings,
            [settingKey]: value
          }
        }));
        toast.success('Ayar güncellendi');
      }
    } catch (error) {
      toast.error('Ayar güncellenemedi');
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      toast.success('Başarıyla çıkış yapıldı');
    } catch (error) {
      toast.error('Çıkış yapılırken hata oluştu');
    }
  };

  // GÜNCELLENMİŞ HANDLE MENU CLICK FONKSİYONU (100. satır civarı)
  const handleMenuClick = (menuId) => {
    if (menuId === 'home') {
      window.location.href = '/dashboard';
    } else if (menuId === 'updates') {
      setActiveMenu(menuId);
    } else if (menuId === 'interface-settings') {
      window.location.href = '/interface-settings';
    } else {
      window.location.href = '/dashboard';
    }
  };

  const StatCard = ({ title, value, subtitle, icon, color = 'blue', isLoading = false }) => {
    const getColorClasses = (color) => {
      const colors = {
        green: 'text-green-400 bg-green-500/10 border-green-500/20',
        blue: 'text-blue-400 bg-blue-500/10 border-blue-500/20',
        yellow: 'text-yellow-400 bg-yellow-500/10 border-yellow-500/20',
        red: 'text-red-400 bg-red-500/10 border-red-500/20',
        gray: 'text-gray-400 bg-gray-500/10 border-gray-500/20'
      };
      return colors[color] || colors.blue;
    };

    if (isLoading) {
      return (
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4">
          <div className="animate-pulse">
            <div className="h-4 bg-slate-700 rounded mb-2"></div>
            <div className="h-8 bg-slate-700 rounded mb-2"></div>
            <div className="h-3 bg-slate-700 rounded"></div>
          </div>
        </div>
      );
    }

    return (
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-4 hover:bg-slate-800/70 transition-all duration-200">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <p className="text-gray-400 text-sm font-medium mb-1">{title}</p>
            <p className="font-bold text-2xl text-white mb-1">{value}</p>
            {subtitle && <p className="text-gray-500 text-xs">{subtitle}</p>}
          </div>
          {icon && (
            <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getColorClasses(color)}`}>
              {icon}
            </div>
          )}
        </div>
      </div>
    );
  };

  if (!updateData && !isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <FaExclamationTriangle className="text-red-400 text-4xl mb-4 mx-auto" />
          <h2 className="text-white text-xl font-semibold mb-2">Veri Yüklenemedi</h2>
          <p className="text-gray-400 mb-4">Güncelleme verileri alınamadı</p>
          <button
            onClick={fetchUpdateData}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
          >
            Tekrar Dene
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex">
      {/* Sidebar */}
      <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen bg-slate-900/95 backdrop-blur-xl border-r border-slate-700/50 flex flex-col transition-all duration-300 fixed left-0 top-0 z-40`}>
        {/* Header */}
        <div className="p-4 border-b border-slate-700/50">
          <div className="flex items-center justify-between">
            {!isCollapsed && (
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                  <FaShieldAlt className="text-white text-sm" />
                </div>
                <span className="text-white font-bold text-lg">NetGate</span>
              </div>
            )}
            <button
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="text-gray-400 hover:text-white transition-colors p-1"
            >
              {isCollapsed ? <FaChevronRight /> : <FaChevronLeft />}
            </button>
          </div>
        </div>

        {/* Navigation */}
        <nav className="flex-1 overflow-y-auto py-4">
          <ul className="space-y-1 px-2">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeMenu === item.id;
              return (
                <li key={item.id}>
                  <button
                    onClick={() => handleMenuClick(item.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-blue-600 text-white shadow-lg'
                        : 'text-gray-400 hover:text-white hover:bg-slate-800/50'
                    }`}
                    title={isCollapsed ? item.label : ''}
                  >
                    <Icon className="text-lg" />
                    {!isCollapsed && <span className="font-medium">{item.label}</span>}
                  </button>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Logout */}
        <div className="p-4 border-t border-slate-700/50">
          <button
            onClick={handleLogout}
            className="w-full flex items-center space-x-3 px-3 py-2.5 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-all duration-200"
            title={isCollapsed ? 'Çıkış Yap' : ''}
          >
            <FaSignOutAlt className="text-lg" />
            {!isCollapsed && <span className="font-medium">Çıkış Yap</span>}
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className={`flex-1 ${isCollapsed ? 'ml-16' : 'ml-64'} transition-all duration-300`}>
        {/* Header */}
        <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50 sticky top-0 z-30">
          <div className="px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h2 className="text-xl font-semibold text-white">Sistem Güncellemeleri</h2>
                <span className="text-gray-400 text-sm">Firewall ve sistem güncellemelerini yönetin</span>
                <DataPersistenceIndicator />
              </div>
              <div className="flex items-center space-x-4">
                <button
                  onClick={handleCheckUpdates}
                  className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <FaSync className="text-sm" />
                  <span>Güncelleme Kontrol Et</span>
                </button>
                <div className="text-sm text-gray-300">
                  {currentTime.toLocaleString('tr-TR')}
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">
                      {user?.username?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-white font-medium">Hoş geldin, {user?.username}</span>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="p-8">
          {/* Top Stats Row */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <StatCard
              title="Mevcut Sürüm"
              value={updateData?.currentVersion || '2.1.0'}
              subtitle="Güncel"
              icon={<FaCheckCircle />}
              color="green"
              isLoading={isLoading}
            />
            <StatCard
              title="Son Kontrol"
              value={updateData?.lastCheck?.split(' ')[1] || '--:--'}
              subtitle={`${updateData?.lastCheck?.split(' ')[0] || 'Tarih'} - ${updateData?.checkMethod || 'Otomatik'}`}
              icon={<FaClock />}
              color="blue"
              isLoading={isLoading}
            />
            <StatCard
              title="Bekleyen Güncellemeler"
              value={updateData?.pendingUpdates || 0}
              subtitle={updateData?.updateStatus || 'Güncel'}
              icon={<FaExclamationTriangle />}
              color={updateData?.pendingUpdates > 0 ? "yellow" : "green"}
              isLoading={isLoading}
            />
            <StatCard
              title="Otomatik Güncelleme"
              value={updateData?.updateSettings?.autoUpdate ? "Açık" : "Kapalı"}
              subtitle="Etkin"
              icon={<FaCogs />}
              color={updateData?.updateSettings?.autoUpdate ? "green" : "gray"}
              isLoading={isLoading}
            />
          </div>

          {/* Main Content Grid */}
          <div className="grid grid-cols-1 xl:grid-cols-3 gap-8 mb-8">
            {/* Available Updates - Left Side */}
            <div className="xl:col-span-2">
              <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center space-x-3">
                    <div className="bg-yellow-500/20 p-2 rounded-lg">
                      <FaExclamationTriangle className="text-yellow-400 text-xl" />
                    </div>
                    <h3 className="text-white font-semibold text-lg">Mevcut Güncellemeler</h3>
                    <span className="bg-yellow-500/20 text-yellow-300 px-2 py-1 rounded-full text-xs font-medium">
                      {updateData?.pendingUpdates || 0} adet
                    </span>
                  </div>
                </div>
                <div className="space-y-4">
                  {updateData?.availableUpdates && updateData.availableUpdates.length > 0 ? (
                    updateData.availableUpdates.map((update) => (
                      <div key={update.id || update._id} className="bg-slate-900/40 rounded-xl p-5 border border-slate-700/30">
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex-1">
                            <div className="flex items-center space-x-3 mb-2">
                              <h4 className="text-white font-semibold text-lg">{update.name}</h4>
                              <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                                update.priority === 'Yüksek Öncelikli'
                                  ? 'bg-red-500/20 text-red-300 border border-red-500/30'
                                  : 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
                              }`}>
                                {update.priority}
                              </span>
                            </div>
                            <p className="text-gray-300 font-medium mb-3">{update.update_type}</p>
                            <div className="flex items-center space-x-6 text-sm text-gray-400">
                              <div className="flex items-center space-x-1">
                                <FaClock className="text-xs" />
                                <span>{update.date}</span>
                              </div>
                              <div className="flex items-center space-x-1">
                                <FaDownload className="text-xs" />
                                <span>{update.size}</span>
                              </div>
                              <span>{update.location}</span>
                            </div>
                          </div>
                          <button
                            onClick={() => handleInstallUpdate(update.id || update._id)}
                            disabled={update.status === 'Yükleniyor' || update.status === 'Yüklendi'}
                            className={`px-6 py-3 rounded-lg font-semibold transition-all duration-200 flex items-center space-x-2 ${
                              update.status === 'Yüklendi'
                                ? 'bg-green-600/20 text-green-300 border border-green-500/30 cursor-default'
                                : update.status === 'Yükleniyor'
                                ? 'bg-gray-600 text-gray-300 cursor-not-allowed'
                                : 'bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-blue-500/25'
                            }`}
                          >
                            {update.status === 'Yüklendi' ? (
                              <>
                                <FaCheck className="text-sm" />
                                <span>Yüklendi</span>
                              </>
                            ) : update.status === 'Yükleniyor' ? (
                              <>
                                <FaSync className="text-sm animate-spin" />
                                <span>Yükleniyor...</span>
                              </>
                            ) : (
                              <>
                                <FaDownload className="text-sm" />
                                <span>Yükle</span>
                              </>
                            )}
                          </button>
                        </div>
                        <div className="border-t border-slate-700/50 pt-4">
                          <h5 className="text-gray-300 font-semibold mb-3 flex items-center space-x-2">
                            <span>Yapılan Değişiklikler:</span>
                          </h5>
                          <div className="space-y-2">
                            {update.changes.map((change, index) => (
                              <div key={index} className="flex items-start space-x-3">
                                <div className="w-1.5 h-1.5 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                                <span className="text-gray-400 text-sm leading-relaxed">{change}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <FaCheckCircle className="text-green-400 text-3xl mb-3 mx-auto" />
                      <h4 className="text-white font-medium mb-2">Sistem Güncel</h4>
                      <p className="text-gray-400 text-sm">Şu anda yüklenmeyi bekleyen güncelleme bulunmuyor.</p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Right Side - Settings and Info */}
            <div className="space-y-6">
              {/* Update Settings */}
              <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="bg-blue-500/20 p-2 rounded-lg">
                    <FaCogs className="text-blue-400 text-xl" />
                  </div>
                  <h3 className="text-white font-semibold text-lg">Güncelleme Ayarları</h3>
                </div>
                <div className="space-y-6">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-300 font-medium">Otomatik Güncelleme</span>
                    <button
                      onClick={handleToggleAutoUpdate}
                      className={`relative inline-flex h-7 w-12 items-center rounded-full transition-colors duration-200 ${
                        updateData?.updateSettings?.autoUpdate ? 'bg-green-600' : 'bg-gray-600'
                      }`}
                    >
                      <span
                        className={`inline-block h-5 w-5 transform rounded-full bg-white transition-transform duration-200 ${
                          updateData?.updateSettings?.autoUpdate ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>
                  <div>
                    <label className="text-gray-300 font-medium mb-3 block">Kontrol Sıklığı</label>
                    <select
                      value={updateData?.updateSettings?.checkFrequency || 'daily'}
                      onChange={(e) => handleUpdateSettings('checkFrequency', e.target.value)}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white font-medium focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="daily">Günlük</option>
                      <option value="weekly">Haftalık</option>
                      <option value="monthly">Aylık</option>
                    </select>
                  </div>
                  <div>
                    <label className="text-gray-300 font-medium mb-3 block">Otomatik Yükleme Saati</label>
                    <select
                      value={updateData?.updateSettings?.autoInstallTime || '02:00'}
                      onChange={(e) => handleUpdateSettings('autoInstallTime', e.target.value)}
                      className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-4 py-3 text-white font-medium focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      {Array.from({ length: 24 }, (_, i) => (
                        <option key={i} value={`${i.toString().padStart(2, '0')}:00`}>
                          {`${i.toString().padStart(2, '0')}:00`}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>

              {/* System Info */}
              <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
                <div className="flex items-center space-x-3 mb-6">
                  <div className="bg-green-500/20 p-2 rounded-lg">
                    <FaInfoCircle className="text-green-400 text-xl" />
                  </div>
                  <h3 className="text-white font-semibold text-lg">Sistem Bilgileri</h3>
                </div>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Ürün</span>
                    <span className="text-white font-medium">{updateData?.systemInfo?.product || 'NetGate Firewall'}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Mevcut Sürüm</span>
                    <span className="text-white font-medium">{updateData?.systemInfo?.currentVersion || '2.1.0'}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Son Sürüm</span>
                    <span className="text-green-400 font-medium">{updateData?.systemInfo?.latestVersion || '2.1.2'}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Derleme Tarihi</span>
                    <span className="text-white font-medium">{updateData?.systemInfo?.buildDate || '2025.06.19'}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Lisans</span>
                    <span className="text-blue-400 font-medium">{updateData?.systemInfo?.license || 'Pro'}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Bottom Section - History and Important Notes */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
            {/* Update History */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-purple-500/20 p-2 rounded-lg">
                  <FaHistory className="text-purple-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Güncelleme Geçmişi</h3>
              </div>
              <div className="space-y-3">
                {updateData?.updateHistory && updateData.updateHistory.length > 0 ? (
                  updateData.updateHistory.map((update, index) => (
                    <div key={index} className="flex items-center justify-between p-4 bg-slate-900/30 rounded-lg hover:bg-slate-900/50 transition-colors">
                      <div className="flex items-center space-x-3">
                        <div className={`w-3 h-3 rounded-full ${
                          update.status === 'Başarılı' ? 'bg-green-400' : 'bg-red-400'
                        }`}></div>
                        <div>
                          <span className="text-white font-semibold">{update.version}</span>
                          <p className="text-gray-400 text-sm">{update.update_type}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <span className="text-gray-300 font-medium">
                          {update.date || new Date(update.install_date).toLocaleDateString('tr-TR')}
                        </span>
                        <p className={`text-sm font-medium ${
                          update.status === 'Başarılı' ? 'text-green-400' : 'text-red-400'
                        }`}>
                          {update.status}
                        </p>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-6">
                    <FaHistory className="text-gray-500 text-2xl mb-2 mx-auto" />
                    <p className="text-gray-400 text-sm">Henüz güncelleme geçmişi yok</p>
                  </div>
                )}
              </div>
            </div>

            {/* Important Notes */}
            <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="bg-yellow-500/20 p-2 rounded-lg">
                  <FaExclamationCircle className="text-yellow-400 text-xl" />
                </div>
                <h3 className="text-white font-semibold text-lg">Önemli Notlar</h3>
              </div>
              <div className="space-y-4">
                <div className="flex items-start space-x-3 p-4 bg-yellow-500/10 rounded-lg border border-yellow-500/20">
                  <FaExclamationTriangle className="text-yellow-400 text-lg mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="text-yellow-200 font-medium mb-1">Sistem Yeniden Başlatması</p>
                    <p className="text-yellow-200/80 text-sm">Güncellemeler sistem yeniden başlatması gerektirebilir</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3 p-4 bg-blue-500/10 rounded-lg border border-blue-500/20">
                  <FaShieldAlt className="text-blue-400 text-lg mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="text-blue-200 font-medium mb-1">Otomatik Yedekleme</p>
                    <p className="text-blue-200/80 text-sm">Güncelleme öncesi otomatik yedekleme yapılır</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3 p-4 bg-red-500/10 rounded-lg border border-red-500/20">
                  <FaBan className="text-red-400 text-lg mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="text-red-200 font-medium mb-1">Kritik Güncellemeler</p>
                    <p className="text-red-200/80 text-sm">Kritik güncellemeler hemen yüklenir</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};

export default Updates;


================================================
File: src/services/dashboardService.js
================================================
import api from '../utils/axios';

export const dashboardService = {
  // Dashboard istatistiklerini getir
  async getStats() {
    try {
      const response = await api.get('/api/v1/dashboard/stats'); // API yolunu dÃ¼zelt
      return response.data;
    } catch (error) {
      console.error('Stats fetch error:', error);
      throw error;
    }
  },

  // Chart verilerini getir
  async getChartData(period = '24h') {
    try {
      const response = await api.get(`/api/v1/dashboard/chart-data?period=${period}`);
      return response.data;
    } catch (error) {
      console.error('Chart data fetch error:', error);
      throw error;
    }
  },

  // Son aktiviteleri getir
  async getRecentActivity(limit = 10) {
    try {
      const response = await api.get(`/api/v1/dashboard/recent-activity?limit=${limit}`);
      return response.data;
    } catch (error) {
      console.error('Recent activity fetch error:', error);
      throw error;
    }
  },

  // BaÄŸlÄ± cihazlarÄ± getir
  async getConnectedDevices() {
    try {
      const response = await api.get('/api/v1/dashboard/connected-devices');
      return response.data;
    } catch (error) {
      console.error('Connected devices fetch error:', error);
      throw error;
    }
  },

  // Demo veri oluÅŸtur (test iÃ§in)
  async simulateActivity() {
    try {
      const response = await api.post('/api/v1/dashboard/simulate-activity');
      return response.data;
    } catch (error) {
      console.error('Simulate activity error:', error);
      throw error;
    }
  }
};

export const firewallService = {
  // Firewall kurallarÄ±nÄ± getir
  async getRules(params = {}) {
    try {
      const queryString = new URLSearchParams(params).toString();
      const response = await api.get(`/api/v1/firewall/rules?${queryString}`);
      return response.data;
    } catch (error) {
      console.error('Get rules error:', error);
      throw error;
    }
  },

  // VarsayÄ±lan kurallarÄ± oluÅŸtur
  async initializeRules() {
    try {
      const response = await api.post('/api/v1/firewall/initialize-rules');
      return response.data;
    } catch (error) {
      console.error('Initialize rules error:', error);
      throw error;
    }
  }
};


================================================
File: src/services/dnsService.js
================================================
import api from '../utils/axios';

export const dnsService = {
  // DNS konfigÃ¼rasyonunu getir
  async getDnsConfig() {
    try {
      const response = await api.get('/api/v1/dns/config');
      return response.data;
    } catch (error) {
      console.error('DNS config fetch error:', error);
      // Fallback data for development
      return {
        success: true,
        data: {
          blockedDomains: [
            'malware.com',
            'ads.example.com',
            'tracker.net',
            'suspicious-site.com',
            'badware.org'
          ],
          wildcardRules: [
            '*.ads.google.com',
            '*.doubleclick.net',
            '*.googlesyndication.com',
            '*.facebook.com'
          ],
          allowedDomains: [
            'github.com',
            'stackoverflow.com',
            'google.com',
            'microsoft.com'
          ],
          adBlockerEnabled: true,
          dohBlocked: false,
          adBlockList: 'https://somehost.com/adblock-list.txt'
        }
      };
    }
  },

  // DNS konfigÃ¼rasyonunu gÃ¼ncelle
  async updateDnsConfig(config) {
    try {
      const response = await api.patch('/api/v1/dns/config', config);
      return response.data;
    } catch (error) {
      console.error('DNS config update error:', error);
      // Simulate successful update for development
      return {
        success: true,
        message: 'DNS konfigÃ¼rasyonu gÃ¼ncellendi',
        data: config
      };
    }
  },

  // Domain kuralÄ± ekle
  async addDomainRule(rule) {
    try {
      const response = await api.post('/api/v1/dns/rules', rule);
      return response.data;
    } catch (error) {
      console.error('Add domain rule error:', error);
      // Simulate successful add for development
      return {
        success: true,
        message: 'Domain kuralÄ± eklendi',
        data: rule
      };
    }
  },

  // Domain kuralÄ±nÄ± kaldÄ±r
  async removeDomainRule(rule) {
    try {
      const response = await api.delete('/api/v1/dns/rules', { data: rule });
      return response.data;
    } catch (error) {
      console.error('Remove domain rule error:', error);
      // Simulate successful removal for development
      return {
        success: true,
        message: 'Domain kuralÄ± kaldÄ±rÄ±ldÄ±'
      };
    }
  },

  // Adblock listesi indir
  async downloadAdBlockList(url) {
    try {
      const response = await api.post('/api/v1/dns/adblock/download', { url });
      return response.data;
    } catch (error) {
      console.error('Download adblock list error:', error);
      // Simulate successful download for development
      return {
        success: true,
        message: 'Adblock listesi indirildi',
        data: {
          downloaded: true,
          rulesAdded: 1247,
          url: url
        }
      };
    }
  },

  // DNS istatistiklerini getir
  async getDnsStats() {
    try {
      const response = await api.get('/api/v1/dns/stats');
      return response.data;
    } catch (error) {
      console.error('DNS stats fetch error:', error);
      return {
        success: true,
        data: {
          totalQueries: 15847,
          blockedQueries: 3421,
          allowedQueries: 12426,
          topBlockedDomains: [
            { domain: 'ads.google.com', count: 234 },
            { domain: 'doubleclick.net', count: 187 },
            { domain: 'googlesyndication.com', count: 156 }
          ],
          queryTypes: {
            A: 8234,
            AAAA: 4123,
            CNAME: 2341,
            MX: 567,
            TXT: 234,
            other: 348
          }
        }
      };
    }
  },

  // DNS cache'ini temizle
  async clearDnsCache() {
    try {
      const response = await api.post('/api/v1/dns/cache/clear');
      return response.data;
    } catch (error) {
      console.error('Clear DNS cache error:', error);
      return {
        success: true,
        message: 'DNS cache temizlendi'
      };
    }
  },

  // DNS sorgu loglarÄ±nÄ± getir
  async getDnsLogs(params = {}) {
    try {
      const queryString = new URLSearchParams(params).toString();
      const response = await api.get(`/api/v1/dns/logs?${queryString}`);
      return response.data;
    } catch (error) {
      console.error('DNS logs fetch error:', error);
      return {
        success: true,
        data: {
          logs: [
            {
              timestamp: new Date().toISOString(),
              domain: 'example.com',
              client: '192.168.1.10',
              type: 'A',
              response: 'ALLOWED',
              responseTime: 12
            },
            {
              timestamp: new Date(Date.now() - 1000).toISOString(),
              domain: 'ads.google.com',
              client: '192.168.1.15',
              type: 'A',
              response: 'BLOCKED',
              responseTime: 5
            }
          ],
          total: 15847,
          page: 1,
          perPage: 50
        }
      };
    }
  },

  // Custom DNS server ayarlarÄ±
  async getDnsServers() {
    try {
      const response = await api.get('/api/v1/dns/servers');
      return response.data;
    } catch (error) {
      console.error('DNS servers fetch error:', error);
      return {
        success: true,
        data: {
          upstream: [
            { ip: '8.8.8.8', name: 'Google DNS', enabled: true, responseTime: 15 },
            { ip: '8.8.4.4', name: 'Google DNS Secondary', enabled: true, responseTime: 18 },
            { ip: '1.1.1.1', name: 'Cloudflare DNS', enabled: false, responseTime: 12 },
            { ip: '9.9.9.9', name: 'Quad9 DNS', enabled: false, responseTime: 22 }
          ],
          fallback: ['208.67.222.222', '208.67.220.220']
        }
      };
    }
  },

  // DNS server ayarlarÄ±nÄ± gÃ¼ncelle
  async updateDnsServers(servers) {
    try {
      const response = await api.patch('/api/v1/dns/servers', servers);
      return response.data;
    } catch (error) {
      console.error('Update DNS servers error:', error);
      return {
        success: true,
        message: 'DNS sunucu ayarlarÄ± gÃ¼ncellendi'
      };
    }
  },

  // Domain test et
  async testDomain(domain) {
    try {
      const response = await api.post('/api/v1/dns/test', { domain });
      return response.data;
    } catch (error) {
      console.error('Test domain error:', error);
      return {
        success: true,
        data: {
          domain,
          resolved: true,
          ip: '93.184.216.34',
          responseTime: 45,
          blocked: false,
          rule: null
        }
      };
    }
  },

  // Dinamik DNS ayarlarÄ±
  async getDynamicDnsConfig() {
    try {
      const response = await api.get('/api/v1/dns/dynamic');
      return response.data;
    } catch (error) {
      console.error('Dynamic DNS config fetch error:', error);
      return {
        success: true,
        data: {
          enabled: false,
          provider: 'dyndns',
          hostname: '',
          username: '',
          password: '',
          updateInterval: 300,
          supportedProviders: [
            { id: 'dyndns', name: 'DynDNS', url: 'https://members.dyndns.org/nic/update' },
            { id: 'dhs', name: 'DHS', url: 'https://www.dhs.org/nic/update' },
            { id: 'dyns', name: 'DyNS', url: 'https://www.dyns.cx/nic/update' },
            { id: 'easydns', name: 'easyDNS', url: 'https://api.cp.easydns.com/dyn/tomato.php' },
            { id: 'noip', name: 'No-IP', url: 'https://dynupdate.no-ip.com/nic/update' },
            { id: 'ods', name: 'ODS.org', url: 'https://update.ods.org/nic/update' },
            { id: 'zoneedit', name: 'ZoneEdit', url: 'https://dynamic.zoneedit.com/auth/dynamic.html' }
          ]
        }
      };
    }
  },

  // Dinamik DNS ayarlarÄ±nÄ± gÃ¼ncelle
  async updateDynamicDnsConfig(config) {
    try {
      const response = await api.patch('/api/v1/dns/dynamic', config);
      return response.data;
    } catch (error) {
      console.error('Update dynamic DNS config error:', error);
      return {
        success: true,
        message: 'Dinamik DNS ayarlarÄ± gÃ¼ncellendi'
      };
    }
  },

  // Veri durumunu getir
  async getDataStatus() {
    try {
      const response = await api.get('/api/dashboard/data-status');
      return response.data;
    } catch (error) {
      console.error('Data status fetch error:', error);
      return {
        success: true,
        data: {
          persistence: {
            enabled: true,
            dataCollection: true,
            totalActivities: 135421,
            systemUptime: 172800
          }
        }
      };
    }
  },

  // DNS zone dosyalarÄ±nÄ± yÃ¶net
  async getDnsZones() {
    try {
      const response = await api.get('/api/v1/dns/zones');
      return response.data;
    } catch (error) {
      console.error('DNS zones fetch error:', error);
      return {
        success: true,
        data: []
      };
    }
  },

  // DNS zone ekle
  async addDnsZone(zone) {
    try {
      const response = await api.post('/api/v1/dns/zones', zone);
      return response.data;
    } catch (error) {
      console.error('Add DNS zone error:', error);
      throw error;
    }
  }
};


================================================
File: src/services/interfaceService.js
================================================
import api from '../utils/axios';

export const interfaceService = {
  // Ağ arayüzlerini getir - YENİ API ENDPOINT
  async getInterfaces() {
    try {
      const response = await api.get('/api/v1/network/interfaces');
      return response.data;
    } catch (error) {
      console.error('Interfaces fetch error:', error);
      // Fallback data for development
      return {
        success: true,
        data: [
          {
            id: '1',
            name: 'Ethernet',
            type: 'ethernet',
            ipMode: 'static',
            ipAddress: '192.168.1.10',
            subnetMask: '255.255.255.0',
            gateway: '192.168.1.1',
            primaryDns: '8.8.8.8',
            secondaryDns: '8.8.4.4',
            mtuSize: 1500,
            vlanId: null,
            enabled: true,
            status: 'up',
            // YENİ ICS ALANLARI
            icsEnabled: false,
            icsSourceInterface: null,
            dhcpRangeStart: null,
            dhcpRangeEnd: null,
            description: 'Primary Ethernet Interface'
          },
          {
            id: '2',
            name: 'Wi-Fi',
            type: 'wireless',
            ipMode: 'dhcp',
            ipAddress: '192.168.0.25',
            subnetMask: '255.255.255.0',
            gateway: '192.168.0.1',
            primaryDns: '1.1.1.1',
            secondaryDns: '1.0.0.1',
            mtuSize: 1500,
            vlanId: 100,
            enabled: false,
            status: 'down',
            // YENİ ICS ALANLARI
            icsEnabled: false,
            icsSourceInterface: null,
            dhcpRangeStart: null,
            dhcpRangeEnd: null,
            description: 'Wireless Network Interface'
          }
        ]
      };
    }
  },

  // Yeni ağ arayüzü oluştur - GÜNCELLENMİŞ API ENDPOINT VE PAYLOAD
  async createInterface(interfaceData) {
    try {
      const response = await api.post('/api/v1/network/interfaces', {
        interface_name: interfaceData.name,
        ip_mode: interfaceData.ipMode,
        ip_address: interfaceData.ipAddress,
        subnet_mask: interfaceData.subnetMask,
        gateway: interfaceData.gateway,
        dns_primary: interfaceData.primaryDns,
        dns_secondary: interfaceData.secondaryDns,
        mtu: parseInt(interfaceData.mtuSize),
        vlan_id: interfaceData.vlanId ? parseInt(interfaceData.vlanId) : null,
        admin_enabled: interfaceData.enabled,
        description: interfaceData.description,
        // YENİ ICS ALANLARI
        ics_enabled: interfaceData.icsEnabled || false,
        ics_source_interface: interfaceData.icsSourceInterface || null,
        ics_dhcp_range_start: interfaceData.dhcpRangeStart || null,
        ics_dhcp_range_end: interfaceData.dhcpRangeEnd || null
      });
      return response.data;
    } catch (error) {
      console.error('Create interface error:', error);
      // Simulate successful creation for development
      return {
        success: true,
        message: 'Ağ arayüzü başarıyla oluşturuldu',
        data: {
          id: Date.now().toString(),
          ...interfaceData,
          type: 'ethernet',
          status: interfaceData.enabled ? 'up' : 'down',
          mtuSize: parseInt(interfaceData.mtuSize),
          vlanId: interfaceData.vlanId ? parseInt(interfaceData.vlanId) : null
        }
      };
    }
  },

  // Ağ arayüzünü güncelle - GÜNCELLENMİŞ API ENDPOINT VE PAYLOAD
  async updateInterface(interfaceId, interfaceData) {
    try {
      const response = await api.patch(`/api/v1/network/interfaces/${interfaceId}`, {
        interface_name: interfaceData.name,
        ip_mode: interfaceData.ipMode,
        ip_address: interfaceData.ipAddress,
        subnet_mask: interfaceData.subnetMask,
        gateway: interfaceData.gateway,
        dns_primary: interfaceData.primaryDns,
        dns_secondary: interfaceData.secondaryDns,
        mtu: parseInt(interfaceData.mtuSize),
        vlan_id: interfaceData.vlanId ? parseInt(interfaceData.vlanId) : null,
        admin_enabled: interfaceData.enabled,
        description: interfaceData.description,
        // YENİ ICS ALANLARI
        ics_enabled: interfaceData.icsEnabled || false,
        ics_source_interface: interfaceData.icsSourceInterface || null,
        ics_dhcp_range_start: interfaceData.dhcpRangeStart || null,
        ics_dhcp_range_end: interfaceData.dhcpRangeEnd || null
      });
      return response.data;
    } catch (error) {
      console.error('Update interface error:', error);
      // Simulate successful update for development
      return {
        success: true,
        message: 'Ağ arayüzü başarıyla güncellendi',
        data: {
          id: interfaceId,
          ...interfaceData,
          mtuSize: parseInt(interfaceData.mtuSize),
          vlanId: interfaceData.vlanId ? parseInt(interfaceData.vlanId) : null
        }
      };
    }
  },

  // Ağ arayüzünü sil - GÜNCELLENMİŞ API ENDPOINT
  async deleteInterface(interfaceId) {
    try {
      const response = await api.delete(`/api/v1/network/interfaces/${interfaceId}`);
      return response.data;
    } catch (error) {
      console.error('Delete interface error:', error);
      // Simulate successful deletion for development
      return {
        success: true,
        message: 'Ağ arayüzü başarıyla silindi'
      };
    }
  },

  // Ağ arayüzü durumunu değiştir - GÜNCELLENMİŞ API ENDPOINT
  async toggleInterface(interfaceId, enabled) {
    try {
      const response = await api.patch(`/api/v1/network/interfaces/${interfaceId}/toggle`, {
        enabled: enabled
      });
      return response.data;
    } catch (error) {
      console.error('Toggle interface error:', error);
      // Simulate successful toggle for development
      return {
        success: true,
        message: `Ağ arayüzü ${enabled ? 'etkinleştirildi' : 'devre dışı bırakıldı'}`
      };
    }
  },

  // Fiziksel interface'leri getir - YENİ FONKSİYON
  async getPhysicalInterfaces() {
    try {
      const response = await api.get('/api/v1/network/interfaces/physical');
      return response.data;
    } catch (error) {
      console.error('Physical interfaces fetch error:', error);
      return {
        success: true,
        data: [
          { name: 'eth0', display_name: 'Ethernet 1', type: 'ethernet', status: 'up', description: 'Primary Ethernet' },
          { name: 'eth1', display_name: 'Ethernet 2', type: 'ethernet', status: 'down', description: 'Secondary Ethernet' },
          { name: 'wlan0', display_name: 'Wi-Fi', type: 'wireless', status: 'up', description: 'Wireless Interface' }
        ]
      };
    }
  },

  // Interface istatistiklerini getir - YENİ FONKSİYON
  async getInterfaceStatistics(interfaceId) {
    try {
      const response = await api.get(`/api/v1/network/interfaces/${interfaceId}/stats`);
      return response.data;
    } catch (error) {
      console.error('Interface stats fetch error:', error);
      return {
        success: true,
        data: {
          bytes_received: 1024000,
          bytes_transmitted: 2048000,
          packets_received: 1500,
          packets_transmitted: 2800,
          errors: 0,
          drops: 0
        }
      };
    }
  },

  // ICS (Internet Connection Sharing) kurulumu - YENİ FONKSİYON
  async setupInternetSharing(sourceInterface, targetInterface, dhcpRange) {
    try {
      const response = await api.post('/api/v1/network/interfaces/ics/setup', {
        source_interface: sourceInterface,
        target_interface: targetInterface,
        dhcp_range_start: dhcpRange.start,
        dhcp_range_end: dhcpRange.end
      });
      return response.data;
    } catch (error) {
      console.error('ICS setup error:', error);
      return {
        success: true,
        message: 'Internet paylaşımı başarıyla yapılandırıldı'
      };
    }
  },

  // Ağ arayüzü istatistiklerini getir - ESKİ FONKSİYON GÜNCELLENDİ
  async getInterfaceStats(interfaceId) {
    try {
      const response = await api.get(`/api/v1/network/interfaces/${interfaceId}/stats`);
      return response.data;
    } catch (error) {
      console.error('Interface stats fetch error:', error);
      return {
        success: true,
        data: {
          bytesReceived: 1024000,
          bytesSent: 512000,
          packetsReceived: 1500,
          packetsSent: 1200,
          errors: 0,
          drops: 0
        }
      };
    }
  },

  // Ağ arayüzünü test et - GÜNCELLENMİŞ API ENDPOINT
  async testInterface(interfaceId) {
    try {
      const response = await api.post(`/api/v1/network/interfaces/${interfaceId}/test`);
      return response.data;
    } catch (error) {
      console.error('Test interface error:', error);
      return {
        success: true,
        data: {
          connectivity: true,
          latency: 15,
          status: 'healthy'
        }
      };
    }
  },

  // Veri durumunu getir - KORUNDU
  async getDataStatus() {
    try {
      const response = await api.get('/api/dashboard/data-status');
      return response.data;
    } catch (error) {
      console.error('Data status fetch error:', error);
      return {
        success: true,
        data: {
          persistence: {
            enabled: true,
            dataCollection: true,
            totalActivities: 135421,
            systemUptime: 172800
          }
        }
      };
    }
  },

  // Ağ arayüzü konfigürasyonunu dışa aktar - GÜNCELLENMİŞ API ENDPOINT
  async exportInterfaceConfig(interfaceId) {
    try {
      const response = await api.get(`/api/v1/network/interfaces/${interfaceId}/export`, {
        responseType: 'blob'
      });
      // Download file
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `interface_${interfaceId}_config.json`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      return { success: true };
    } catch (error) {
      console.error('Export interface config error:', error);
      throw error;
    }
  },

  // Ağ arayüzü konfigürasyonunu içe aktar - GÜNCELLENMİŞ API ENDPOINT
  async importInterfaceConfig(configFile) {
    try {
      const formData = new FormData();
      formData.append('config', configFile);
      const response = await api.post('/api/v1/network/interfaces/import', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      return response.data;
    } catch (error) {
      console.error('Import interface config error:', error);
      throw error;
    }
  }
};


================================================
File: src/services/logsService.js
================================================
/**
 * Enhanced Logs Service for PC-to-PC Internet Sharing Traffic Monitoring
 * Compatible with updated backend API endpoints and schemas
 */
import api from '../utils/axios';

export const logsService = {
  // ===========================================
  // ENHANCED LOGS API OPERATIONS (Updated)
  // ===========================================

  /**
   * Get logs with comprehensive filtering and pagination
   * Compatible with backend /api/v1/logs/ endpoint
   */
  async getLogs(params = {}) {
    try {
      // Map frontend params to backend schema
      const apiParams = {};

      if (params.page) apiParams.page = params.page;
      if (params.per_page || params.limit) apiParams.per_page = params.per_page || params.limit || 50;
      if (params.level && params.level !== 'ALL' && params.level !== 'Tümü') apiParams.level = params.level;
      if (params.source) apiParams.source = params.source;
      if (params.source_ip || params.device_ip) apiParams.source_ip = params.source_ip || params.device_ip;
      if (params.search || params.keyword) apiParams.search = params.search || params.keyword;
      if (params.start_date) apiParams.start_date = params.start_date;
      if (params.end_date) apiParams.end_date = params.end_date;

      const response = await api.get('/api/v1/logs/', { params: apiParams });

      return {
        success: true,
        data: {
          logs: response.data.data || [],
          pagination: {
            current_page: response.data.page || 1,
            total_pages: response.data.pages || 1,
            total_count: response.data.total || 0,
            per_page: response.data.per_page || 50,
            has_next: response.data.has_next || false,
            has_prev: response.data.has_prev || false
          },
          filters_applied: response.data.details?.filters_applied || {}
        },
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Get logs error:', error);

      // Enhanced fallback with realistic PC-to-PC traffic data
      return {
        success: true,
        data: {
          logs: [
            {
              id: '1',
              timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),
              formatted_time: new Date(Date.now() - 1000 * 60 * 5).toLocaleString('tr-TR'),
              time_ago: '5 dakika önce',
              level: 'BLOCK',
              source: 'iptables',
              message: 'Bağlantı Engellendi',
              display_message: 'Bağlantı Engellendi (192.168.1.15 → 10.0.0.1:80) [TCP]',
              event_type: 'packet_blocked',
              source_ip: '192.168.1.15',
              destination_ip: '10.0.0.1',
              source_port: 443,
              destination_port: 80,
              protocol: 'TCP',
              traffic_direction: 'OUTBOUND',
              traffic_type: 'pc_to_internet',
              action: 'BLOCK',
              packet_size: 1024,
              level_info: {
                severity: 4,
                color: 'red',
                turkish: 'Engellendi'
              },
              action_badge: {
                color: 'danger',
                text: 'Engel',
                icon: 'block'
              },
              source_info: {
                ip: '192.168.1.15',
                classification: 'Yerel Ağ',
                description: 'İç ağ adresi'
              },
              destination_info: {
                ip: '10.0.0.1',
                classification: 'Özel IP',
                description: 'Özel ağ adresi'
              },
              protocol_info: {
                name: 'TCP',
                description: 'Güvenilir veri iletimi'
              },
              port_info: {
                service: 'HTTP',
                description: 'Web trafiği',
                risk: 'LOW'
              },
              is_suspicious: true,
              threat_level: 'MEDIUM'
            },
            {
              id: '2',
              timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(),
              formatted_time: new Date(Date.now() - 1000 * 60 * 10).toLocaleString('tr-TR'),
              time_ago: '10 dakika önce',
              level: 'ALLOW',
              source: 'iptables',
              message: 'Erişim İzni Başarılı',
              display_message: 'Erişim İzni Başarılı (192.168.100.100 → 8.8.8.8:53) [UDP]',
              event_type: 'packet_allowed',
              source_ip: '192.168.100.100',
              destination_ip: '8.8.8.8',
              source_port: 54321,
              destination_port: 53,
              protocol: 'UDP',
              traffic_direction: 'OUTBOUND',
              traffic_type: 'pc_to_internet',
              action: 'ALLOW',
              packet_size: 64,
              level_info: {
                severity: 1,
                color: 'green',
                turkish: 'İzin Verildi'
              },
              action_badge: {
                color: 'success',
                text: 'İzin',
                icon: 'check'
              },
              source_info: {
                ip: '192.168.100.100',
                classification: 'Yerel Ağ',
                description: 'PC-to-PC Gateway'
              },
              destination_info: {
                ip: '8.8.8.8',
                classification: 'İnternet',
                description: 'Google DNS'
              },
              protocol_info: {
                name: 'UDP',
                description: 'Hızlı veri iletimi'
              },
              port_info: {
                service: 'DNS',
                description: 'Alan adı çözümleme',
                risk: 'LOW'
              },
              is_suspicious: false,
              threat_level: 'LOW'
            }
          ],
          pagination: {
            current_page: params.page || 1,
            total_pages: 1585,
            total_count: 15847,
            per_page: params.per_page || params.limit || 50,
            has_next: true,
            has_prev: false
          }
        },
        message: 'Logs retrieved successfully (fallback data)'
      };
    }
  },

  /**
   * Get log statistics for dashboard
   * Compatible with backend /api/v1/logs/statistics endpoint
   */
  async getLogStatistics(timeRange = '24h') {
    try {
      const response = await api.get('/api/v1/logs/statistics', {
        params: { time_range: timeRange }
      });

      return {
        success: true,
        data: response.data.details || response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Get log statistics error:', error);

      // Enhanced fallback with PC-to-PC specific metrics
      return {
        success: true,
        data: {
          time_range: timeRange,
          total_logs: 15847,
          blocked_requests: 2,
          allowed_requests: 15845,
          warning_count: 3,
          unique_ips: 25,
          level_distribution: [
            {
              level: 'ALLOW',
              count: 15845,
              turkish_name: 'İzin Verildi',
              color: 'green',
              percentage: 99.9
            },
            {
              level: 'BLOCK',
              count: 2,
              turkish_name: 'Engellendi',
              color: 'red',
              percentage: 0.1
            }
          ],
          top_sources: [
            { _id: 'iptables', count: 15000 },
            { _id: 'firewall_allow', count: 800 },
            { _id: 'firewall_block', count: 47 }
          ],
          top_ips: [
            { _id: '192.168.100.100', count: 12000 },
            { _id: '8.8.8.8', count: 2000 },
            { _id: '142.250.184.142', count: 1500 }
          ],
          security_metrics: {
            block_rate: 0.1,
            allow_rate: 99.9,
            warning_rate: 0.02
          }
        },
        message: 'Statistics retrieved successfully (fallback data)'
      };
    }
  },

  /**
   * Get real-time statistics
   * Compatible with backend /api/v1/logs/real-time-stats endpoint
   */
  async getRealTimeStats() {
    try {
      const response = await api.get('/api/v1/logs/real-time-stats');

      return {
        success: true,
        data: response.data.details || response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Get real-time stats error:', error);

      return {
        success: true,
        data: {
          timestamp: new Date().toISOString(),
          recent_logs_5min: 125,
          recent_blocked_5min: 2,
          active_connections: 45,
          logs_per_minute: 25.0,
          system_status: 'active',
          total_packets: 150000,
          bytes_transferred: 2048576,
          unique_ips_count: 25
        },
        message: 'Real-time stats retrieved (fallback data)'
      };
    }
  },

  /**
   * Search logs with advanced criteria
   * Compatible with backend /api/v1/logs/search endpoint
   */
  async searchLogs(searchTerm, searchType = 'message', limit = 100) {
    try {
      const response = await api.get('/api/v1/logs/search', {
        params: {
          q: searchTerm,
          search_type: searchType,
          limit: limit
        }
      });

      return {
        success: true,
        data: response.data.details || response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Search logs error:', error);

      return {
        success: false,
        error: error.response?.data?.detail || 'Log arama başarısız',
        data: []
      };
    }
  },

  /**
   * Get security alerts
   * Compatible with backend /api/v1/logs/security-alerts endpoint
   */
  async getSecurityAlerts(limit = 50) {
    try {
      const response = await api.get('/api/v1/logs/security-alerts', {
        params: { limit }
      });

      return {
        success: true,
        data: response.data.details?.data || response.data.data || [],
        count: response.data.details?.count || 0,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Get security alerts error:', error);

      return {
        success: true,
        data: [
          {
            id: '1',
            timestamp: new Date().toISOString(),
            formatted_time: new Date().toLocaleString('tr-TR'),
            time_ago: 'Az önce',
            alert_type: 'high_blocked_traffic',
            severity: 'HIGH',
            title: 'Yüksek Hacimde Engellenen Trafik',
            description: 'Son 5 dakikada 50+ engellenen paket tespit edildi',
            source_ip: '192.168.1.15',
            acknowledged: false,
            resolved: false
          }
        ],
        count: 1,
        message: 'Security alerts retrieved (fallback data)'
      };
    }
  },

  /**
   * Export logs in various formats
   * Compatible with backend /api/v1/logs/export endpoint
   */
  async exportLogs(format = 'json', filters = {}) {
    try {
      const exportConfig = {
        format: format.toLowerCase(),
        start_date: filters.start_date,
        end_date: filters.end_date,
        level: filters.level,
        source: filters.source,
        max_records: filters.limit || 10000
      };

      const response = await api.post('/api/v1/logs/export', exportConfig, {
        responseType: 'blob',
        timeout: 300000 // 5 minute timeout
      });

      // Create download
      const blob = new Blob([response.data]);
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;

      const timestamp = new Date().toISOString().split('T')[0];
      const filename = `kobi_firewall_logs_${timestamp}.${format.toLowerCase()}`;
      link.setAttribute('download', filename);

      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);

      return {
        success: true,
        message: `${format.toUpperCase()} dosyası başarıyla indirildi`,
        filename
      };
    } catch (error) {
      console.error('❌ Export logs error:', error);
      return {
        success: false,
        error: error.response?.data?.detail || `${format.toUpperCase()} export başarısız`
      };
    }
  },

  /**
   * Create manual log entry
   * Compatible with backend /api/v1/logs/manual endpoint
   */
  async createManualLog(logData) {
    try {
      const response = await api.post('/api/v1/logs/manual', {
        level: logData.level,
        message: logData.message,
        source: logData.source || 'manual',
        details: logData.details,
        source_ip: logData.source_ip,
        destination_ip: logData.destination_ip,
        protocol: logData.protocol
      });

      return {
        success: true,
        data: response.data.details,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Create manual log error:', error);
      return {
        success: false,
        error: error.response?.data?.detail || 'Manuel log oluşturulamadı'
      };
    }
  },

  /**
   * Clear old logs
   * Compatible with backend /api/v1/logs/clear endpoint
   */
  async clearOldLogs(daysToKeep = 30) {
    try {
      const response = await api.delete('/api/v1/logs/clear', {
        params: { days_to_keep: daysToKeep }
      });

      return {
        success: true,
        data: response.data.details,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Clear logs error:', error);
      return {
        success: false,
        error: error.response?.data?.detail || 'Loglar temizlenemedi'
      };
    }
  },

  /**
   * Get available log levels
   * Compatible with backend /api/v1/logs/levels endpoint
   */
  async getLogLevels() {
    try {
      const response = await api.get('/api/v1/logs/levels');

      return {
        success: true,
        data: response.data.details?.levels || response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Get log levels error:', error);

      return {
        success: true,
        data: [
          { value: 'ALL', label: 'Tüm Loglar', color: 'primary' },
          { value: 'ALLOW', label: 'İzin Verildi', color: 'success' },
          { value: 'BLOCK', label: 'Engellendi', color: 'danger' },
          { value: 'DENY', label: 'Reddedildi', color: 'danger' },
          { value: 'WARNING', label: 'Uyarı', color: 'warning' },
          { value: 'ERROR', label: 'Hata', color: 'danger' },
          { value: 'CRITICAL', label: 'Kritik', color: 'danger' },
          { value: 'INFO', label: 'Bilgi', color: 'info' },
          { value: 'DEBUG', label: 'Hata Ayıklama', color: 'secondary' }
        ]
      };
    }
  },

  /**
   * Get available log sources
   * Compatible with backend /api/v1/logs/sources endpoint
   */
  async getLogSources() {
    try {
      const response = await api.get('/api/v1/logs/sources');

      return {
        success: true,
        data: response.data.details?.sources || response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Get log sources error:', error);

      return {
        success: true,
        data: [
          { value: 'ALL', label: 'Tüm Kaynaklar', count: null },
          { value: 'iptables', label: 'Iptables (15000)', count: 15000 },
          { value: 'firewall_allow', label: 'Güvenlik Duvarı (800)', count: 800 },
          { value: 'netstat', label: 'Ağ Bağlantıları (47)', count: 47 }
        ]
      };
    }
  },

  /**
   * Get traffic summary for dashboard
   * Compatible with backend /api/v1/logs/traffic-summary endpoint
   */
  async getTrafficSummary(timeRange = '24h') {
    try {
      const response = await api.get('/api/v1/logs/traffic-summary', {
        params: { time_range: timeRange }
      });

      return {
        success: true,
        data: response.data.details || response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Get traffic summary error:', error);

      return {
        success: true,
        data: {
          time_range: timeRange,
          total_flows: 500,
          internal_traffic: [
            {
              source_ip: '192.168.100.100',
              destination_ip: '192.168.100.1',
              protocol: 'TCP',
              packet_count: 150,
              bytes_transferred: 15360
            }
          ],
          external_traffic: [
            {
              source_ip: '192.168.100.100',
              destination_ip: '8.8.8.8',
              protocol: 'UDP',
              packet_count: 350,
              bytes_transferred: 22400
            }
          ],
          summary: {
            internal_flows: 150,
            external_flows: 350,
            total_packets: 50000,
            total_bytes: 1048576
          }
        },
        message: 'Traffic summary retrieved (fallback data)'
      };
    }
  },

  /**
   * Check logs system health
   * Compatible with backend /api/v1/logs/health endpoint
   */
  async getHealthStatus() {
    try {
      const response = await api.get('/api/v1/logs/health');

      return {
        success: true,
        data: response.data.details || response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('❌ Health check error:', error);

      return {
        success: false,
        error: 'Health check başarısız',
        data: {
          logs_system: 'error',
          log_service: 'not_initialized',
          recent_activity: 0,
          database_connected: false,
          timestamp: new Date().toISOString()
        }
      };
    }
  },

  // ===========================================
  // DATA STATUS & PERSISTENCE
  // ===========================================

  /**
   * Get data persistence status for DataPersistenceIndicator
   */
  async getDataStatus() {
    try {
      const [statsResponse, healthResponse] = await Promise.all([
        this.getRealTimeStats(),
        this.getHealthStatus()
      ]);

      return {
        success: true,
        data: {
          persistence: {
            enabled: healthResponse.success,
            dataCollection: statsResponse.data?.system_status === 'active',
            totalActivities: statsResponse.data?.total_packets || 0,
            totalStats: 150,
            oldestRecord: '2024-01-01T00:00:00Z',
            newestRecord: new Date().toISOString(),
            systemUptime: 86400,
            databaseConnected: healthResponse.data?.database_connected !== false
          }
        }
      };
    } catch (error) {
      console.error('❌ Get data status error:', error);

      return {
        success: true,
        data: {
          persistence: {
            enabled: false,
            dataCollection: false,
            totalActivities: 0,
            totalStats: 0,
            oldestRecord: new Date().toISOString(),
            newestRecord: new Date().toISOString(),
            systemUptime: 0,
            databaseConnected: false
          }
        }
      };
    }
  },

  // ===========================================
  // LEGACY COMPATIBILITY METHODS
  // ===========================================

  /**
   * Legacy method for backward compatibility
   */
  async getDashboardStats() {
    return await this.getLogStatistics('24h');
  },

  /**
   * Legacy method for log statistics
   */
  async getLogStats() {
    return await this.getDashboardStats();
  },

  /**
   * Legacy log detail method
   */
  async getLogDetail(logId) {
    try {
      // Note: Backend doesn't have individual log detail endpoint
      // This would need to be implemented or we search by ID
      const searchResult = await this.searchLogs(logId, 'all', 1);

      if (searchResult.success && searchResult.data.length > 0) {
        return {
          success: true,
          data: searchResult.data[0]
        };
      }

      return {
        success: false,
        error: 'Log detayı bulunamadı'
      };
    } catch (error) {
      console.error('❌ Get log detail error:', error);
      return {
        success: false,
        error: 'Log detayı alınamadı'
      };
    }
  },

  /**
   * Legacy export method with simplified interface
   */
  async exportLogsLegacy(format, params = {}) {
    return await this.exportLogs(format, params);
  },

  /**
   * Legacy clear logs method
   */
  async clearLogs() {
    return await this.clearOldLogs(30);
  },

  /**
   * Get filter suggestions for autocomplete
   */
  async getFilterSuggestions(field, query) {
    try {
      // This endpoint may not exist in backend, provide fallback
      const suggestions = {
        source_ip: ['192.168.100.100', '192.168.100.101', '192.168.1.15'],
        level: ['ALLOW', 'BLOCK', 'DENY', 'WARNING', 'ERROR', 'CRITICAL', 'INFO'],
        protocol: ['TCP', 'UDP', 'ICMP', 'HTTP', 'HTTPS'],
        source: ['iptables', 'firewall_allow', 'firewall_block', 'netstat']
      };

      const fieldSuggestions = suggestions[field] || [];
      const filtered = fieldSuggestions.filter(item =>
        item.toLowerCase().includes(query.toLowerCase())
      );

      return {
        success: true,
        data: filtered
      };
    } catch (error) {
      console.error('Filter suggestions error:', error);
      return {
        success: true,
        data: []
      };
    }
  },

  /**
   * Archive logs (legacy method)
   */
  async archiveLogs(options = {}) {
    try {
      // Archive functionality would be part of clear logs
      return await this.clearOldLogs(options.daysToKeep || 90);
    } catch (error) {
      console.error('Archive logs error:', error);
      return {
        success: true,
        message: 'Loglar arşivlendi'
      };
    }
  },

  /**
   * Real-time log subscription (deprecated)
   * Use WebSocket service instead
   */
  subscribeToLogs(callback) {
    console.warn('subscribeToLogs deprecated. Use WebSocket service instead.');

    if (typeof callback !== 'function') return;

    const interval = setInterval(() => {
      const newLog = {
        id: Date.now().toString(),
        timestamp: new Date().toISOString(),
        formatted_time: new Date().toLocaleString('tr-TR'),
        time_ago: 'Az önce',
        source_ip: `192.168.100.${Math.floor(Math.random() * 255)}`,
        destination_ip: `8.8.8.${Math.floor(Math.random() * 255)}`,
        source_port: Math.floor(Math.random() * 65535),
        destination_port: Math.floor(Math.random() * 65535),
        level: ['ALLOW', 'BLOCK', 'WARNING', 'INFO'][Math.floor(Math.random() * 4)],
        message: 'Yeni trafik etkinliği',
        protocol: ['TCP', 'UDP'][Math.floor(Math.random() * 2)],
        event_type: 'traffic_log',
        traffic_direction: 'OUTBOUND',
        action: Math.random() > 0.8 ? 'BLOCK' : 'ALLOW',
        bytes_transferred: Math.floor(Math.random() * 10000)
      };

      callback(newLog);
    }, 10000);

    return () => clearInterval(interval);
  }
};

export default logsService;


================================================
File: src/services/natService.js
================================================
import api from '../utils/axios';

export const natService = {
  // NAT konfigÃ¼rasyonunu getir
  async getNatConfig() {
    try {
      const response = await api.get('/api/v1/nat/');
      return response.data;
    } catch (error) {
      console.error('NAT config fetch error:', error);
      // Fallback data - backend yapÄ±sÄ±na uygun
      return {
        success: true,
        data: {
          enabled: false,
          wan_interface: '',
          lan_interface: '',
          dhcp_range_start: '192.168.100.100',
          dhcp_range_end: '192.168.100.200',
          gateway_ip: '192.168.100.1',
          masquerade_enabled: true,
          configuration_type: 'pc_to_pc_sharing',
          status: 'Devre DÄ±ÅŸÄ±'
        }
      };
    }
  },

  // NAT konfigÃ¼rasyonunu gÃ¼ncelle (PUT endpoint kullan)
  async updateNatConfig(config) {
    try {
      const payload = {
        enabled: config.enabled,
        wan_interface: config.wanInterface || config.wan_interface,
        lan_interface: config.lanInterface || config.lan_interface,
        dhcp_range_start: config.dhcp_range_start || '192.168.100.100',
        dhcp_range_end: config.dhcp_range_end || '192.168.100.200',
        gateway_ip: config.gateway_ip || '192.168.100.1',
        masquerade_enabled: config.masquerade_enabled !== undefined ? config.masquerade_enabled : true
      };

      const response = await api.put('/api/v1/nat/', payload);
      return response.data;
    } catch (error) {
      console.error('NAT config update error:', error);
      throw error; // Real error handling for production
    }
  },

  // NAT konfigÃ¼rasyonunu kÄ±smi gÃ¼ncelle (backward compatibility)
  async patchNatConfig(config) {
    try {
      const payload = {
        enabled: config.enabled,
        wan_interface: config.wanInterface || config.wan_interface,
        lan_interface: config.lanInterface || config.lan_interface,
        dhcp_range_start: config.dhcp_range_start || '192.168.100.100',
        dhcp_range_end: config.dhcp_range_end || '192.168.100.200',
        gateway_ip: config.gateway_ip || '192.168.100.1',
        masquerade_enabled: config.masquerade_enabled !== undefined ? config.masquerade_enabled : true
      };

      const response = await api.patch('/api/v1/nat/', payload);
      return response.data;
    } catch (error) {
      console.error('NAT config patch error:', error);
      throw error;
    }
  },

  // Mevcut aÄŸ arayÃ¼zlerini getir (NAT iÃ§in Ã¶zel endpoint)
  async getAvailableInterfaces() {
    try {
      const response = await api.get('/api/v1/nat/interfaces');
      return response.data;
    } catch (error) {
      console.error('NAT interfaces fetch error:', error);
      // Fallback data - backend yapÄ±sÄ±na uygun
      return {
        success: true,
        data: {
          wan_candidates: [
            {
              name: 'wlan0',
              display_name: 'Wi-Fi',
              type: 'wireless',
              status: 'up',
              mac_address: 'AA:BB:CC:DD:EE:FF',
              description: 'Wi-Fi Interface (wlan0)'
            }
          ],
          lan_candidates: [
            {
              name: 'eth0',
              display_name: 'Ethernet 1',
              type: 'ethernet',
              status: 'up',
              mac_address: '00:11:22:33:44:55',
              description: 'Ethernet Interface (eth0)'
            },
            {
              name: 'eth1',
              display_name: 'Ethernet 2',
              type: 'ethernet',
              status: 'down',
              mac_address: '00:11:22:33:44:66',
              description: 'USB-Ethernet AdaptÃ¶rÃ¼'
            }
          ],
          all_interfaces: [
            {
              name: 'wlan0',
              display_name: 'Wi-Fi',
              type: 'wireless',
              status: 'up',
              mac_address: 'AA:BB:CC:DD:EE:FF',
              description: 'Wi-Fi Interface (wlan0)'
            },
            {
              name: 'eth0',
              display_name: 'Ethernet 1',
              type: 'ethernet',
              status: 'up',
              mac_address: '00:11:22:33:44:55',
              description: 'Ethernet Interface (eth0)'
            }
          ]
        }
      };
    }
  },

  // NAT durumunu kontrol et
  async getNatStatus() {
    try {
      const response = await api.get('/api/v1/nat/status');
      return response.data;
    } catch (error) {
      console.error('NAT status fetch error:', error);
      return {
        success: true,
        data: {
          enabled: false,
          status: 'disabled',
          wan_interface: '',
          lan_interface: '',
          gateway_ip: '192.168.100.1',
          dhcp_range_start: '192.168.100.100',
          dhcp_range_end: '192.168.100.200',
          ip_forwarding: false,
          masquerade_active: false,
          message: 'NAT is disabled'
        }
      };
    }
  },

  // PC-to-PC Internet Sharing kurulumu
  async setupPCSharing(config) {
    try {
      const payload = {
        wan_interface: config.wanInterface || config.wan_interface,
        lan_interface: config.lanInterface || config.lan_interface,
        dhcp_range_start: config.dhcp_range_start || '192.168.100.100',
        dhcp_range_end: config.dhcp_range_end || '192.168.100.200'
      };

      const response = await api.post('/api/v1/nat/setup-pc-sharing', payload);
      return response.data;
    } catch (error) {
      console.error('PC sharing setup error:', error);
      throw error;
    }
  },

  // NAT etkinleÅŸtir
  async enableNat() {
    try {
      const response = await api.post('/api/v1/nat/enable');
      return response.data;
    } catch (error) {
      console.error('NAT enable error:', error);
      throw error;
    }
  },

  // NAT devre dÄ±ÅŸÄ± bÄ±rak
  async disableNat() {
    try {
      const response = await api.post('/api/v1/nat/disable');
      return response.data;
    } catch (error) {
      console.error('NAT disable error:', error);
      throw error;
    }
  },

  // Interface doÄŸrulama
  async validateInterfaces(wanInterface, lanInterface) {
    try {
      const response = await api.post('/api/v1/nat/validate-interfaces', {
        wan_interface: wanInterface,
        lan_interface: lanInterface
      });
      return response.data;
    } catch (error) {
      console.error('Interface validation error:', error);
      return {
        valid: false,
        errors: ['Validation failed'],
        warnings: []
      };
    }
  },

  // Legacy endpoint desteÄŸi (backward compatibility)
  async getLegacyNatConfig() {
    try {
      const response = await api.get('/api/v1/nat/config');
      return response.data;
    } catch (error) {
      console.error('Legacy NAT config fetch error:', error);
      // Fallback to main endpoint
      return this.getNatConfig();
    }
  },

  // Veri durumunu getir (dashboard entegrasyonu iÃ§in)
  async getDataStatus() {
    try {
      const response = await api.get('/api/dashboard/data-status');
      return response.data;
    } catch (error) {
      console.error('Data status fetch error:', error);
      return {
        success: false,
        data: {
          persistence: {
            enabled: false,
            dataCollection: false,
            totalActivities: 0,
            systemUptime: 0
          }
        }
      };
    }
  },

  // Network service entegrasyonu (interface listesi iÃ§in fallback)
  async getNetworkInterfaces() {
    try {
      const response = await api.get('/api/v1/network/interfaces');
      return response.data;
    } catch (error) {
      console.error('Network interfaces fetch error:', error);
      // Fallback to NAT interfaces
      return this.getAvailableInterfaces();
    }
  },

  // Eski NAT fonksiyonlarÄ± (geriye dÃ¶nÃ¼k uyumluluk iÃ§in - ama kullanÄ±lmayacak)
  async getNatRules() {
    console.warn('getNatRules is deprecated - NAT rules are handled by firewall module');
    return {
      success: true,
      data: [],
      message: 'NAT rules are handled by firewall module'
    };
  },

  async addNatRule(rule) {
    console.warn('addNatRule is deprecated - use firewall module instead');
    throw new Error('NAT rules are handled by firewall module');
  },

  async updateNatRule(ruleId, rule) {
    console.warn('updateNatRule is deprecated - use firewall module instead');
    throw new Error('NAT rules are handled by firewall module');
  },

  async deleteNatRule(ruleId) {
    console.warn('deleteNatRule is deprecated - use firewall module instead');
    throw new Error('NAT rules are handled by firewall module');
  },

  async getPortForwardingRules() {
    console.warn('Port forwarding is handled by firewall module');
    return {
      success: true,
      data: [],
      message: 'Port forwarding is handled by firewall module'
    };
  },

  async getUpnpSettings() {
    console.warn('UPnP settings are not implemented in current NAT module');
    return {
      success: true,
      data: {
        enabled: false,
        allowedInterfaces: []
      },
      message: 'UPnP settings are not implemented'
    };
  },

  async updateUpnpSettings(settings) {
    console.warn('UPnP settings are not implemented in current NAT module');
    throw new Error('UPnP settings are not implemented');
  }
};


================================================
File: src/services/reportsService.js
================================================
import api from '../utils/axios';

export const reportsService = {
  // Rapor verilerini getir
  async getReportsData(timeFilter = 'Son 30 gÃ¼n') {
    try {
      const response = await api.get(`/api/v1/reports/data?filter=${encodeURIComponent(timeFilter)}`);
      return response.data;
    } catch (error) {
      console.error('Reports data fetch error:', error);
      // Fallback data
      return {
        success: true,
        data: {
          totalTraffic: '2.4 TB',
          trafficGrowth: '+12',
          systemAttempts: '34',
          attemptsGrowth: '-8',
          blockedRequests: '1,247',
          blockedGrowth: '+3',
          systemUptime: '15 gÃ¼n 6 saat',
          uptimePercentage: '99.8',
          securityReport: {
            attackAttempts: 34,
            blockedIPs: 12,
            topAttackedPorts: [
              { port: '22', service: 'SSH', attempts: 156 },
              { port: '80', service: 'HTTP', attempts: 89 },
              { port: '443', service: 'HTTPS', attempts: 34 }
            ]
          },
          quickStats: {
            dailyAverageTraffic: '80 GB',
            peakHour: '14:00-15:00',
            averageResponseTime: '12ms',
            successRate: '99.2%',
            securityScore: '8.7/10'
          },
          lastUpdate: '18.06.2025 04:09'
        }
      };
    }
  },

  // GÃ¼venlik raporunu getir
  async getSecurityReport(timeFilter = 'Son 30 gÃ¼n') {
    try {
      const response = await api.get(`/api/v1/reports/security?filter=${encodeURIComponent(timeFilter)}`);
      return response.data;
    } catch (error) {
      console.error('Security report fetch error:', error);
      throw error;
    }
  },

  // Trafik raporunu getir
  async getTrafficReport(timeFilter = 'Son 30 gÃ¼n') {
    try {
      const response = await api.get(`/api/v1/reports/traffic?filter=${encodeURIComponent(timeFilter)}`);
      return response.data;
    } catch (error) {
      console.error('Traffic report fetch error:', error);
      throw error;
    }
  },

  // Sistem raporunu getir
  async getSystemReport(timeFilter = 'Son 30 gÃ¼n') {
    try {
      const response = await api.get(`/api/v1/reports/system?filter=${encodeURIComponent(timeFilter)}`);
      return response.data;
    } catch (error) {
      console.error('System report fetch error:', error);
      throw error;
    }
  },

  // Raporu dÄ±ÅŸa aktar
  async exportReport(format, reportType, timeFilter = 'Son 30 gÃ¼n') {
    try {
      const response = await api.post('/api/v1/reports/export', {
        format,
        reportType,
        timeFilter
      }, {
        responseType: 'blob'
      });

      // Download file
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `report_${format.toLowerCase()}_${Date.now()}.${format.toLowerCase()}`);
      document.body.appendChild(link);
      link.click();
      link.remove();

      return { success: true };
    } catch (error) {
      console.error('Export report error:', error);
      throw error;
    }
  },

  // Veri durumunu getir
  async getDataStatus() {
    try {
      const response = await api.get('/api/dashboard/data-status');
      return response.data;
    } catch (error) {
      console.error('Data status fetch error:', error);
      return {
        success: false,
        data: {
          persistence: {
            enabled: false,
            dataCollection: false,
            totalActivities: 0,
            systemUptime: 0
          }
        }
      };
    }
  }
};


================================================
File: src/services/routesService.js
================================================
import api from '../utils/axios';

export const routesService = {
  // Statik rotalarÄ± getir
  async getStaticRoutes() {
    try {
      const response = await api.get('/api/v1/routes/static');
      return response.data;
    } catch (error) {
      console.error('Static routes fetch error:', error);
      // Fallback data for development
      return {
        success: true,
        data: [
          {
            id: '1',
            destination: '192.168.50.0',
            netmask: '255.255.255.0',
            gateway: '192.168.1.1',
            interface: 'eth0',
            metric: 1,
            enabled: true,
            description: 'Office Network Route'
          },
          {
            id: '2',
            destination: '10.0.0.0',
            netmask: '255.0.0.0',
            gateway: '192.168.1.254',
            interface: 'eth1',
            metric: 2,
            enabled: false,
            description: 'VPN Network Route'
          }
        ]
      };
    }
  },

  // Statik rota ekle
  async addStaticRoute(route) {
    try {
      const response = await api.post('/api/v1/routes/static', {
        destination: route.destination,
        netmask: route.netmask,
        gateway: route.gateway,
        interface: route.interface,
        metric: parseInt(route.metric),
        enabled: route.enabled,
        description: route.description
      });
      return response.data;
    } catch (error) {
      console.error('Add static route error:', error);
      // Simulate successful add for development
      return {
        success: true,
        message: 'Statik rota eklendi',
        data: {
          id: Date.now().toString(),
          ...route,
          metric: parseInt(route.metric)
        }
      };
    }
  },

  // Statik rota gÃ¼ncelle
  async updateStaticRoute(routeId, route) {
    try {
      const response = await api.patch(`/api/v1/routes/static/${routeId}`, {
        destination: route.destination,
        netmask: route.netmask,
        gateway: route.gateway,
        interface: route.interface,
        metric: parseInt(route.metric),
        enabled: route.enabled,
        description: route.description
      });
      return response.data;
    } catch (error) {
      console.error('Update static route error:', error);
      // Simulate successful update for development
      return {
        success: true,
        message: 'Statik rota gÃ¼ncellendi',
        data: {
          id: routeId,
          ...route,
          metric: parseInt(route.metric)
        }
      };
    }
  },

  // Statik rota sil
  async deleteStaticRoute(routeId) {
    try {
      const response = await api.delete(`/api/v1/routes/static/${routeId}`);
      return response.data;
    } catch (error) {
      console.error('Delete static route error:', error);
      // Simulate successful delete for development
      return {
        success: true,
        message: 'Statik rota silindi'
      };
    }
  },

  // Statik rota durumunu deÄŸiÅŸtir
  async toggleStaticRoute(routeId, enabled) {
    try {
      const response = await api.patch(`/api/v1/routes/static/${routeId}/toggle`, {
        enabled: enabled
      });
      return response.data;
    } catch (error) {
      console.error('Toggle static route error:', error);
      // Simulate successful toggle for development
      return {
        success: true,
        message: `Rota ${enabled ? 'etkinleÅŸtirildi' : 'devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±'}`
      };
    }
  },

  // Mevcut aÄŸ arayÃ¼zlerini getir
  async getAvailableInterfaces() {
    try {
      const response = await api.get('/api/v1/network/interfaces');
      return response.data;
    } catch (error) {
      console.error('Network interfaces fetch error:', error);
      // Fallback data
      return {
        success: true,
        data: [
          {
            name: 'eth0',
            displayName: 'Ethernet 0',
            description: 'Birincil Ethernet ArayÃ¼zÃ¼',
            type: 'ethernet',
            status: 'up',
            ip: '192.168.1.100'
          },
          {
            name: 'eth1',
            displayName: 'Ethernet 1',
            description: 'Ä°kincil Ethernet ArayÃ¼zÃ¼',
            type: 'ethernet',
            status: 'up',
            ip: '10.0.0.1'
          },
          {
            name: 'wlan0',
            displayName: 'Wi-Fi',
            description: 'Kablosuz AÄŸ ArayÃ¼zÃ¼',
            type: 'wireless',
            status: 'down',
            ip: null
          },
          {
            name: 'ppp0',
            displayName: 'PPP',
            description: 'Point-to-Point Protokol',
            type: 'ppp',
            status: 'down',
            ip: null
          }
        ]
      };
    }
  },

  // Routing table'Ä± getir
  async getRoutingTable() {
    try {
      const response = await api.get('/api/v1/routes/table');
      return response.data;
    } catch (error) {
      console.error('Routing table fetch error:', error);
      return {
        success: true,
        data: {
          routes: [],
          defaultGateway: '192.168.1.1',
          totalRoutes: 0
        }
      };
    }
  },

  // Route istatistiklerini getir
  async getRouteStats() {
    try {
      const response = await api.get('/api/v1/routes/stats');
      return response.data;
    } catch (error) {
      console.error('Route stats fetch error:', error);
      return {
        success: true,
        data: {
          totalStaticRoutes: 2,
          activeStaticRoutes: 1,
          totalSystemRoutes: 15,
          routingTableSize: 17
        }
      };
    }
  },

  // Veri durumunu getir
  async getDataStatus() {
    try {
      const response = await api.get('/api/dashboard/data-status');
      return response.data;
    } catch (error) {
      console.error('Data status fetch error:', error);
      return {
        success: true,
        data: {
          persistence: {
            enabled: true,
            dataCollection: true,
            totalActivities: 135421,
            systemUptime: 172800
          }
        }
      };
    }
  },

  // Route'u test et
  async testRoute(destination, gateway) {
    try {
      const response = await api.post('/api/v1/routes/test', {
        destination,
        gateway
      });
      return response.data;
    } catch (error) {
      console.error('Test route error:', error);
      return {
        success: true,
        data: {
          reachable: true,
          responseTime: 15,
          hops: 3
        }
      };
    }
  },

  // Default gateway'i getir
  async getDefaultGateway() {
    try {
      const response = await api.get('/api/v1/routes/default-gateway');
      return response.data;
    } catch (error) {
      console.error('Default gateway fetch error:', error);
      return {
        success: true,
        data: {
          gateway: '192.168.1.1',
          interface: 'eth0',
          metric: 0
        }
      };
    }
  },

  // Default gateway'i ayarla
  async setDefaultGateway(gateway, interface_name) {
    try {
      const response = await api.post('/api/v1/routes/default-gateway', {
        gateway,
        interface: interface_name
      });
      return response.data;
    } catch (error) {
      console.error('Set default gateway error:', error);
      throw error;
    }
  }
};


================================================
File: src/services/ruleGroupsService.js
================================================
import api from '../utils/axios';

export const ruleGroupsService = {
  // Kural gruplarÄ±nÄ± getir
  async getRuleGroups() {
    try {
      const response = await api.get('/api/v1/rule-groups');
      return response.data;
    } catch (error) {
      console.error('Rule groups fetch error:', error);
      // Fallback data for development
      return {
        success: true,
        data: [
          {
            id: '1',
            name: 'YasaklÄ± IP Adresleri',
            description: 'GÃ¼venlik tehdidi oluÅŸturan IP adreslerini engellemek iÃ§in kullanÄ±lan grup',
            ruleCount: 25,
            enabled: true,
            createdAt: '2025-01-15T10:30:00Z',
            updatedAt: '2025-01-18T14:20:00Z',
            rules: [
              { id: 'r1', source: '192.168.1.100', action: 'BLOCK', protocol: 'TCP' },
              { id: 'r2', source: '10.0.0.50', action: 'BLOCK', protocol: 'UDP' }
            ]
          },
          {
            id: '2',
            name: 'Ofis AÄŸÄ± KurallarÄ±',
            description: 'Ofis iÃ§i aÄŸ trafiÄŸi iÃ§in Ã¶zel kurallar',
            ruleCount: 12,
            enabled: true,
            createdAt: '2025-01-10T09:15:00Z',
            updatedAt: '2025-01-16T11:45:00Z',
            rules: []
          },
          {
            id: '3',
            name: 'Web Sunucu EriÅŸimi',
            description: 'Web sunucusuna gelen trafiÄŸi yÃ¶neten kurallar',
            ruleCount: 8,
            enabled: false,
            createdAt: '2025-01-12T16:00:00Z',
            updatedAt: '2025-01-17T08:30:00Z',
            rules: []
          }
        ]
      };
    }
  },

  // Yeni kural grubu oluÅŸtur
  async createRuleGroup(groupData) {
    try {
      const response = await api.post('/api/v1/rule-groups', groupData);
      return response.data;
    } catch (error) {
      console.error('Create rule group error:', error);
      // Simulate successful creation for development
      return {
        success: true,
        message: 'Kural grubu baÅŸarÄ±yla oluÅŸturuldu',
        data: {
          id: Date.now().toString(),
          ...groupData,
          ruleCount: 0,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          rules: []
        }
      };
    }
  },

  // Kural grubunu gÃ¼ncelle
  async updateRuleGroup(groupId, groupData) {
    try {
      const response = await api.patch(`/api/v1/rule-groups/${groupId}`, groupData);
      return response.data;
    } catch (error) {
      console.error('Update rule group error:', error);
      // Simulate successful update for development
      return {
        success: true,
        message: 'Kural grubu baÅŸarÄ±yla gÃ¼ncellendi',
        data: {
          id: groupId,
          ...groupData,
          updatedAt: new Date().toISOString()
        }
      };
    }
  },

  // Kural grubunu sil
  async deleteRuleGroup(groupId) {
    try {
      const response = await api.delete(`/api/v1/rule-groups/${groupId}`);
      return response.data;
    } catch (error) {
      console.error('Delete rule group error:', error);
      // Simulate successful deletion for development
      return {
        success: true,
        message: 'Kural grubu baÅŸarÄ±yla silindi'
      };
    }
  },

  // Kural grubu durumunu deÄŸiÅŸtir
  async toggleRuleGroup(groupId, enabled) {
    try {
      const response = await api.patch(`/api/v1/rule-groups/${groupId}/toggle`, { enabled });
      return response.data;
    } catch (error) {
      console.error('Toggle rule group error:', error);
      // Simulate successful toggle for development
      return {
        success: true,
        message: `Kural grubu ${enabled ? 'etkinleÅŸtirildi' : 'devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±'}`
      };
    }
  },

  // Gruba kural ekle
  async addRuleToGroup(groupId, rule) {
    try {
      const response = await api.post(`/api/v1/rule-groups/${groupId}/rules`, rule);
      return response.data;
    } catch (error) {
      console.error('Add rule to group error:', error);
      // Simulate successful addition for development
      return {
        success: true,
        message: 'Kural gruba baÅŸarÄ±yla eklendi',
        data: {
          id: Date.now().toString(),
          ...rule
        }
      };
    }
  },

  // Gruptan kural Ã§Ä±kar
  async removeRuleFromGroup(groupId, ruleId) {
    try {
      const response = await api.delete(`/api/v1/rule-groups/${groupId}/rules/${ruleId}`);
      return response.data;
    } catch (error) {
      console.error('Remove rule from group error:', error);
      // Simulate successful removal for development
      return {
        success: true,
        message: 'Kural gruptan baÅŸarÄ±yla Ã§Ä±karÄ±ldÄ±'
      };
    }
  },

  // Veri durumunu getir
  async getDataStatus() {
    try {
      const response = await api.get('/api/dashboard/data-status');
      return response.data;
    } catch (error) {
      console.error('Data status fetch error:', error);
      return {
        success: true,
        data: {
          persistence: {
            enabled: true,
            dataCollection: true,
            totalActivities: 135421,
            systemUptime: 172800
          }
        }
      };
    }
  }
};


================================================
File: src/services/securityRulesService.js
================================================
import api from '../utils/axios';

export const securityRulesService = {
  // Güvenlik kurallarını getir
  async getSecurityRules() {
    try {
      const response = await api.get('/api/v1/security-rules');
      return response.data;
    } catch (error) {
      console.error('Security rules fetch error:', error);
      // Fallback data for development
      return {
        success: true,
        data: [
          {
            id: '1',
            name: 'Web Sunucu Erişimi',
            group: 'Web Sunucu',
            action: 'İzin Ver',
            protocol: 'TCP',
            port: '80,443',
            sourceIp: '0.0.0.0/0',
            direction: 'Gelen',
            scheduling: '',
            profile: 'Genel',
            priority: 100,
            description: 'HTTP ve HTTPS trafiğine izin ver',
            enabled: true,
            startTime: '',
            endTime: '',
            weekDays: [],
            createdAt: '2025-01-15T10:30:00Z',
            updatedAt: '2025-01-18T14:20:00Z'
          },
          {
            id: '2',
            name: 'SSH Erişimi',
            group: 'Yönetim',
            action: 'İzin Ver',
            protocol: 'TCP',
            port: '22',
            sourceIp: '192.168.1.0/24',
            direction: 'Gelen',
            scheduling: 'Çalışma Saatleri',
            profile: 'Özel',
            priority: 50,
            description: 'Yerel ağdan SSH erişimi',
            enabled: true,
            startTime: '09:00',
            endTime: '18:00',
            weekDays: ['mon', 'tue', 'wed', 'thu', 'fri'],
            createdAt: '2025-01-12T16:00:00Z',
            updatedAt: '2025-01-17T08:30:00Z'
          },
          {
            id: '3',
            name: 'Şüpheli IP Engelleme',
            group: 'Güvenlik',
            action: 'Engelle',
            protocol: 'Her ikisi',
            port: 'Herhangi',
            sourceIp: '192.168.100.50',
            direction: 'Her ikisi',
            scheduling: '',
            profile: 'Herhangi',
            priority: 10,
            description: 'Şüpheli aktivite gösteren IP adresini engelle',
            enabled: false,
            startTime: '',
            endTime: '',
            weekDays: [],
            createdAt: '2025-01-10T09:15:00Z',
            updatedAt: '2025-01-16T11:45:00Z'
          }
        ]
      };
    }
  },

  // Yeni güvenlik kuralı oluştur
  async createSecurityRule(ruleData) {
    try {
      const response = await api.post('/api/v1/security-rules', ruleData);
      return response.data;
    } catch (error) {
      console.error('Create security rule error:', error);
      // Simulate successful creation for development
      return {
        success: true,
        message: 'Güvenlik kuralı başarıyla oluşturuldu',
        data: {
          id: Date.now().toString(),
          ...ruleData,
          priority: parseInt(ruleData.priority),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      };
    }
  },

  // Güvenlik kuralını güncelle
  async updateSecurityRule(ruleId, ruleData) {
    try {
      const response = await api.patch(`/api/v1/security-rules/${ruleId}`, ruleData);
      return response.data;
    } catch (error) {
      console.error('Update security rule error:', error);
      // Simulate successful update for development
      return {
        success: true,
        message: 'Güvenlik kuralı başarıyla güncellendi',
        data: {
          id: ruleId,
          ...ruleData,
          priority: parseInt(ruleData.priority),
          updatedAt: new Date().toISOString()
        }
      };
    }
  },

  // Güvenlik kuralını sil
  async deleteSecurityRule(ruleId) {
    try {
      const response = await api.delete(`/api/v1/security-rules/${ruleId}`);
      return response.data;
    } catch (error) {
      console.error('Delete security rule error:', error);
      // Simulate successful deletion for development
      return {
        success: true,
        message: 'Güvenlik kuralı başarıyla silindi'
      };
    }
  },

  // Güvenlik kuralı durumunu değiştir
  async toggleSecurityRule(ruleId, enabled) {
    try {
      const response = await api.patch(`/api/v1/security-rules/${ruleId}/toggle`, { enabled });
      return response.data;
    } catch (error) {
      console.error('Toggle security rule error:', error);
      // Simulate successful toggle for development
      return {
        success: true,
        message: `Güvenlik kuralı ${enabled ? 'etkinleştirildi' : 'devre dışı bırakıldı'}`
      };
    }
  },

  // Kural gruplarını getir
  async getRuleGroups() {
    try {
      const response = await api.get('/api/v1/rule-groups');
      return response.data;
    } catch (error) {
      console.error('Rule groups fetch error:', error);
      return {
        success: true,
        data: [
          { id: '1', name: 'Web Sunucu', enabled: true },
          { id: '2', name: 'Yönetim', enabled: true },
          { id: '3', name: 'Güvenlik', enabled: true },
          { id: '4', name: 'VPN Erişimi', enabled: true },
          { id: '5', name: 'Database', enabled: false }
        ]
      };
    }
  },

  // Veri durumunu getir
  async getDataStatus() {
    try {
      const response = await api.get('/api/dashboard/data-status');
      return response.data;
    } catch (error) {
      console.error('Data status fetch error:', error);
      return {
        success: true,
        data: {
          persistence: {
            enabled: true,
            dataCollection: true,
            totalActivities: 135421,
            systemUptime: 172800
          }
        }
      };
    }
  },

  // Kural istatistiklerini getir
  async getRuleStats() {
    try {
      const response = await api.get('/api/v1/security-rules/stats');
      return response.data;
    } catch (error) {
      console.error('Rule stats fetch error:', error);
      return {
        success: true,
        data: {
          totalRules: 15,
          activeRules: 12,
          blockRules: 5,
          allowRules: 10,
          scheduledRules: 3
        }
      };
    }
  },

  // Kuralları test et
  async testRule(ruleData) {
    try {
      const response = await api.post('/api/v1/security-rules/test', ruleData);
      return response.data;
    } catch (error) {
      console.error('Test rule error:', error);
      return {
        success: true,
        data: {
          matches: true,
          action: 'allow',
          reason: 'Kural başarıyla eşleşti'
        }
      };
    }
  },

  // Kuralları dışa aktar
  async exportRules(format = 'json') {
    try {
      const response = await api.get(`/api/v1/security-rules/export?format=${format}`, {
        responseType: 'blob'
      });

      // Download file
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `security_rules.${format}`);
      document.body.appendChild(link);
      link.click();
      link.remove();

      return { success: true };
    } catch (error) {
      console.error('Export rules error:', error);
      throw error;
    }
  },

  // Kuralları içe aktar
  async importRules(rulesFile) {
    try {
      const formData = new FormData();
      formData.append('rules', rulesFile);

      const response = await api.post('/api/v1/security-rules/import', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      return response.data;
    } catch (error) {
      console.error('Import rules error:', error);
      throw error;
    }
  }
};


================================================
File: src/services/settingsService.js
================================================
import api from '../utils/axios';

/**
 * Settings Service - Comprehensive API integration for system settings
 * Handles all settings-related API calls with proper error handling
 */
export const settingsService = {
  // ===== SETTINGS MANAGEMENT =====
  /**
   * Get all system settings
   * @returns {Promise<Object>} Settings data
   */
  async getSettings() {
    try {
      console.log('📡 [SettingsService] Fetching settings...');
      const response = await api.get('/api/v1/settings');
      console.log('✅ [SettingsService] Settings fetched:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] Settings fetch error:', error);
      throw this._handleError(error, 'Ayarlar alınamadı');
    }
  },

  /**
   * Update general settings (timezone, language, session timeout)
   * @param {Object} data - Settings data to update
   * @returns {Promise<Object>} Update response
   */
  async updateGeneralSettings(data) {
    try {
      console.log('📝 [SettingsService] Updating general settings:', data);
      const response = await api.patch('/api/v1/settings/general', data);
      console.log('✅ [SettingsService] General settings updated:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] General settings update error:', error);
      throw this._handleError(error, 'Genel ayarlar güncellenemedi');
    }
  },

  /**
   * Update specific settings section
   * @param {string} section - Settings section name
   * @param {Object} data - Settings data to update
   * @returns {Promise<Object>} Update response
   */
  async updateSettings(section, data) {
    try {
      console.log(`📝 [SettingsService] Updating ${section} settings:`, data);
      const response = await api.patch(`/api/v1/settings/${section}`, data);
      console.log(`✅ [SettingsService] ${section} settings updated:`, response.data);
      return response.data;
    } catch (error) {
      console.error(`❌ [SettingsService] ${section} settings update error:`, error);
      throw this._handleError(error, `${section} ayarları güncellenemedi`);
    }
  },

  // ===== SYSTEM INFORMATION =====
  /**
   * Get real-time system information
   * @returns {Promise<Object>} System info data
   */
  async getSystemInfo() {
    try {
      console.log('📡 [SettingsService] Fetching system info...');
      const response = await api.get('/api/v1/settings/system-info');
      console.log('✅ [SettingsService] System info fetched:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] System info fetch error:', error);
      // Return fallback data on error
      return {
        success: false,
        data: {
          version: '1.0.0',
          uptime: 'Bilinmiyor',
          memoryUsage: 0,
          diskUsage: 0,
          totalMemory: '0 GB',
          totalDisk: '0 GB',
          cpuUsage: 0,
          platform: 'Unknown'
        },
        error: error.message
      };
    }
  },

  /**
   * Get security status information
   * @returns {Promise<Object>} Security status data
   */
  async getSecurityStatus() {
    try {
      console.log('🔒 [SettingsService] Fetching security status...');
      const response = await api.get('/api/v1/settings/security-status');
      console.log('✅ [SettingsService] Security status fetched:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] Security status fetch error:', error);
      // Return fallback data on error
      return {
        success: false,
        data: {
          firewall: { status: 'Bilinmiyor', color: 'gray' },
          ssl: { status: 'Bilinmiyor', color: 'gray' },
          lastScan: { timeAgo: 'Bilinmiyor', status: 'Unknown' }
        },
        error: error.message
      };
    }
  },

  // ===== SYSTEM OPERATIONS =====
  /**
   * Restart the system
   * @returns {Promise<Object>} Restart response
   */
  async restartSystem() {
    try {
      console.log('🔄 [SettingsService] Initiating system restart...');
      const response = await api.post('/api/v1/settings/restart');
      console.log('✅ [SettingsService] System restart initiated:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] System restart error:', error);
      throw this._handleError(error, 'Sistem yeniden başlatılamadı');
    }
  },

  /**
   * Create manual backup
   * @returns {Promise<Object>} Backup response
   */
  async createBackup() {
    try {
      console.log('💾 [SettingsService] Creating manual backup...');
      const response = await api.post('/api/v1/settings/backup');
      console.log('✅ [SettingsService] Manual backup created:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] Backup creation error:', error);
      throw this._handleError(error, 'Yedekleme oluşturulamadı');
    }
  },

  /**
   * Check for system updates
   * @returns {Promise<Object>} Update check response
   */
  async checkUpdates() {
    try {
      console.log('🔍 [SettingsService] Checking for updates...');
      const response = await api.post('/api/v1/settings/check-updates');
      console.log('✅ [SettingsService] Update check completed:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] Check updates error:', error);
      throw this._handleError(error, 'Güncellemeler kontrol edilemedi');
    }
  },

  /**
   * Clear system logs
   * @returns {Promise<Object>} Log clear response
   */
  async clearLogs() {
    try {
      console.log('🗑️ [SettingsService] Clearing system logs...');
      const response = await api.delete('/api/v1/settings/logs');
      console.log('✅ [SettingsService] System logs cleared:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] Clear logs error:', error);
      throw this._handleError(error, 'Loglar temizlenemedi');
    }
  },

  // ===== DATA STATUS =====
  /**
   * Get data persistence status
   * @returns {Promise<Object>} Data status
   */
  async getDataStatus() {
    try {
      console.log('📊 [SettingsService] Fetching data status...');
      const response = await api.get('/api/dashboard/data-status');
      console.log('✅ [SettingsService] Data status fetched:', response.data);
      return response.data;
    } catch (error) {
      console.error('❌ [SettingsService] Data status fetch error:', error);
      // Return fallback data structure
      return {
        success: true,
        data: {
          persistence: {
            enabled: true,
            dataCollection: true,
            totalActivities: 1250,
            systemUptime: 86400
          }
        },
        error: error.message
      };
    }
  },

  // ===== ADVANCED OPERATIONS =====
  /**
   * Get comprehensive system health
   * @returns {Promise<Object>} System health data
   */
  async getSystemHealth() {
    try {
      console.log('🏥 [SettingsService] Fetching system health...');
      // Fetch multiple endpoints for comprehensive health
      const [systemInfo, securityStatus, dataStatus] = await Promise.allSettled([
        this.getSystemInfo(),
        this.getSecurityStatus(),
        this.getDataStatus()
      ]);

      return {
        success: true,
        data: {
          systemInfo: systemInfo.status === 'fulfilled' ? systemInfo.value : null,
          securityStatus: securityStatus.status === 'fulfilled' ? securityStatus.value : null,
          dataStatus: dataStatus.status === 'fulfilled' ? dataStatus.value : null,
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      console.error('❌ [SettingsService] System health fetch error:', error);
      throw this._handleError(error, 'Sistem durumu alınamadı');
    }
  },

  /**
   * Bulk update multiple settings sections
   * @param {Object} sections - Object with section names as keys
   * @returns {Promise<Object>} Bulk update response
   */
  async bulkUpdateSettings(sections) {
    try {
      console.log('📦 [SettingsService] Bulk updating settings:', sections);
      const updatePromises = Object.entries(sections).map(([section, data]) =>
        this.updateSettings(section, data)
      );

      const results = await Promise.allSettled(updatePromises);
      const successful = results.filter(r => r.status === 'fulfilled').length;
      const failed = results.filter(r => r.status === 'rejected').length;

      console.log(`✅ [SettingsService] Bulk update completed: ${successful} success, ${failed} failed`);

      return {
        success: failed === 0,
        message: `${successful} ayar güncellendi, ${failed} hata`,
        results: results
      };
    } catch (error) {
      console.error('❌ [SettingsService] Bulk update error:', error);
      throw this._handleError(error, 'Toplu güncelleme başarısız');
    }
  },

  // ===== UTILITY METHODS =====
  /**
   * Handle API errors with user-friendly messages
   * @private
   * @param {Error} error - Original error
   * @param {string} defaultMessage - Default error message
   * @returns {Error} Enhanced error
   */
  _handleError(error, defaultMessage) {
    const message = error.response?.data?.detail ||
                   error.response?.data?.message ||
                   error.message ||
                   defaultMessage;

    const enhancedError = new Error(message);
    enhancedError.originalError = error;
    enhancedError.status = error.response?.status;
    enhancedError.data = error.response?.data;
    return enhancedError;
  },

  /**
   * Get service health status
   * @returns {Object} Service health info
   */
  getServiceHealth() {
    return {
      name: 'SettingsService',
      version: '2.0.0',
      endpoints: [
        '/api/v1/settings',
        '/api/v1/settings/general',
        '/api/v1/settings/system-info',
        '/api/v1/settings/security-status',
        '/api/v1/settings/restart',
        '/api/v1/settings/backup',
        '/api/v1/settings/check-updates',
        '/api/v1/settings/logs',
        '/api/dashboard/data-status'
      ],
      features: [
        'Settings Management',
        'System Information',
        'Security Status',
        'System Operations',
        'Data Status Monitoring',
        'Bulk Updates',
        'Error Handling'
      ]
    };
  }
};

// Export default
export default settingsService;

// Named exports for convenience
export const {
  getSettings,
  updateGeneralSettings,
  updateSettings,
  getSystemInfo,
  getSecurityStatus,
  restartSystem,
  createBackup,
  checkUpdates,
  clearLogs,
  getDataStatus,
  getSystemHealth,
  bulkUpdateSettings
} = settingsService;


================================================
File: src/services/updatesService.js
================================================
// src/services/updatesService.js
import api from '../utils/axios';

export const updatesService = {
  // GÃ¼ncelleme verilerini getir
  async getUpdatesData() {
    try {
      const response = await api.get('/api/v1/system/updates');
      return response.data;
    } catch (error) {
      console.error('Updates data fetch error:', error);
      throw error;
    }
  },

  // GÃ¼ncelleme kontrolÃ¼ yap
  async checkUpdates() {
    try {
      const response = await api.post('/api/v1/system/updates/check');
      return response.data;
    } catch (error) {
      console.error('Check updates error:', error);
      throw error;
    }
  },

  // GÃ¼ncelleme yÃ¼kle
  async installUpdate(updateId) {
    try {
      const response = await api.post(`/api/v1/system/updates/${updateId}/install`);
      return response.data;
    } catch (error) {
      console.error('Install update error:', error);
      throw error;
    }
  },

  // GÃ¼ncelleme ayarlarÄ±nÄ± gÃ¼ncelle
  async updateSettings(settings) {
    try {
      const response = await api.patch('/api/v1/system/updates/settings', settings);
      return response.data;
    } catch (error) {
      console.error('Update settings error:', error);
      throw error;
    }
  },

  // GÃ¼ncelleme geÃ§miÅŸini getir
  async getUpdateHistory(limit = 20) {
    try {
      const response = await api.get(`/api/v1/system/updates/history?limit=${limit}`);
      return response.data;
    } catch (error) {
      console.error('Update history fetch error:', error);
      throw error;
    }
  },

  // Veri durumunu getir
  async getDataStatus() {
    try {
      const response = await api.get('/api/dashboard/data-status');
      return response.data;
    } catch (error) {
      console.error('Data status fetch error:', error);
      return {
        success: false,
        data: {
          persistence: {
            enabled: false,
            dataCollection: false,
            totalActivities: 0,
            systemUptime: 0
          }
        }
      };
    }
  }
};


================================================
File: src/services/websocketService.js
================================================
/**
 * Enhanced WebSocket Service for Real-time Log Updates
 * KOBI Firewall - PC-to-PC Internet Sharing Traffic Monitoring
 * Compatible with enhanced backend log system
 */

class RobustWebSocketService {
  constructor() {
    this.ws = null;
    this.callbacks = {
      onNewLog: [],
      onStatsUpdate: [],
      onConnectionChange: [],
      onError: [],
      onReconnect: [],
      onMonitoringStatusChange: [],
      onSecurityAlert: [],          // NEW: Security alerts
      onTrafficSummary: [],         // NEW: Traffic summary updates
      onRealTimeStats: []           // NEW: Real-time statistics
    };

    // Connection management
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 10;
    this.reconnectInterval = 3000;
    this.heartbeatInterval = 30000;
    this.heartbeatTimer = null;
    this.reconnectTimer = null;

    // Message queue for offline mode
    this.messageQueue = [];
    this.maxQueueSize = 1000;

    // Connection quality tracking
    this.lastPingTime = null;
    this.connectionQuality = 'disconnected'; // good, poor, disconnected
    this.connectionMetrics = {
      connectTime: null,
      disconnectTime: null,
      messagesReceived: 0,
      messagesSent: 0,
      reconnectCount: 0,
      logMessagesReceived: 0,      // NEW: Log-specific metrics
      statsUpdatesReceived: 0,     // NEW: Stats-specific metrics
      alertsReceived: 0            // NEW: Alert-specific metrics
    };

    // Enhanced logging for debugging
    this.debug = process.env.NODE_ENV === 'development';

    // Bind methods
    this.connect = this.connect.bind(this);
    this.disconnect = this.disconnect.bind(this);
    this.handleOpen = this.handleOpen.bind(this);
    this.handleMessage = this.handleMessage.bind(this);
    this.handleClose = this.handleClose.bind(this);
    this.handleError = this.handleError.bind(this);
  }

  // ===========================================
  // CONNECTION MANAGEMENT (Enhanced)
  // ===========================================

  connect() {
    try {
      // Prevent multiple connections
      if (this.ws && (this.ws.readyState === WebSocket.CONNECTING || this.ws.readyState === WebSocket.OPEN)) {
        this.log('🔌 WebSocket already connected or connecting');
        return;
      }

      // Clean up existing connection
      this.cleanup();

      // Determine WebSocket URL - Updated for backend compatibility
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const host = window.location.host;

      // Try multiple WebSocket endpoints for compatibility
      const wsEndpoints = [
        `${protocol}//${host}/api/v1/logs/ws`,          // Primary endpoint
        `${protocol}//${host}/api/v1/logs/realtime`,    // Alternative
        `${protocol}//${host}/ws/logs`,                 // Fallback
        `${protocol}//${host}/websocket/logs`           // Legacy
      ];

      this.connectWithEndpoints(wsEndpoints, 0);

    } catch (error) {
      console.error('❌ WebSocket connection error:', error);
      this.handleConnectionError(error);
    }
  }

  async connectWithEndpoints(endpoints, index) {
    if (index >= endpoints.length) {
      this.handleConnectionError(new Error('All WebSocket endpoints failed'));
      return;
    }

    const wsUrl = endpoints[index];
    this.log('🔌 WebSocket attempting connection to:', wsUrl);

    try {
      // Create new WebSocket connection with timeout
      this.ws = new WebSocket(wsUrl);

      // Set connection timeout
      const connectionTimeout = setTimeout(() => {
        if (this.ws.readyState === WebSocket.CONNECTING) {
          this.log('⏰ WebSocket connection timeout, trying next endpoint');
          this.ws.close();
          this.connectWithEndpoints(endpoints, index + 1);
        }
      }, 5000);

      // Set up event handlers
      this.ws.onopen = () => {
        clearTimeout(connectionTimeout);
        this.handleOpen();
      };

      this.ws.onmessage = this.handleMessage;
      this.ws.onclose = (event) => {
        clearTimeout(connectionTimeout);
        // If this was a connection failure, try next endpoint
        if (!this.isConnected && index < endpoints.length - 1) {
          this.connectWithEndpoints(endpoints, index + 1);
        } else {
          this.handleClose(event);
        }
      };

      this.ws.onerror = (error) => {
        clearTimeout(connectionTimeout);
        this.log('❌ WebSocket error on endpoint:', wsUrl, error);
        // Try next endpoint on error
        if (index < endpoints.length - 1) {
          this.connectWithEndpoints(endpoints, index + 1);
        } else {
          this.handleError(error);
        }
      };

      // Set connection start time
      this.connectionMetrics.connectTime = new Date();

    } catch (error) {
      this.log('❌ Failed to create WebSocket for:', wsUrl, error);
      this.connectWithEndpoints(endpoints, index + 1);
    }
  }

  disconnect() {
    try {
      this.log('🔌 WebSocket disconnecting...');

      // Stop reconnection attempts
      this.stopReconnection();

      // Stop heartbeat
      this.stopHeartbeat();

      // Close WebSocket connection
      if (this.ws) {
        this.ws.onclose = null; // Prevent reconnection
        this.ws.close(1000, 'User initiated disconnect');
        this.ws = null;
      }

      // Update state
      this.isConnected = false;
      this.connectionQuality = 'disconnected';
      this.connectionMetrics.disconnectTime = new Date();

      // Notify listeners
      this.notifyConnectionChange(false);
      this.log('✅ WebSocket disconnected');

    } catch (error) {
      console.error('❌ WebSocket disconnect error:', error);
    }
  }

  cleanup() {
    this.stopHeartbeat();
    this.stopReconnection();
    if (this.ws) {
      this.ws.onopen = null;
      this.ws.onmessage = null;
      this.ws.onclose = null;
      this.ws.onerror = null;
      this.ws = null;
    }
  }

  // ===========================================
  // ENHANCED EVENT HANDLERS
  // ===========================================

  handleOpen() {
    this.log('✅ WebSocket connection established');

    // Update connection state
    this.isConnected = true;
    this.reconnectAttempts = 0;
    this.connectionQuality = 'good';
    this.lastPingTime = Date.now();
    this.connectionMetrics.messagesReceived = 0;
    this.connectionMetrics.messagesSent = 0;

    // Start heartbeat
    this.startHeartbeat();

    // Send authentication/initialization if needed
    this.initializeConnection();

    // Flush message queue
    this.flushMessageQueue();

    // Notify listeners
    this.notifyConnectionChange(true);
    this.notifyReconnect();

    // Log metrics
    this.log('📊 WebSocket connection metrics:', this.connectionMetrics);
  }

  handleMessage(event) {
    try {
      const data = JSON.parse(event.data);
      this.connectionMetrics.messagesReceived++;

      // Update connection quality
      this.updateConnectionQuality();

      // Enhanced message handling for log system
      switch (data.type) {
        case 'new_log':
        case 'log_entry':
          this.connectionMetrics.logMessagesReceived++;
          this.notifyNewLog(this.enhanceLogData(data.data || data.payload));
          break;

        case 'stats_update':
        case 'log_statistics':
          this.connectionMetrics.statsUpdatesReceived++;
          this.notifyStatsUpdate(data.data || data.payload);
          break;

        case 'real_time_stats':
          this.notifyRealTimeStats(data.data || data.payload);
          break;

        case 'security_alert':
        case 'alert':
          this.connectionMetrics.alertsReceived++;
          this.notifySecurityAlert(data.data || data.payload);
          break;

        case 'traffic_summary':
          this.notifyTrafficSummary(data.data || data.payload);
          break;

        case 'monitoring_status_change':
        case 'status_change':
          this.notifyMonitoringStatusChange(data.data || data.payload);
          break;

        case 'ping':
          this.send({ type: 'pong', timestamp: new Date().toISOString() });
          break;

        case 'pong':
          this.lastPingTime = Date.now();
          break;

        case 'error':
          console.error('❌ WebSocket server error:', data.error || data.message);
          this.notifyError(data.error || data.message);
          break;

        case 'welcome':
        case 'connected':
          this.log('🎉 WebSocket welcome message:', data.message);
          break;

        case 'batch_logs':
          // Handle batch log updates
          if (Array.isArray(data.data)) {
            data.data.forEach(log => this.notifyNewLog(this.enhanceLogData(log)));
          }
          break;

        default:
          this.log('🔌 WebSocket unknown message type:', data.type, data);
      }

    } catch (error) {
      console.error('❌ WebSocket message parse error:', error, event.data);
      this.notifyError('Mesaj parse hatası');
    }
  }

  handleClose(event) {
    this.log('🔌 WebSocket connection closed:', event.code, event.reason);

    // Update state
    this.isConnected = false;
    this.connectionMetrics.disconnectTime = new Date();

    // Stop heartbeat
    this.stopHeartbeat();

    // Notify listeners
    this.notifyConnectionChange(false);

    // Handle different close codes
    if (event.code === 1000 || event.code === 1001) {
      // Clean close - don't reconnect
      this.connectionQuality = 'disconnected';
      this.log('✅ WebSocket clean close');
    } else {
      // Unexpected close - attempt reconnection
      this.connectionQuality = 'poor';
      this.log('⚠️ WebSocket unexpected close, will attempt reconnection');
      this.scheduleReconnection();
    }
  }

  handleError(error) {
    console.error('❌ WebSocket error:', error);
    this.connectionQuality = 'poor';
    this.notifyError('WebSocket bağlantı hatası');
  }

  handleConnectionError(error) {
    this.isConnected = false;
    this.connectionQuality = 'disconnected';
    this.notifyConnectionChange(false);
    this.notifyError(error.message || 'Bağlantı hatası');
    this.scheduleReconnection();
  }

  // ===========================================
  // NEW: CONNECTION INITIALIZATION
  // ===========================================

  initializeConnection() {
    try {
      // Send client information and preferences
      const initMessage = {
        type: 'init',
        client: 'kobi-firewall-frontend',
        version: '2.0.0',
        capabilities: ['logs', 'stats', 'alerts', 'real_time'],
        preferences: {
          log_levels: ['ALLOW', 'BLOCK', 'DENY', 'WARNING', 'ERROR'],
          real_time_updates: true,
          batch_size: 10
        },
        timestamp: new Date().toISOString()
      };

      this.send(initMessage);
      this.log('📤 Sent initialization message');

    } catch (error) {
      console.error('❌ Failed to initialize WebSocket connection:', error);
    }
  }

  // ===========================================
  // ENHANCED DATA PROCESSING
  // ===========================================

  enhanceLogData(logData) {
    if (!logData) return logData;

    try {
      // Add frontend-specific enhancements
      const enhanced = {
        ...logData,
        receivedAt: new Date().toISOString(),
        isRealTime: true
      };

      // Add Turkish time formatting if not present
      if (enhanced.timestamp && !enhanced.formatted_time) {
        enhanced.formatted_time = new Date(enhanced.timestamp).toLocaleString('tr-TR');
      }

      // Add time ago if not present
      if (enhanced.timestamp && !enhanced.time_ago) {
        const diff = Date.now() - new Date(enhanced.timestamp).getTime();
        enhanced.time_ago = this.formatTimeAgo(diff);
      }

      // Add action badge if not present
      if (enhanced.level && !enhanced.action_badge) {
        enhanced.action_badge = this.getActionBadge(enhanced.level);
      }

      return enhanced;

    } catch (error) {
      console.error('❌ Error enhancing log data:', error);
      return logData;
    }
  }

  formatTimeAgo(milliseconds) {
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return `${days} gün önce`;
    if (hours > 0) return `${hours} saat önce`;
    if (minutes > 0) return `${minutes} dakika önce`;
    return 'Az önce';
  }

  getActionBadge(level) {
    const badges = {
      'ALLOW': { color: 'success', text: 'İzin', icon: 'check' },
      'BLOCK': { color: 'danger', text: 'Engel', icon: 'block' },
      'DENY': { color: 'danger', text: 'Red', icon: 'x' },
      'WARNING': { color: 'warning', text: 'Uyarı', icon: 'alert-triangle' },
      'ERROR': { color: 'danger', text: 'Hata', icon: 'alert-circle' },
      'CRITICAL': { color: 'danger', text: 'Kritik', icon: 'alert-octagon' },
      'INFO': { color: 'info', text: 'Bilgi', icon: 'info' }
    };

    return badges[level] || badges['INFO'];
  }

  // ===========================================
  // ENHANCED CALLBACK MANAGEMENT
  // ===========================================

  onNewLog(callback) {
    this.callbacks.onNewLog.push(callback);
    return () => this.removeCallback('onNewLog', callback);
  }

  onStatsUpdate(callback) {
    this.callbacks.onStatsUpdate.push(callback);
    return () => this.removeCallback('onStatsUpdate', callback);
  }

  onRealTimeStats(callback) {
    this.callbacks.onRealTimeStats.push(callback);
    return () => this.removeCallback('onRealTimeStats', callback);
  }

  onSecurityAlert(callback) {
    this.callbacks.onSecurityAlert.push(callback);
    return () => this.removeCallback('onSecurityAlert', callback);
  }

  onTrafficSummary(callback) {
    this.callbacks.onTrafficSummary.push(callback);
    return () => this.removeCallback('onTrafficSummary', callback);
  }

  onMonitoringStatusChange(callback) {
    this.callbacks.onMonitoringStatusChange.push(callback);
    return () => this.removeCallback('onMonitoringStatusChange', callback);
  }

  onConnectionChange(callback) {
    this.callbacks.onConnectionChange.push(callback);
    return () => this.removeCallback('onConnectionChange', callback);
  }

  onError(callback) {
    this.callbacks.onError.push(callback);
    return () => this.removeCallback('onError', callback);
  }

  onReconnect(callback) {
    this.callbacks.onReconnect.push(callback);
    return () => this.removeCallback('onReconnect', callback);
  }

  removeCallback(type, callback) {
    const callbacks = this.callbacks[type];
    const index = callbacks.indexOf(callback);
    if (index > -1) {
      callbacks.splice(index, 1);
    }
  }

  // ===========================================
  // ENHANCED NOTIFICATION METHODS
  // ===========================================

  notifyNewLog(logData) {
    this.callbacks.onNewLog.forEach(callback => {
      try {
        callback(logData);
      } catch (error) {
        console.error('❌ New log callback error:', error);
      }
    });
  }

  notifyStatsUpdate(statsData) {
    this.callbacks.onStatsUpdate.forEach(callback => {
      try {
        callback(statsData);
      } catch (error) {
        console.error('❌ Stats update callback error:', error);
      }
    });
  }

  notifyRealTimeStats(statsData) {
    this.callbacks.onRealTimeStats.forEach(callback => {
      try {
        callback(statsData);
      } catch (error) {
        console.error('❌ Real-time stats callback error:', error);
      }
    });
  }

  notifySecurityAlert(alertData) {
    this.callbacks.onSecurityAlert.forEach(callback => {
      try {
        callback(alertData);
      } catch (error) {
        console.error('❌ Security alert callback error:', error);
      }
    });
  }

  notifyTrafficSummary(summaryData) {
    this.callbacks.onTrafficSummary.forEach(callback => {
      try {
        callback(summaryData);
      } catch (error) {
        console.error('❌ Traffic summary callback error:', error);
      }
    });
  }

  notifyMonitoringStatusChange(statusData) {
    this.callbacks.onMonitoringStatusChange.forEach(callback => {
      try {
        callback(statusData);
      } catch (error) {
        console.error('❌ Monitoring status callback error:', error);
      }
    });
  }

  notifyConnectionChange(connected) {
    this.callbacks.onConnectionChange.forEach(callback => {
      try {
        callback(connected, this.connectionQuality, this.getConnectionMetrics());
      } catch (error) {
        console.error('❌ Connection change callback error:', error);
      }
    });
  }

  notifyError(error) {
    this.callbacks.onError.forEach(callback => {
      try {
        callback(error);
      } catch (error) {
        console.error('❌ Error callback error:', error);
      }
    });
  }

  notifyReconnect() {
    this.callbacks.onReconnect.forEach(callback => {
      try {
        callback(this.reconnectAttempts, this.connectionMetrics.reconnectCount);
      } catch (error) {
        console.error('❌ Reconnect callback error:', error);
      }
    });
  }

  // ===========================================
  // RECONNECTION MANAGEMENT (Keep existing)
  // ===========================================

  scheduleReconnection() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('❌ WebSocket max reconnection attempts reached');
      this.connectionQuality = 'disconnected';
      this.notifyError('Maksimum yeniden bağlantı denemesi aşıldı');
      return;
    }

    const delay = Math.min(
      this.reconnectInterval * Math.pow(2, this.reconnectAttempts),
      30000 // Max 30 seconds
    );

    this.log(`🔄 WebSocket scheduling reconnection attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts} in ${delay}ms`);

    this.reconnectTimer = setTimeout(() => {
      this.reconnectAttempts++;
      this.connectionMetrics.reconnectCount++;
      this.connect();
    }, delay);
  }

  stopReconnection() {
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
      this.reconnectTimer = null;
    }
  }

  // ===========================================
  // HEARTBEAT MANAGEMENT (Keep existing)
  // ===========================================

  startHeartbeat() {
    this.stopHeartbeat();
    this.heartbeatTimer = setInterval(() => {
      if (this.isConnected) {
        this.send({ type: 'ping', timestamp: new Date().toISOString() });

        // Check if we haven't received a response in too long
        if (this.lastPingTime && (Date.now() - this.lastPingTime) > 60000) {
          console.warn('⚠️ WebSocket heartbeat timeout - connection may be dead');
          this.connectionQuality = 'poor';
          this.ws?.close();
        }
      }
    }, this.heartbeatInterval);
  }

  stopHeartbeat() {
    if (this.heartbeatTimer) {
      clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = null;
    }
  }

  updateConnectionQuality() {
    if (this.lastPingTime) {
      const timeSinceLastPing = Date.now() - this.lastPingTime;
      if (timeSinceLastPing < 5000) {
        this.connectionQuality = 'good';
      } else if (timeSinceLastPing < 15000) {
        this.connectionQuality = 'poor';
      } else {
        this.connectionQuality = 'disconnected';
      }
    }
  }

  // ===========================================
  // MESSAGE HANDLING (Keep existing)
  // ===========================================

  send(data) {
    if (this.isConnected && this.ws.readyState === WebSocket.OPEN) {
      try {
        this.ws.send(JSON.stringify(data));
        this.connectionMetrics.messagesSent++;
        return true;
      } catch (error) {
        console.error('❌ WebSocket send error:', error);
        this.addToMessageQueue(data);
        return false;
      }
    } else {
      this.addToMessageQueue(data);
      return false;
    }
  }

  addToMessageQueue(data) {
    if (this.messageQueue.length >= this.maxQueueSize) {
      this.messageQueue.shift();
    }
    this.messageQueue.push(data);
  }

  flushMessageQueue() {
    let flushedCount = 0;
    while (this.messageQueue.length > 0 && this.isConnected) {
      const message = this.messageQueue.shift();
      if (!this.send(message)) {
        this.messageQueue.unshift(message);
        break;
      }
      flushedCount++;
    }
    if (flushedCount > 0) {
      this.log(`📤 WebSocket flushed ${flushedCount} queued messages`);
    }
  }

  // ===========================================
  // ENHANCED STATUS AND METRICS
  // ===========================================

  getStatus() {
    return {
      isConnected: this.isConnected,
      connectionQuality: this.connectionQuality,
      reconnectAttempts: this.reconnectAttempts,
      queuedMessages: this.messageQueue.length,
      lastPingTime: this.lastPingTime,
      webSocketState: this.ws ? this.ws.readyState : null,
      endpoint: this.ws ? this.ws.url : null
    };
  }

  getConnectionQuality() {
    return this.connectionQuality;
  }

  getConnectionMetrics() {
    return {
      ...this.connectionMetrics,
      currentState: this.getStatus(),
      uptime: this.connectionMetrics.connectTime ?
        Date.now() - this.connectionMetrics.connectTime.getTime() : 0,
      messageRates: {
        logsPerMinute: this.connectionMetrics.logMessagesReceived,
        statsPerMinute: this.connectionMetrics.statsUpdatesReceived,
        alertsPerMinute: this.connectionMetrics.alertsReceived
      }
    };
  }

  // ===========================================
  // UTILITY METHODS
  // ===========================================

  isHealthy() {
    return this.isConnected &&
           this.connectionQuality !== 'disconnected' &&
           this.ws?.readyState === WebSocket.OPEN;
  }

  getReadyState() {
    if (!this.ws) return 'CLOSED';
    switch (this.ws.readyState) {
      case WebSocket.CONNECTING: return 'CONNECTING';
      case WebSocket.OPEN: return 'OPEN';
      case WebSocket.CLOSING: return 'CLOSING';
      case WebSocket.CLOSED: return 'CLOSED';
      default: return 'UNKNOWN';
    }
  }

  // Enhanced logging with debug support
  log(...args) {
    if (this.debug) {
      console.log('[WebSocket]', ...args);
    }
  }

  // For debugging
  getDebugInfo() {
    return {
      status: this.getStatus(),
      metrics: this.getConnectionMetrics(),
      readyState: this.getReadyState(),
      queueSize: this.messageQueue.length,
      callbackCounts: Object.keys(this.callbacks).reduce((acc, key) => {
        acc[key] = this.callbacks[key].length;
        return acc;
      }, {}),
      connectionHistory: {
        connectTime: this.connectionMetrics.connectTime,
        disconnectTime: this.connectionMetrics.disconnectTime,
        reconnectCount: this.connectionMetrics.reconnectCount
      }
    };
  }

  // ===========================================
  // NEW: SUBSCRIPTION HELPERS
  // ===========================================

  /**
   * Subscribe to all log-related events with a single callback
   */
  subscribeToLogEvents(callbacks) {
    const unsubscribers = [];

    if (callbacks.onNewLog) {
      unsubscribers.push(this.onNewLog(callbacks.onNewLog));
    }
    if (callbacks.onStatsUpdate) {
      unsubscribers.push(this.onStatsUpdate(callbacks.onStatsUpdate));
    }
    if (callbacks.onSecurityAlert) {
      unsubscribers.push(this.onSecurityAlert(callbacks.onSecurityAlert));
    }
    if (callbacks.onConnectionChange) {
      unsubscribers.push(this.onConnectionChange(callbacks.onConnectionChange));
    }
    if (callbacks.onError) {
      unsubscribers.push(this.onError(callbacks.onError));
    }

    // Return function to unsubscribe from all
    return () => {
      unsubscribers.forEach(unsubscribe => unsubscribe());
    };
  }

  /**
   * Request specific data types from server
   */
  requestData(dataTypes = ['logs', 'stats', 'alerts']) {
    this.send({
      type: 'request_data',
      data_types: dataTypes,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * Set filtering preferences for real-time data
   */
  setFilters(filters) {
    this.send({
      type: 'set_filters',
      filters: filters,
      timestamp: new Date().toISOString()
    });
  }
}

// Create and export singleton instance
export const webSocketService = new RobustWebSocketService();

// For debugging in browser console
if (typeof window !== 'undefined') {
  window.webSocketService = webSocketService;
}

export default webSocketService;


================================================
File: src/utils/axios.js
================================================
import axios from 'axios';
import { toast } from 'react-hot-toast';

// Axios instance oluştur - BACKEND PORTU 8000 (Backend'e uygun)
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8000',
  timeout: 30000, // NAT operations için artırıldı
  headers: {
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
    'Accept': 'application/json'
  },
});

// Request sayacı - sonsuz döngüyü engellemek için
let activeRequests = 0;
const MAX_CONCURRENT_REQUESTS = 10; // NAT operations için artırıldı

// Token expiry check utility - Backend JWT yapısına uygun
const isTokenExpired = () => {
  const tokenExpiry = localStorage.getItem('tokenExpiry');
  if (!tokenExpiry) return true;
  const expiryTime = parseInt(tokenExpiry);
  const now = Date.now();
  const fiveMinutes = 5 * 60 * 1000; // 5 minutes buffer
  return now >= (expiryTime - fiveMinutes);
};

// Auth data clear utility - Enhanced
const clearAuthData = () => {
  localStorage.removeItem('token');
  localStorage.removeItem('user');
  localStorage.removeItem('tokenExpiry');
  localStorage.removeItem('refreshToken');
  localStorage.removeItem('userRole'); // Backend'deki role sistemi için
  localStorage.removeItem('userPermissions'); // Backend'deki permission sistemi için
};

// Redirect to login utility - Enhanced
const redirectToLogin = (message = 'Oturum süreniz doldu. Lütfen tekrar giriş yapın.') => {
  const currentPath = window.location.pathname;
  if (currentPath !== '/login' && currentPath !== '/') {
    clearAuthData();
    toast.error(message);
    setTimeout(() => {
      window.location.href = '/login';
    }, 1000);
  }
};

// Request interceptor - Backend'e uygun
api.interceptors.request.use(
  (config) => {
    // Debug mode logging
    if (import.meta.env.VITE_DEBUG === 'true') {
      console.log(`📤 [AXIOS] ${config.method?.toUpperCase()} ${config.url}`);
      console.log(`📤 [AXIOS] Headers:`, config.headers);
      if (config.data) {
        console.log(`📤 [AXIOS] Data:`, config.data);
      }
    }

    // Çok fazla eş zamanlı istek varsa engelle
    if (activeRequests >= MAX_CONCURRENT_REQUESTS) {
      console.warn('⚠️ [AXIOS] Too many concurrent requests, rejecting');
      return Promise.reject(new Error('Too many concurrent requests'));
    }

    activeRequests++;

    // Token kontrolü
    const token = localStorage.getItem('token');

    // Token expiry check
    if (token && isTokenExpired()) {
      console.log('⏰ [AXIOS] Token expired, clearing auth data');
      clearAuthData();
      redirectToLogin();
      return Promise.reject(new Error('Token expired'));
    }

    // Token varsa header'a ekle - Backend JWT formatına uygun
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // Backend'deki enhanced headers support
    config.headers['X-Request-Time'] = Date.now().toString();
    config.headers['X-Client-Version'] = '2.0.0'; // NAT module versiyonu
    config.headers['X-Client-Type'] = 'kobi-firewall-frontend';

    // NAT operations için özel timeout
    if (config.url?.includes('/nat/')) {
      config.timeout = 45000; // NAT işlemleri daha uzun sürebilir
    }

    // PC-to-PC sharing için özel timeout
    if (config.url?.includes('/setup-pc-sharing')) {
      config.timeout = 60000; // PC-to-PC kurulum uzun sürebilir
    }

    return config;
  },
  (error) => {
    activeRequests = Math.max(0, activeRequests - 1);
    console.error('❌ [AXIOS] Request error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor - Backend response'larına uygun
api.interceptors.response.use(
  (response) => {
    activeRequests = Math.max(0, activeRequests - 1);

    // Debug mode logging
    if (import.meta.env.VITE_DEBUG === 'true') {
      console.log(`📥 [AXIOS] ${response.status} ${response.config.method?.toUpperCase()} ${response.config.url}`);
      console.log(`📥 [AXIOS] Response:`, response.data);
    }

    // Backend'deki success response format kontrolü
    if (response.data && typeof response.data === 'object') {
      // Backend success response'ları için success field'ı kontrol et
      if (response.data.success === false && response.data.message) {
        console.warn('⚠️ [AXIOS] Backend returned success=false:', response.data.message);
        toast.error(response.data.message);
      }
    }

    return response;
  },
  (error) => {
    activeRequests = Math.max(0, activeRequests - 1);

    // Connection refused ve network errors için özel handling
    if (error.code === 'ERR_CONNECTION_REFUSED' || error.code === 'ECONNREFUSED') {
      console.error('🔌 [AXIOS] Backend server bağlanamıyor:', error.message);
      toast.error('Backend server\'a bağlanılamıyor. Server çalışır durumda mı?');
      return Promise.reject(error);
    }

    // Timeout hatalarını handle et - NAT operations için özel mesaj
    if (error.code === 'ECONNABORTED') {
      const isNATOperation = error.config?.url?.includes('/nat/');
      console.warn('⏱️ [AXIOS] Request timeout:', error.config?.url);

      if (isNATOperation) {
        toast.error('NAT işlemi zaman aşımına uğradı. İşlem arka planda devam edebilir.');
      } else {
        toast.error('İstek zaman aşımına uğradı. Lütfen tekrar deneyin.');
      }
      return Promise.reject(error);
    }

    // Too many concurrent requests
    if (error.message === 'Too many concurrent requests') {
      console.warn('🚦 [AXIOS] Too many concurrent requests');
      toast.error('Çok fazla eş zamanlı istek. Lütfen bekleyin.');
      return Promise.reject(error);
    }

    const { response } = error;

    // Response varsa status code'a göre handle et
    if (response) {
      const { status, data } = response;

      // Backend error response format'ına uygun handling
      const errorMessage = data?.message || data?.detail || data?.error;
      const errorDetails = data?.details;

      switch (status) {
        case 401:
          console.log('🔐 [AXIOS] 401 Unauthorized - clearing auth data');
          redirectToLogin(errorMessage || 'Oturum süreniz doldu');
          break;

        case 403:
          console.warn('🚫 [AXIOS] 403 Forbidden');
          toast.error(errorMessage || 'Bu işlem için yetkiniz bulunmuyor');
          break;

        case 404:
          console.warn('📍 [AXIOS] 404 Not Found:', error.config?.url);
          toast.error(errorMessage || 'İstenilen kaynak bulunamadı');
          break;

        case 422:
          console.warn('📝 [AXIOS] 422 Validation Error:', data);

          // Backend validation error format'ına uygun
          if (Array.isArray(data?.detail)) {
            // FastAPI validation errors
            const validationErrors = data.detail.map(err =>
              typeof err === 'object' ? err.msg || err.message : err
            ).join(', ');
            toast.error(`Doğrulama hatası: ${validationErrors}`);
          } else if (data?.errors && Array.isArray(data.errors)) {
            // Backend custom validation errors
            const validationErrors = data.errors.join(', ');
            toast.error(`Doğrulama hatası: ${validationErrors}`);
          } else {
            toast.error(errorMessage || 'Geçersiz veri gönderildi');
          }
          break;

        case 429:
          console.warn('🐌 [AXIOS] 429 Rate Limited');
          toast.error('Çok fazla istek gönderildi. Lütfen bekleyin.');
          break;

        case 500:
          console.error('💥 [AXIOS] 500 Internal Server Error');
          const serverError = errorMessage || 'Sunucu hatası';
          toast.error(serverError);

          // NAT operations için özel handling
          if (error.config?.url?.includes('/nat/')) {
            console.error('🔧 [NAT] NAT operation server error:', errorDetails);
          }
          break;

        case 502:
          console.error('🔗 [AXIOS] 502 Bad Gateway');
          toast.error('Sunucu bağlantı hatası. Lütfen daha sonra tekrar deneyin.');
          break;

        case 503:
          console.error('🔧 [AXIOS] 503 Service Unavailable');
          toast.error('Servis şu anda kullanılamıyor. Lütfen daha sonra tekrar deneyin.');
          break;

        default:
          if (status >= 400 && status < 500) {
            console.warn(`⚠️ [AXIOS] ${status} Client Error:`, data);
            toast.error(errorMessage || 'İstek hatası oluştu');
          } else if (status >= 500) {
            console.error(`💥 [AXIOS] ${status} Server Error:`, data);
            toast.error(errorMessage || 'Sunucu hatası. Lütfen daha sonra tekrar deneyin.');
          }
      }
    } else {
      // Network error or no response
      if (error.code === 'NETWORK_ERROR' || !navigator.onLine) {
        console.warn('🌐 [AXIOS] Network error - offline?');
        toast.error('İnternet bağlantınızı kontrol edin');
      } else {
        console.error('❌ [AXIOS] Unknown error:', error);
        toast.error('Bilinmeyen bir hata oluştu');
      }
    }

    return Promise.reject(error);
  }
);

// Helper functions - Backend'e uygun
export const setAuthToken = (token, expiresIn = 3600, userRole = null) => {
  if (token) {
    localStorage.setItem('token', token);
    localStorage.setItem('tokenExpiry', (Date.now() + (expiresIn * 1000)).toString());

    // Backend'deki role sistemi için
    if (userRole) {
      localStorage.setItem('userRole', userRole);
    }

    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  } else {
    clearAuthData();
    delete api.defaults.headers.common['Authorization'];
  }
};

export const getAuthToken = () => {
  return localStorage.getItem('token');
};

export const getUserRole = () => {
  return localStorage.getItem('userRole');
};

export const isAuthenticated = () => {
  const token = getAuthToken();
  return token && !isTokenExpired();
};

export const isAdmin = () => {
  const role = getUserRole();
  return role === 'admin';
};

export const clearAuth = () => {
  clearAuthData();
  delete api.defaults.headers.common['Authorization'];
};

// API health check - Backend'e uygun
export const checkAPIHealth = async () => {
  try {
    const response = await api.get('/health', { timeout: 5000 });
    return response.status === 200;
  } catch (error) {
    console.error('❌ [AXIOS] API health check failed:', error);
    return false;
  }
};

// NAT-specific health check
export const checkNATHealth = async () => {
  try {
    const response = await api.get('/api/v1/nat/status', { timeout: 10000 });
    return response.status === 200 && response.data.success;
  } catch (error) {
    console.error('❌ [AXIOS] NAT health check failed:', error);
    return false;
  }
};

// Backend connection test
export const testBackendConnection = async () => {
  try {
    const response = await api.get('/', { timeout: 5000 });
    return {
      connected: true,
      data: response.data,
      status: response.status
    };
  } catch (error) {
    return {
      connected: false,
      error: error.message,
      code: error.code
    };
  }
};

// Request queue için utility
export const getActiveRequestCount = () => activeRequests;

// Enhanced error handling for NAT operations
export const handleNATError = (error, operation = 'NAT operation') => {
  console.error(`🔧 [NAT] ${operation} failed:`, error);

  if (error.response?.status === 500) {
    toast.error(`${operation} sunucu hatası. NAT servisi çalışır durumda mı?`);
  } else if (error.code === 'ECONNABORTED') {
    toast.error(`${operation} zaman aşımına uğradı. İşlem arka planda devam edebilir.`);
  } else {
    toast.error(`${operation} başarısız: ${error.message}`);
  }
};

// Debug bilgileri - Enhanced
if (import.meta.env.VITE_DEBUG === 'true') {
  console.log('🔧 [AXIOS] Enhanced Configuration:', {
    baseURL: api.defaults.baseURL,
    timeout: api.defaults.timeout,
    maxConcurrentRequests: MAX_CONCURRENT_REQUESTS,
    natSupport: true,
    backendVersion: 'FastAPI 2.0.0',
    features: [
      'Enhanced JWT Auth',
      'NAT Operations Support',
      'Backend Error Handling',
      'Role-based Access',
      'PC-to-PC Sharing'
    ]
  });
}

export default api;


================================================
File: utils/axios.js
================================================
import axios from 'axios';
import { toast } from 'react-hot-toast';

// Axios instance oluÅŸtur - BACKEND PORTU 8000 OLMALI
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8000', // 5000 -> 8000
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request sayacÄ± - sonsuz dÃ¶ngÃ¼yÃ¼ engellemek iÃ§in
let activeRequests = 0;
const MAX_CONCURRENT_REQUESTS = 3;

// Request interceptor
api.interceptors.request.use(
  (config) => {
    // Ã‡ok fazla eÅŸ zamanlÄ± istek varsa engelle
    if (activeRequests >= MAX_CONCURRENT_REQUESTS) {
      return Promise.reject(new Error('Too many concurrent requests'));
    }
    activeRequests++;

    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    activeRequests--;
    return Promise.reject(error);
  }
);

// Response interceptor
api.interceptors.response.use(
  (response) => {
    activeRequests--;
    return response;
  },
  (error) => {
    activeRequests--;

    // Timeout hatalarÄ±nÄ± sessizce geÃ§
    if (error.code === 'ECONNABORTED' || error.message === 'Too many concurrent requests') {
      return Promise.reject(error);
    }

    const { response } = error;

    if (response?.status === 401) {
      // Token expired or invalid
      const currentPath = window.location.pathname;
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      localStorage.removeItem('rememberMe');

      // Sadece login sayfasÄ±nda deÄŸilse yÃ¶nlendir
      if (currentPath !== '/login') {
        window.location.href = '/login';
      }
    } else if (response?.status === 403) {
      toast.error('Bu iÅŸlem iÃ§in yetkiniz bulunmuyor');
    } else if (response?.status === 429) {
      toast.error('Ã‡ok fazla istek gÃ¶nderildi. LÃ¼tfen bekleyin.');
    } else if (response?.status >= 500) {
      toast.error('Sunucu hatasÄ±. LÃ¼tfen daha sonra tekrar deneyin.');
    } else if (error.code === 'NETWORK_ERROR') {
      // Network hatalarÄ±nÄ± sessizce logla
      console.warn('Network error:', error.message);
    }

    return Promise.reject(error);
  }
);

export default api;

