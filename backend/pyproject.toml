[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kobi-firewall-backend"
version = "2.0.0"
description = "Enterprise-grade firewall management system - Backend API"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "KOBI Firewall Team", email = "team@kobifirewall.com"}
]
maintainers = [
    {name = "KOBI Firewall Team", email = "team@kobifirewall.com"}
]
keywords = [
    "firewall",
    "security",
    "network",
    "fastapi",
    "enterprise",
    "cybersecurity"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking :: Firewalls",
    "Topic :: System :: Systems Administration",
    "Topic :: Security",
    "Framework :: FastAPI",
    "Environment :: Web Environment",
    "Typing :: Typed"
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "motor>=3.3.2,<4.0.0",
    "pymongo>=4.6.0,<5.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "python-multipart>=0.0.6,<1.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "psutil>=5.9.6,<6.0.0",
    "requests>=2.31.0,<3.0.0",
    "dnspython>=2.4.2,<3.0.0",
    "structlog>=23.2.0,<24.0.0",
    "rich>=13.7.0,<14.0.0",
    "slowapi>=0.1.9,<1.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3,<8.0.0",
    "pytest-asyncio>=0.21.1,<1.0.0",
    "httpx>=0.25.2,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "factory-boy>=3.3.0,<4.0.0",
    "faker>=20.1.0,<21.0.0"
]
lint = [
    "black>=23.11.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.1.0,<7.0.0",
    "mypy>=1.7.0,<2.0.0",
    "bandit[toml]>=1.7.5,<2.0.0",
    "safety>=2.3.5,<3.0.0"
]
docs = [
    "mkdocs>=1.5.3,<2.0.0",
    "mkdocs-material>=9.4.8,<10.0.0",
    "mkdocstrings[python]>=0.24.0,<1.0.0"
]
monitoring = [
    "prometheus-client>=0.19.0,<1.0.0",
    "sentry-sdk[fastapi]>=1.38.0,<2.0.0",
    "opentelemetry-api>=1.21.0,<2.0.0",
    "opentelemetry-sdk>=1.21.0,<2.0.0"
]
security = [
    "cryptography>=41.0.7,<42.0.0",
    "pycryptodome>=3.19.0,<4.0.0"
]
network = [
    "scapy>=2.5.0,<3.0.0",
    "netaddr>=0.10.1,<1.0.0",
    "ipaddress>=1.0.23; python_version<'3.3'"
]
all = [
    "kobi-firewall-backend[dev,lint,docs,monitoring,security,network]"
]

[project.urls]
Homepage = "https://github.com/your-org/kobi-firewall"
Documentation = "https://docs.kobifirewall.com"
Repository = "https://github.com/your-org/kobi-firewall.git"
"Bug Tracker" = "https://github.com/your-org/kobi-firewall/issues"
Changelog = "https://github.com/your-org/kobi-firewall/blob/main/CHANGELOG.md"

[project.scripts]
kobi-firewall = "app.cli:main"
kobi-init-db = "create_admin:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml"]

# Black - Code formatting
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort - Import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["app", "tests"]
skip_glob = ["*/migrations/*"]

# Flake8 - Linting
[tool.flake8]
max-line-length = 88
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache"
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "F401",  # imported but unused (handled by mypy)
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S106",  # allow assert and hardcoded passwords in tests
]

# MyPy - Type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "motor.*",
    "pymongo.*",
    "scapy.*",
    "dnspython.*",
    "slowapi.*"
]
ignore_missing_imports = true

# Pytest - Testing
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
    "database: Tests requiring database",
    "windows: Windows-specific tests",
    "linux: Linux-specific tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage.py
[tool.coverage.run]
source = ["app"]
omit = [
    "tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/conftest.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod"
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit - Security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "**/test_*.py"]

# Ruff - Fast Python linter (alternative to flake8)
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TC",  # flake8-type-checking
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501", # line-too-long, handled by black
    "B008", # do not perform function calls in argument defaults
    "B905", # zip without an explicit strict parameter
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pyupgrade]
keep-percent-format = true

# Docstring formatting
[tool.docformatter]
recursive = true
wrap-summaries = 88
wrap-descriptions = 88
make-summary-multi-line = false
close-quotes-on-newline = true
force-wrap = false
tab-width = 4

# Import sorting for notebooks
[tool.nbqa.config]
isort = "pyproject.toml"
black = "pyproject.toml"
flake8 = "pyproject.toml"

[tool.nbqa.mutate]
isort = 1
black = 1

[tool.nbqa.shell]
flake8 = "flake8 --extend-ignore=E402,F401"

# Security scanning configuration
[tool.safety]
ignore = [
    # Add CVE IDs to ignore here if needed
]
output = "json"
full-report = true

# Performance profiling
[tool.py-spy]
duration = 30
rate = 100
subprocesses = true